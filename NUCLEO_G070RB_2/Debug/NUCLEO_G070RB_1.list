
NUCLEO_G070RB_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08006cac  08006cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e98  08006e98  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006e98  08006e98  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e98  08006e98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055dc  20000074  08006f14  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005650  08006f14  00025650  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014354  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002957  00000000  00000000  000343f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00036d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00037e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016728  00000000  00000000  00038e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146a0  00000000  00000000  0004f528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092cd6  00000000  00000000  00063bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f689e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041cc  00000000  00000000  000f68f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006c94 	.word	0x08006c94

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	08006c94 	.word	0x08006c94

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <main>:
//D0 Relay0->, D1 Relay1->, D2->Relay3, D3 Relay4
//C6 sensor0,C7 sensor1
//void create_datapocket(char data, char configflag1,int configcnt1,char configflag2,int configcnt2);

int main(void)
{
 8000410:	b5b0      	push	{r4, r5, r7, lr}
 8000412:	b08a      	sub	sp, #40	; 0x28
 8000414:	af02      	add	r7, sp, #8
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000416:	240c      	movs	r4, #12
 8000418:	193b      	adds	r3, r7, r4
 800041a:	0018      	movs	r0, r3
 800041c:	2314      	movs	r3, #20
 800041e:	001a      	movs	r2, r3
 8000420:	2100      	movs	r1, #0
 8000422:	f005 ff09 	bl	8006238 <memset>
  HAL_Init();
 8000426:	f001 fd15 	bl	8001e54 <HAL_Init>
  SystemClock_Config();
 800042a:	f000 fecd 	bl	80011c8 <SystemClock_Config>
  MX_GPIO_Init();
 800042e:	f001 f841 	bl	80014b4 <MX_GPIO_Init>


  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000432:	4bdd      	ldr	r3, [pc, #884]	; (80007a8 <main+0x398>)
 8000434:	2201      	movs	r2, #1
 8000436:	2101      	movs	r1, #1
 8000438:	0018      	movs	r0, r3
 800043a:	f002 f8f6 	bl	800262a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 800043e:	4bda      	ldr	r3, [pc, #872]	; (80007a8 <main+0x398>)
 8000440:	2201      	movs	r2, #1
 8000442:	2102      	movs	r1, #2
 8000444:	0018      	movs	r0, r3
 8000446:	f002 f8f0 	bl	800262a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 800044a:	4bd7      	ldr	r3, [pc, #860]	; (80007a8 <main+0x398>)
 800044c:	2201      	movs	r2, #1
 800044e:	2104      	movs	r1, #4
 8000450:	0018      	movs	r0, r3
 8000452:	f002 f8ea 	bl	800262a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8000456:	4bd4      	ldr	r3, [pc, #848]	; (80007a8 <main+0x398>)
 8000458:	2201      	movs	r2, #1
 800045a:	2108      	movs	r1, #8
 800045c:	0018      	movs	r0, r3
 800045e:	f002 f8e4 	bl	800262a <HAL_GPIO_WritePin>

  MX_USART2_UART_Init();
 8000462:	f000 ffd9 	bl	8001418 <MX_USART2_UART_Init>
 // MX_RTC_Init();
  MX_TIM1_Init();
 8000466:	f000 ff7b 	bl	8001360 <MX_TIM1_Init>

  HAL_TIM_Base_Start_IT(&htim1);
 800046a:	4bd0      	ldr	r3, [pc, #832]	; (80007ac <main+0x39c>)
 800046c:	0018      	movs	r0, r3
 800046e:	f003 fb47 	bl	8003b00 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000472:	49cf      	ldr	r1, [pc, #828]	; (80007b0 <main+0x3a0>)
 8000474:	4bcf      	ldr	r3, [pc, #828]	; (80007b4 <main+0x3a4>)
 8000476:	2201      	movs	r2, #1
 8000478:	0018      	movs	r0, r3
 800047a:	f004 f852 	bl	8004522 <HAL_UART_Receive_IT>
  ei_printf("Project starts");
 800047e:	4bce      	ldr	r3, [pc, #824]	; (80007b8 <main+0x3a8>)
 8000480:	0018      	movs	r0, r3
 8000482:	f001 f895 	bl	80015b0 <ei_printf>
  //D0 Relay0->, D1 Relay1->, D2->Relay3, D3 Relay4
  //C6 sensor0,C7 sensor1

  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000486:	4bcd      	ldr	r3, [pc, #820]	; (80007bc <main+0x3ac>)
 8000488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800048a:	4bcc      	ldr	r3, [pc, #816]	; (80007bc <main+0x3ac>)
 800048c:	2108      	movs	r1, #8
 800048e:	430a      	orrs	r2, r1
 8000490:	635a      	str	r2, [r3, #52]	; 0x34
 8000492:	4bca      	ldr	r3, [pc, #808]	; (80007bc <main+0x3ac>)
 8000494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000496:	2208      	movs	r2, #8
 8000498:	4013      	ands	r3, r2
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	220f      	movs	r2, #15
 80004a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2201      	movs	r2, #1
 80004a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2202      	movs	r2, #2
 80004ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	4abb      	ldr	r2, [pc, #748]	; (80007a8 <main+0x398>)
 80004ba:	0019      	movs	r1, r3
 80004bc:	0010      	movs	r0, r2
 80004be:	f001 ff33 	bl	8002328 <HAL_GPIO_Init>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4bbe      	ldr	r3, [pc, #760]	; (80007bc <main+0x3ac>)
 80004c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004c6:	4bbd      	ldr	r3, [pc, #756]	; (80007bc <main+0x3ac>)
 80004c8:	2104      	movs	r1, #4
 80004ca:	430a      	orrs	r2, r1
 80004cc:	635a      	str	r2, [r3, #52]	; 0x34
 80004ce:	4bbb      	ldr	r3, [pc, #748]	; (80007bc <main+0x3ac>)
 80004d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d2:	2204      	movs	r2, #4
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	22c0      	movs	r2, #192	; 0xc0
 80004de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	4ab4      	ldr	r2, [pc, #720]	; (80007c0 <main+0x3b0>)
 80004f0:	0019      	movs	r1, r3
 80004f2:	0010      	movs	r0, r2
 80004f4:	f001 ff18 	bl	8002328 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80004f8:	4bab      	ldr	r3, [pc, #684]	; (80007a8 <main+0x398>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	2101      	movs	r1, #1
 80004fe:	0018      	movs	r0, r3
 8000500:	f002 f893 	bl	800262a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8000504:	4ba8      	ldr	r3, [pc, #672]	; (80007a8 <main+0x398>)
 8000506:	2201      	movs	r2, #1
 8000508:	2102      	movs	r1, #2
 800050a:	0018      	movs	r0, r3
 800050c:	f002 f88d 	bl	800262a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000510:	4ba5      	ldr	r3, [pc, #660]	; (80007a8 <main+0x398>)
 8000512:	2201      	movs	r2, #1
 8000514:	2104      	movs	r1, #4
 8000516:	0018      	movs	r0, r3
 8000518:	f002 f887 	bl	800262a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 800051c:	4ba2      	ldr	r3, [pc, #648]	; (80007a8 <main+0x398>)
 800051e:	2201      	movs	r2, #1
 8000520:	2108      	movs	r1, #8
 8000522:	0018      	movs	r0, r3
 8000524:	f002 f881 	bl	800262a <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
//		  HAL_Delay(1000);
//		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
//		  HAL_Delay(1000);
//	  }
	  if(backup_bit==1 && connection == 1)  // transmit backup data
 8000528:	4ba6      	ldr	r3, [pc, #664]	; (80007c4 <main+0x3b4>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d132      	bne.n	8000596 <main+0x186>
 8000530:	4ba5      	ldr	r3, [pc, #660]	; (80007c8 <main+0x3b8>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d12e      	bne.n	8000596 <main+0x186>
	  {
		  B_timer_flag=1;
 8000538:	4ba4      	ldr	r3, [pc, #656]	; (80007cc <main+0x3bc>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
		  if(B_timer_send==1)
 800053e:	4ba4      	ldr	r3, [pc, #656]	; (80007d0 <main+0x3c0>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d127      	bne.n	8000596 <main+0x186>
		  {
			  ei_printf("%s", B_data[sent_cnt]);
 8000546:	4ba3      	ldr	r3, [pc, #652]	; (80007d4 <main+0x3c4>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2264      	movs	r2, #100	; 0x64
 800054c:	435a      	muls	r2, r3
 800054e:	4ba2      	ldr	r3, [pc, #648]	; (80007d8 <main+0x3c8>)
 8000550:	18d2      	adds	r2, r2, r3
 8000552:	4ba2      	ldr	r3, [pc, #648]	; (80007dc <main+0x3cc>)
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f001 f82a 	bl	80015b0 <ei_printf>
			  sent_cnt++;
 800055c:	4b9d      	ldr	r3, [pc, #628]	; (80007d4 <main+0x3c4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	1c5a      	adds	r2, r3, #1
 8000562:	4b9c      	ldr	r3, [pc, #624]	; (80007d4 <main+0x3c4>)
 8000564:	601a      	str	r2, [r3, #0]
			  B_timer_flag=1;
 8000566:	4b99      	ldr	r3, [pc, #612]	; (80007cc <main+0x3bc>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
			  if(B_row==sent_cnt)
 800056c:	4b9c      	ldr	r3, [pc, #624]	; (80007e0 <main+0x3d0>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b98      	ldr	r3, [pc, #608]	; (80007d4 <main+0x3c4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	429a      	cmp	r2, r3
 8000576:	d10b      	bne.n	8000590 <main+0x180>
			  {
				  B_row=0;
 8000578:	4b99      	ldr	r3, [pc, #612]	; (80007e0 <main+0x3d0>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
				  sent_cnt=0;
 800057e:	4b95      	ldr	r3, [pc, #596]	; (80007d4 <main+0x3c4>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
				  backup_bit=0;
 8000584:	4b8f      	ldr	r3, [pc, #572]	; (80007c4 <main+0x3b4>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
				  B_timer_flag=0;
 800058a:	4b90      	ldr	r3, [pc, #576]	; (80007cc <main+0x3bc>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
			  }
			  B_timer_send=0;
 8000590:	4b8f      	ldr	r3, [pc, #572]	; (80007d0 <main+0x3c0>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if(data_flag==1)
 8000596:	4b93      	ldr	r3, [pc, #588]	; (80007e4 <main+0x3d4>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d105      	bne.n	80005aa <main+0x19a>
	  {
        // HAL_UART_Transmit(&huart2, rx_arr, rx_cnt, rx_cnt);
         rx_cnt=0;
 800059e:	4b92      	ldr	r3, [pc, #584]	; (80007e8 <main+0x3d8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
         data_flag=0;
 80005a4:	4b8f      	ldr	r3, [pc, #572]	; (80007e4 <main+0x3d4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	  }

	  if(set_time==Ready_to_send)// update time
 80005aa:	4b90      	ldr	r3, [pc, #576]	; (80007ec <main+0x3dc>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d10e      	bne.n	80005d0 <main+0x1c0>
	  {
		  //update_time("2023-05-10 15:59:10");//*2023-05-10 15:39:10,https://api.sourcesol.co.in/dac/data,000,000,000,000,000#

		  //ei_printf("%s",time_arr);
		  update_time(time_arr);
 80005b2:	4b8f      	ldr	r3, [pc, #572]	; (80007f0 <main+0x3e0>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fc0b 	bl	8001dd0 <update_time>
		  Settime_RTC();
 80005ba:	f000 fe51 	bl	8001260 <Settime_RTC>
		  set_time=3;
 80005be:	4b8b      	ldr	r3, [pc, #556]	; (80007ec <main+0x3dc>)
 80005c0:	2203      	movs	r2, #3
 80005c2:	701a      	strb	r2, [r3, #0]

		  time_cnt=0;
 80005c4:	4b8b      	ldr	r3, [pc, #556]	; (80007f4 <main+0x3e4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
		  sensordetected=1;// to send data soon after time is taken
 80005ca:	4b8b      	ldr	r3, [pc, #556]	; (80007f8 <main+0x3e8>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
	  }
	  if(set_time==3)
 80005d0:	4b86      	ldr	r3, [pc, #536]	; (80007ec <main+0x3dc>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d101      	bne.n	80005dc <main+0x1cc>
	     Read_Sensor();
 80005d8:	f000 f9dc 	bl	8000994 <Read_Sensor>
	  if(starterflag == Ready_to_send) // turn HIGH all relay pins afr specific pin turned low
 80005dc:	4b87      	ldr	r3, [pc, #540]	; (80007fc <main+0x3ec>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d11a      	bne.n	800061a <main+0x20a>
	  {
		  //ei_printf(" ----- came2----- ");
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80005e4:	4b70      	ldr	r3, [pc, #448]	; (80007a8 <main+0x398>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	2101      	movs	r1, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 f81d 	bl	800262a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 80005f0:	4b6d      	ldr	r3, [pc, #436]	; (80007a8 <main+0x398>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	2102      	movs	r1, #2
 80005f6:	0018      	movs	r0, r3
 80005f8:	f002 f817 	bl	800262a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 80005fc:	4b6a      	ldr	r3, [pc, #424]	; (80007a8 <main+0x398>)
 80005fe:	2201      	movs	r2, #1
 8000600:	2104      	movs	r1, #4
 8000602:	0018      	movs	r0, r3
 8000604:	f002 f811 	bl	800262a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8000608:	4b67      	ldr	r3, [pc, #412]	; (80007a8 <main+0x398>)
 800060a:	2201      	movs	r2, #1
 800060c:	2108      	movs	r1, #8
 800060e:	0018      	movs	r0, r3
 8000610:	f002 f80b 	bl	800262a <HAL_GPIO_WritePin>
		  starterflag=0;
 8000614:	4b79      	ldr	r3, [pc, #484]	; (80007fc <main+0x3ec>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	  }
	  if((event==Ready_to_send || sensordetected == 1) && (set_time==3 || set_config ==1))
 800061a:	4b79      	ldr	r3, [pc, #484]	; (8000800 <main+0x3f0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d004      	beq.n	800062c <main+0x21c>
 8000622:	4b75      	ldr	r3, [pc, #468]	; (80007f8 <main+0x3e8>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d000      	beq.n	800062c <main+0x21c>
 800062a:	e77d      	b.n	8000528 <main+0x118>
 800062c:	4b6f      	ldr	r3, [pc, #444]	; (80007ec <main+0x3dc>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b03      	cmp	r3, #3
 8000632:	d004      	beq.n	800063e <main+0x22e>
 8000634:	4b73      	ldr	r3, [pc, #460]	; (8000804 <main+0x3f4>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d000      	beq.n	800063e <main+0x22e>
 800063c:	e774      	b.n	8000528 <main+0x118>
	  {

		  if(event==Ready_to_send || set_config == 1)
 800063e:	4b70      	ldr	r3, [pc, #448]	; (8000800 <main+0x3f0>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d003      	beq.n	800064e <main+0x23e>
 8000646:	4b6f      	ldr	r3, [pc, #444]	; (8000804 <main+0x3f4>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d13b      	bne.n	80006c6 <main+0x2b6>
                	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);

			  }
			  else if(NO_OF_RELAYS == FOUR_RELAYS)
			  {
				    if(starter==1 || machine1==1)
 800064e:	4b6e      	ldr	r3, [pc, #440]	; (8000808 <main+0x3f8>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d003      	beq.n	800065e <main+0x24e>
 8000656:	4b6d      	ldr	r3, [pc, #436]	; (800080c <main+0x3fc>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d106      	bne.n	800066c <main+0x25c>
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);// starter1 on
 800065e:	4b52      	ldr	r3, [pc, #328]	; (80007a8 <main+0x398>)
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	0018      	movs	r0, r3
 8000666:	f001 ffe0 	bl	800262a <HAL_GPIO_WritePin>
 800066a:	e023      	b.n	80006b4 <main+0x2a4>
					else if(starter==2)
 800066c:	4b66      	ldr	r3, [pc, #408]	; (8000808 <main+0x3f8>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d106      	bne.n	8000682 <main+0x272>
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);// starter1 off
 8000674:	4b4c      	ldr	r3, [pc, #304]	; (80007a8 <main+0x398>)
 8000676:	2200      	movs	r2, #0
 8000678:	2102      	movs	r1, #2
 800067a:	0018      	movs	r0, r3
 800067c:	f001 ffd5 	bl	800262a <HAL_GPIO_WritePin>
 8000680:	e018      	b.n	80006b4 <main+0x2a4>
					else if(starter==3 || machine2==1)
 8000682:	4b61      	ldr	r3, [pc, #388]	; (8000808 <main+0x3f8>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d003      	beq.n	8000692 <main+0x282>
 800068a:	4b61      	ldr	r3, [pc, #388]	; (8000810 <main+0x400>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d106      	bne.n	80006a0 <main+0x290>
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);// starter2 on
 8000692:	4b45      	ldr	r3, [pc, #276]	; (80007a8 <main+0x398>)
 8000694:	2200      	movs	r2, #0
 8000696:	2108      	movs	r1, #8
 8000698:	0018      	movs	r0, r3
 800069a:	f001 ffc6 	bl	800262a <HAL_GPIO_WritePin>
 800069e:	e009      	b.n	80006b4 <main+0x2a4>
					else if(starter==4)
 80006a0:	4b59      	ldr	r3, [pc, #356]	; (8000808 <main+0x3f8>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b04      	cmp	r3, #4
 80006a6:	d105      	bne.n	80006b4 <main+0x2a4>
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);// starter1 off
 80006a8:	4b3f      	ldr	r3, [pc, #252]	; (80007a8 <main+0x398>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	2104      	movs	r1, #4
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 ffbb 	bl	800262a <HAL_GPIO_WritePin>

				    starterflag=1;
 80006b4:	4b51      	ldr	r3, [pc, #324]	; (80007fc <main+0x3ec>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
				    startertimercnt=0;
 80006ba:	4b56      	ldr	r3, [pc, #344]	; (8000814 <main+0x404>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]

			  }
			  event=0;
 80006c0:	4b4f      	ldr	r3, [pc, #316]	; (8000800 <main+0x3f0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
		  }
		  if(set_config==1)
 80006c6:	4b4f      	ldr	r3, [pc, #316]	; (8000804 <main+0x3f4>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d000      	beq.n	80006d0 <main+0x2c0>
 80006ce:	e0c9      	b.n	8000864 <main+0x454>
		  {
			  if(machine1==1)
 80006d0:	4b4e      	ldr	r3, [pc, #312]	; (800080c <main+0x3fc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d138      	bne.n	800074a <main+0x33a>
			  {
				  for(i=0;i<20;i++)   //remove '*'
 80006d8:	4b4f      	ldr	r3, [pc, #316]	; (8000818 <main+0x408>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	e00a      	b.n	80006f6 <main+0x2e6>
				  {
					  if(config_arr1[i]=='*')
 80006e0:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <main+0x408>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a4d      	ldr	r2, [pc, #308]	; (800081c <main+0x40c>)
 80006e6:	5cd3      	ldrb	r3, [r2, r3]
 80006e8:	2b2a      	cmp	r3, #42	; 0x2a
 80006ea:	d009      	beq.n	8000700 <main+0x2f0>
				  for(i=0;i<20;i++)   //remove '*'
 80006ec:	4b4a      	ldr	r3, [pc, #296]	; (8000818 <main+0x408>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	4b49      	ldr	r3, [pc, #292]	; (8000818 <main+0x408>)
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	4b48      	ldr	r3, [pc, #288]	; (8000818 <main+0x408>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b13      	cmp	r3, #19
 80006fc:	d9f0      	bls.n	80006e0 <main+0x2d0>
 80006fe:	e000      	b.n	8000702 <main+0x2f2>
					  {
						  config_arr1[i]=='\0';
						  break;
 8000700:	46c0      	nop			; (mov r8, r8)
					  }
				  }
				  inputval1 = atoi(config_arr1);
 8000702:	4b46      	ldr	r3, [pc, #280]	; (800081c <main+0x40c>)
 8000704:	0018      	movs	r0, r3
 8000706:	f005 fd67 	bl	80061d8 <atoi>
 800070a:	0003      	movs	r3, r0
 800070c:	001a      	movs	r2, r3
 800070e:	4b44      	ldr	r3, [pc, #272]	; (8000820 <main+0x410>)
 8000710:	601a      	str	r2, [r3, #0]
				  set_config=0;
 8000712:	4b3c      	ldr	r3, [pc, #240]	; (8000804 <main+0x3f4>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
				  config_cnt1=0;
 8000718:	4b42      	ldr	r3, [pc, #264]	; (8000824 <main+0x414>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
				  c_flag1=1;
 800071e:	4b42      	ldr	r3, [pc, #264]	; (8000828 <main+0x418>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
				  for(i=0;i<20;i++)
 8000724:	4b3c      	ldr	r3, [pc, #240]	; (8000818 <main+0x408>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	e009      	b.n	8000740 <main+0x330>
					  config_arr1[i]=0;
 800072c:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <main+0x408>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a3a      	ldr	r2, [pc, #232]	; (800081c <main+0x40c>)
 8000732:	2100      	movs	r1, #0
 8000734:	54d1      	strb	r1, [r2, r3]
				  for(i=0;i<20;i++)
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <main+0x408>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	4b36      	ldr	r3, [pc, #216]	; (8000818 <main+0x408>)
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	4b35      	ldr	r3, [pc, #212]	; (8000818 <main+0x408>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b13      	cmp	r3, #19
 8000746:	d9f1      	bls.n	800072c <main+0x31c>
 8000748:	e086      	b.n	8000858 <main+0x448>
			  }
			  else if(machine2==1)
 800074a:	4b31      	ldr	r3, [pc, #196]	; (8000810 <main+0x400>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d000      	beq.n	8000754 <main+0x344>
 8000752:	e081      	b.n	8000858 <main+0x448>
			  {
				 for(i=0;i<20;i++)   //remove '*'
 8000754:	4b30      	ldr	r3, [pc, #192]	; (8000818 <main+0x408>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	e00a      	b.n	8000772 <main+0x362>
				 {
					   if(config_arr2[i]=='*')
 800075c:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <main+0x408>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a32      	ldr	r2, [pc, #200]	; (800082c <main+0x41c>)
 8000762:	5cd3      	ldrb	r3, [r2, r3]
 8000764:	2b2a      	cmp	r3, #42	; 0x2a
 8000766:	d009      	beq.n	800077c <main+0x36c>
				 for(i=0;i<20;i++)   //remove '*'
 8000768:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <main+0x408>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <main+0x408>)
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <main+0x408>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b13      	cmp	r3, #19
 8000778:	d9f0      	bls.n	800075c <main+0x34c>
 800077a:	e000      	b.n	800077e <main+0x36e>
					   {
						  config_arr2[i]=='\0';
						  break;
 800077c:	46c0      	nop			; (mov r8, r8)
					   }
				 }
				 inputval2 = atoi(config_arr2);
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <main+0x41c>)
 8000780:	0018      	movs	r0, r3
 8000782:	f005 fd29 	bl	80061d8 <atoi>
 8000786:	0003      	movs	r3, r0
 8000788:	001a      	movs	r2, r3
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <main+0x420>)
 800078c:	601a      	str	r2, [r3, #0]
				 set_config=0;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <main+0x3f4>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
				 config_cnt2=0;
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <main+0x424>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
				 c_flag2=1;
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <main+0x428>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]

				 for(i=0;i<20;i++)
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <main+0x408>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	e053      	b.n	8000850 <main+0x440>
 80007a8:	50000c00 	.word	0x50000c00
 80007ac:	200000bc 	.word	0x200000bc
 80007b0:	20005598 	.word	0x20005598
 80007b4:	20000108 	.word	0x20000108
 80007b8:	08006cac 	.word	0x08006cac
 80007bc:	40021000 	.word	0x40021000
 80007c0:	50000800 	.word	0x50000800
 80007c4:	20005620 	.word	0x20005620
 80007c8:	20000001 	.word	0x20000001
 80007cc:	20005623 	.word	0x20005623
 80007d0:	20005624 	.word	0x20005624
 80007d4:	20005064 	.word	0x20005064
 80007d8:	200001d8 	.word	0x200001d8
 80007dc:	08006cbc 	.word	0x08006cbc
 80007e0:	2000505c 	.word	0x2000505c
 80007e4:	20005069 	.word	0x20005069
 80007e8:	20005584 	.word	0x20005584
 80007ec:	20005599 	.word	0x20005599
 80007f0:	20005454 	.word	0x20005454
 80007f4:	2000558c 	.word	0x2000558c
 80007f8:	20005608 	.word	0x20005608
 80007fc:	20005609 	.word	0x20005609
 8000800:	2000559b 	.word	0x2000559b
 8000804:	2000559a 	.word	0x2000559a
 8000808:	2000559c 	.word	0x2000559c
 800080c:	2000560a 	.word	0x2000560a
 8000810:	2000560b 	.word	0x2000560b
 8000814:	2000560c 	.word	0x2000560c
 8000818:	20005588 	.word	0x20005588
 800081c:	200054b8 	.word	0x200054b8
 8000820:	20005614 	.word	0x20005614
 8000824:	20005590 	.word	0x20005590
 8000828:	20005621 	.word	0x20005621
 800082c:	2000551c 	.word	0x2000551c
 8000830:	2000561c 	.word	0x2000561c
 8000834:	20005594 	.word	0x20005594
 8000838:	20005622 	.word	0x20005622
					config_arr2[i]=0;
 800083c:	4b40      	ldr	r3, [pc, #256]	; (8000940 <main+0x530>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a40      	ldr	r2, [pc, #256]	; (8000944 <main+0x534>)
 8000842:	2100      	movs	r1, #0
 8000844:	54d1      	strb	r1, [r2, r3]
				 for(i=0;i<20;i++)
 8000846:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <main+0x530>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	4b3c      	ldr	r3, [pc, #240]	; (8000940 <main+0x530>)
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <main+0x530>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b13      	cmp	r3, #19
 8000856:	d9f1      	bls.n	800083c <main+0x42c>
			  }
			  machine1=0;
 8000858:	4b3b      	ldr	r3, [pc, #236]	; (8000948 <main+0x538>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
			  machine2=0;
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <main+0x53c>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
		  }

		 //ei_printf("%s",starter1+48,starter2+48);
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000864:	493a      	ldr	r1, [pc, #232]	; (8000950 <main+0x540>)
 8000866:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <main+0x544>)
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f002 fe72 	bl	8003554 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000870:	4939      	ldr	r1, [pc, #228]	; (8000958 <main+0x548>)
 8000872:	4b38      	ldr	r3, [pc, #224]	; (8000954 <main+0x544>)
 8000874:	2200      	movs	r2, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f002 ff5a 	bl	8003730 <HAL_RTC_GetDate>


		  sprintf(date,"%02d%02d%02d ",sDate.Date,sDate.Month,sDate.Year);
 800087c:	4b36      	ldr	r3, [pc, #216]	; (8000958 <main+0x548>)
 800087e:	789b      	ldrb	r3, [r3, #2]
 8000880:	001a      	movs	r2, r3
 8000882:	4b35      	ldr	r3, [pc, #212]	; (8000958 <main+0x548>)
 8000884:	785b      	ldrb	r3, [r3, #1]
 8000886:	001c      	movs	r4, r3
 8000888:	4b33      	ldr	r3, [pc, #204]	; (8000958 <main+0x548>)
 800088a:	78db      	ldrb	r3, [r3, #3]
 800088c:	4933      	ldr	r1, [pc, #204]	; (800095c <main+0x54c>)
 800088e:	4834      	ldr	r0, [pc, #208]	; (8000960 <main+0x550>)
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	0023      	movs	r3, r4
 8000894:	f005 fcd8 	bl	8006248 <siprintf>
		  sprintf(time,"%02d%02d%02d ",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000898:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <main+0x540>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	001a      	movs	r2, r3
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <main+0x540>)
 80008a0:	785b      	ldrb	r3, [r3, #1]
 80008a2:	001c      	movs	r4, r3
 80008a4:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <main+0x540>)
 80008a6:	789b      	ldrb	r3, [r3, #2]
 80008a8:	492c      	ldr	r1, [pc, #176]	; (800095c <main+0x54c>)
 80008aa:	482e      	ldr	r0, [pc, #184]	; (8000964 <main+0x554>)
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	0023      	movs	r3, r4
 80008b0:	f005 fcca 	bl	8006248 <siprintf>
		  //
		  for(i=0;i<50;i++)
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <main+0x530>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	e009      	b.n	80008d0 <main+0x4c0>
			postdata[i]=0;
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <main+0x530>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a29      	ldr	r2, [pc, #164]	; (8000968 <main+0x558>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	54d1      	strb	r1, [r2, r3]
		  for(i=0;i<50;i++)
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <main+0x530>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <main+0x530>)
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <main+0x530>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b31      	cmp	r3, #49	; 0x31
 80008d6:	d9f1      	bls.n	80008bc <main+0x4ac>

		  create_datapocket(connection,firstdata,c_flag1,currentval1/2,c_flag2,currentval2/2);
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <main+0x55c>)
 80008da:	7818      	ldrb	r0, [r3, #0]
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <main+0x560>)
 80008de:	7819      	ldrb	r1, [r3, #0]
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <main+0x564>)
 80008e2:	781c      	ldrb	r4, [r3, #0]
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <main+0x568>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	085d      	lsrs	r5, r3, #1
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <main+0x56c>)
 80008ec:	781a      	ldrb	r2, [r3, #0]
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <main+0x570>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	085b      	lsrs	r3, r3, #1
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	9200      	str	r2, [sp, #0]
 80008f8:	002b      	movs	r3, r5
 80008fa:	0022      	movs	r2, r4
 80008fc:	f000 f8fc 	bl	8000af8 <create_datapocket>

		  if(connection==1)
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <main+0x55c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d117      	bne.n	8000938 <main+0x528>
		  {

		     if(firstdata==1)
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <main+0x560>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d103      	bne.n	8000918 <main+0x508>
		     {
		        HAL_Delay(5000);
 8000910:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <main+0x574>)
 8000912:	0018      	movs	r0, r3
 8000914:	f001 fb24 	bl	8001f60 <HAL_Delay>
		     }
		     if(postflag==1)
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <main+0x578>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d108      	bne.n	8000932 <main+0x522>
		     {
		        ei_printf("%s",postdata);
 8000920:	4a11      	ldr	r2, [pc, #68]	; (8000968 <main+0x558>)
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <main+0x57c>)
 8000924:	0011      	movs	r1, r2
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fe42 	bl	80015b0 <ei_printf>
		        postflag=0;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <main+0x578>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
		     }
		     //HAL_Delay(100);
		     firstdata=0;
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <main+0x560>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
		  }

		  sensordetected=0;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <main+0x580>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
	  if(backup_bit==1 && connection == 1)  // transmit backup data
 800093e:	e5f3      	b.n	8000528 <main+0x118>
 8000940:	20005588 	.word	0x20005588
 8000944:	2000551c 	.word	0x2000551c
 8000948:	2000560a 	.word	0x2000560a
 800094c:	2000560b 	.word	0x2000560b
 8000950:	200001c0 	.word	0x200001c0
 8000954:	20000090 	.word	0x20000090
 8000958:	200001d4 	.word	0x200001d4
 800095c:	08006cc0 	.word	0x08006cc0
 8000960:	200001b0 	.word	0x200001b0
 8000964:	200001a0 	.word	0x200001a0
 8000968:	200055a0 	.word	0x200055a0
 800096c:	20000001 	.word	0x20000001
 8000970:	20000000 	.word	0x20000000
 8000974:	20005621 	.word	0x20005621
 8000978:	20005610 	.word	0x20005610
 800097c:	20005622 	.word	0x20005622
 8000980:	20005618 	.word	0x20005618
 8000984:	00001388 	.word	0x00001388
 8000988:	2000562c 	.word	0x2000562c
 800098c:	08006cbc 	.word	0x08006cbc
 8000990:	20005608 	.word	0x20005608

08000994 <Read_Sensor>:
  }

}

void Read_Sensor(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	  if((HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7)==1))
 8000998:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <Read_Sensor+0x124>)
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	0018      	movs	r0, r3
 800099e:	f001 fe27 	bl	80025f0 <HAL_GPIO_ReadPin>
 80009a2:	0003      	movs	r3, r0
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d103      	bne.n	80009b0 <Read_Sensor+0x1c>
		  sensor1=0;
 80009a8:	4b44      	ldr	r3, [pc, #272]	; (8000abc <Read_Sensor+0x128>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e002      	b.n	80009b6 <Read_Sensor+0x22>
	  else
	  {
		  sensor1=1;
 80009b0:	4b42      	ldr	r3, [pc, #264]	; (8000abc <Read_Sensor+0x128>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]

	  }

	  if((HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)==1))
 80009b6:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <Read_Sensor+0x124>)
 80009b8:	2140      	movs	r1, #64	; 0x40
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 fe18 	bl	80025f0 <HAL_GPIO_ReadPin>
 80009c0:	0003      	movs	r3, r0
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d103      	bne.n	80009ce <Read_Sensor+0x3a>
		  sensor2=0;
 80009c6:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <Read_Sensor+0x12c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e002      	b.n	80009d4 <Read_Sensor+0x40>
	  else
	  {
		  sensor2=1;
 80009ce:	4b3c      	ldr	r3, [pc, #240]	; (8000ac0 <Read_Sensor+0x12c>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]

	  }

	  if(sensor1_backup!=sensor1 || sensor2_backup!=sensor2)
 80009d4:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <Read_Sensor+0x130>)
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	4b38      	ldr	r3, [pc, #224]	; (8000abc <Read_Sensor+0x128>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d105      	bne.n	80009ec <Read_Sensor+0x58>
 80009e0:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <Read_Sensor+0x134>)
 80009e2:	781a      	ldrb	r2, [r3, #0]
 80009e4:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <Read_Sensor+0x12c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d05a      	beq.n	8000aa2 <Read_Sensor+0x10e>
	  {
		  sensordetected=1;
 80009ec:	4b37      	ldr	r3, [pc, #220]	; (8000acc <Read_Sensor+0x138>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
		  if(sensor1_backup!=sensor1)
 80009f2:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <Read_Sensor+0x130>)
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	4b31      	ldr	r3, [pc, #196]	; (8000abc <Read_Sensor+0x128>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d025      	beq.n	8000a4a <Read_Sensor+0xb6>
		  {
			 if(c_flag1 == 1)
 80009fe:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <Read_Sensor+0x13c>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d104      	bne.n	8000a10 <Read_Sensor+0x7c>
			     currentval1++;
 8000a06:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <Read_Sensor+0x140>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <Read_Sensor+0x140>)
 8000a0e:	601a      	str	r2, [r3, #0]
		     if(c_flag1 == 1 && currentval1/2== inputval1)
 8000a10:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <Read_Sensor+0x13c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d118      	bne.n	8000a4a <Read_Sensor+0xb6>
 8000a18:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <Read_Sensor+0x140>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	085a      	lsrs	r2, r3, #1
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <Read_Sensor+0x144>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d111      	bne.n	8000a4a <Read_Sensor+0xb6>
		     {
				 c_flag1=0;
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <Read_Sensor+0x13c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
				 currentval1=0;
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <Read_Sensor+0x140>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
				 inputval1=0;
 8000a32:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <Read_Sensor+0x144>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
				 if(NO_OF_RELAYS == FOUR_RELAYS)
				 {

				    starter=2;
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <Read_Sensor+0x148>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	701a      	strb	r2, [r3, #0]
				    event=Ready_to_send;
 8000a3e:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <Read_Sensor+0x14c>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	701a      	strb	r2, [r3, #0]
				 }
				 else if(NO_OF_RELAYS == TWO_RELAYS)
				 {
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1); // OFF
				 }
				 starter1=0;  // turn off starter1 flag
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <Read_Sensor+0x150>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
		     }
		  }
		  if(sensor2_backup!=sensor2)
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <Read_Sensor+0x134>)
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <Read_Sensor+0x12c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d025      	beq.n	8000aa2 <Read_Sensor+0x10e>
		  {
			 if(c_flag2 == 1)
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <Read_Sensor+0x154>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d104      	bne.n	8000a68 <Read_Sensor+0xd4>
			      currentval2++;
 8000a5e:	4b23      	ldr	r3, [pc, #140]	; (8000aec <Read_Sensor+0x158>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <Read_Sensor+0x158>)
 8000a66:	601a      	str	r2, [r3, #0]
			 if(c_flag2 == 1 && currentval2/2== inputval2)
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <Read_Sensor+0x154>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d118      	bne.n	8000aa2 <Read_Sensor+0x10e>
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <Read_Sensor+0x158>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	085a      	lsrs	r2, r3, #1
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <Read_Sensor+0x15c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d111      	bne.n	8000aa2 <Read_Sensor+0x10e>
			 {

				 c_flag2=0;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <Read_Sensor+0x154>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
				 currentval2=0;
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <Read_Sensor+0x158>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
				 inputval2=0;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <Read_Sensor+0x15c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
				 if(NO_OF_RELAYS == FOUR_RELAYS)
				 {

				    starter=4;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <Read_Sensor+0x148>)
 8000a92:	2204      	movs	r2, #4
 8000a94:	701a      	strb	r2, [r3, #0]
				    event=Ready_to_send;
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <Read_Sensor+0x14c>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	701a      	strb	r2, [r3, #0]
				 }
				 else if(NO_OF_RELAYS == TWO_RELAYS)
				 {
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1); // OFF
				 }
				 starter2=0;   // turn off starter2 flag
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <Read_Sensor+0x160>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
			 }
		  }
		  //ei_printf("%d%d",sensor1+48,sensor2+48);
	  }
	  sensor1_backup = sensor1;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <Read_Sensor+0x128>)
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <Read_Sensor+0x130>)
 8000aa8:	701a      	strb	r2, [r3, #0]
	  sensor2_backup = sensor2;
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <Read_Sensor+0x12c>)
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <Read_Sensor+0x134>)
 8000ab0:	701a      	strb	r2, [r3, #0]
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	50000800 	.word	0x50000800
 8000abc:	20005604 	.word	0x20005604
 8000ac0:	20005605 	.word	0x20005605
 8000ac4:	20005606 	.word	0x20005606
 8000ac8:	20005607 	.word	0x20005607
 8000acc:	20005608 	.word	0x20005608
 8000ad0:	20005621 	.word	0x20005621
 8000ad4:	20005610 	.word	0x20005610
 8000ad8:	20005614 	.word	0x20005614
 8000adc:	2000559c 	.word	0x2000559c
 8000ae0:	2000559b 	.word	0x2000559b
 8000ae4:	2000559d 	.word	0x2000559d
 8000ae8:	20005622 	.word	0x20005622
 8000aec:	20005618 	.word	0x20005618
 8000af0:	2000561c 	.word	0x2000561c
 8000af4:	2000559e 	.word	0x2000559e

08000af8 <create_datapocket>:
void create_datapocket(char conn,char data, char configflag1,unsigned int configcnt1,char configflag2,unsigned int configcnt2)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b091      	sub	sp, #68	; 0x44
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	0004      	movs	r4, r0
 8000b00:	0008      	movs	r0, r1
 8000b02:	0011      	movs	r1, r2
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	1c22      	adds	r2, r4, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	1dbb      	adds	r3, r7, #6
 8000b0e:	1c02      	adds	r2, r0, #0
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	1d7b      	adds	r3, r7, #5
 8000b14:	1c0a      	adds	r2, r1, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	  int i=0,j=0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63bb      	str	r3, [r7, #56]	; 0x38
	  int postdata_cnt=0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
	  char countdata1[20]={0};
 8000b24:	2320      	movs	r3, #32
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	2210      	movs	r2, #16
 8000b30:	2100      	movs	r1, #0
 8000b32:	0018      	movs	r0, r3
 8000b34:	f005 fb80 	bl	8006238 <memset>
	  char countdata2[20]={0};
 8000b38:	230c      	movs	r3, #12
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	3304      	adds	r3, #4
 8000b42:	2210      	movs	r2, #16
 8000b44:	2100      	movs	r1, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f005 fb76 	bl	8006238 <memset>


	  for(i=0;uniqueid[i]!='\0';i++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b50:	e00b      	b.n	8000b6a <create_datapocket+0x72>
	  {
		  postdata[postdata_cnt++]=uniqueid[i];
 8000b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b54:	1c5a      	adds	r2, r3, #1
 8000b56:	637a      	str	r2, [r7, #52]	; 0x34
 8000b58:	4996      	ldr	r1, [pc, #600]	; (8000db4 <create_datapocket+0x2bc>)
 8000b5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b5c:	188a      	adds	r2, r1, r2
 8000b5e:	7811      	ldrb	r1, [r2, #0]
 8000b60:	4a95      	ldr	r2, [pc, #596]	; (8000db8 <create_datapocket+0x2c0>)
 8000b62:	54d1      	strb	r1, [r2, r3]
	  for(i=0;uniqueid[i]!='\0';i++)
 8000b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b66:	3301      	adds	r3, #1
 8000b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b6a:	4a92      	ldr	r2, [pc, #584]	; (8000db4 <create_datapocket+0x2bc>)
 8000b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b6e:	18d3      	adds	r3, r2, r3
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1ed      	bne.n	8000b52 <create_datapocket+0x5a>
	  }
	  postdata[postdata_cnt++] = ',';
 8000b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	637a      	str	r2, [r7, #52]	; 0x34
 8000b7c:	4a8e      	ldr	r2, [pc, #568]	; (8000db8 <create_datapocket+0x2c0>)
 8000b7e:	212c      	movs	r1, #44	; 0x2c
 8000b80:	54d1      	strb	r1, [r2, r3]

	  if(conn==1)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d106      	bne.n	8000b98 <create_datapocket+0xa0>
	     postdata[postdata_cnt++] = 'L';
 8000b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	637a      	str	r2, [r7, #52]	; 0x34
 8000b90:	4a89      	ldr	r2, [pc, #548]	; (8000db8 <create_datapocket+0x2c0>)
 8000b92:	214c      	movs	r1, #76	; 0x4c
 8000b94:	54d1      	strb	r1, [r2, r3]
 8000b96:	e009      	b.n	8000bac <create_datapocket+0xb4>
	  else if(conn==0)
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d105      	bne.n	8000bac <create_datapocket+0xb4>
		 postdata[postdata_cnt++] = 'B';
 8000ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	637a      	str	r2, [r7, #52]	; 0x34
 8000ba6:	4a84      	ldr	r2, [pc, #528]	; (8000db8 <create_datapocket+0x2c0>)
 8000ba8:	2142      	movs	r1, #66	; 0x42
 8000baa:	54d1      	strb	r1, [r2, r3]

	  postdata[postdata_cnt++] = ',';
 8000bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	637a      	str	r2, [r7, #52]	; 0x34
 8000bb2:	4a81      	ldr	r2, [pc, #516]	; (8000db8 <create_datapocket+0x2c0>)
 8000bb4:	212c      	movs	r1, #44	; 0x2c
 8000bb6:	54d1      	strb	r1, [r2, r3]
	  postdata[postdata_cnt++] = (data)+48;
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	637a      	str	r2, [r7, #52]	; 0x34
 8000bbe:	1dba      	adds	r2, r7, #6
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	3230      	adds	r2, #48	; 0x30
 8000bc4:	b2d1      	uxtb	r1, r2
 8000bc6:	4a7c      	ldr	r2, [pc, #496]	; (8000db8 <create_datapocket+0x2c0>)
 8000bc8:	54d1      	strb	r1, [r2, r3]
	  postdata[postdata_cnt++] = ',';
 8000bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bcc:	1c5a      	adds	r2, r3, #1
 8000bce:	637a      	str	r2, [r7, #52]	; 0x34
 8000bd0:	4a79      	ldr	r2, [pc, #484]	; (8000db8 <create_datapocket+0x2c0>)
 8000bd2:	212c      	movs	r1, #44	; 0x2c
 8000bd4:	54d1      	strb	r1, [r2, r3]
	  postdata[postdata_cnt++] = (sensor1)+48;
 8000bd6:	4b79      	ldr	r3, [pc, #484]	; (8000dbc <create_datapocket+0x2c4>)
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bdc:	1c59      	adds	r1, r3, #1
 8000bde:	6379      	str	r1, [r7, #52]	; 0x34
 8000be0:	3230      	adds	r2, #48	; 0x30
 8000be2:	b2d1      	uxtb	r1, r2
 8000be4:	4a74      	ldr	r2, [pc, #464]	; (8000db8 <create_datapocket+0x2c0>)
 8000be6:	54d1      	strb	r1, [r2, r3]
	  postdata[postdata_cnt++] = (sensor2)+48;
 8000be8:	4b75      	ldr	r3, [pc, #468]	; (8000dc0 <create_datapocket+0x2c8>)
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bee:	1c59      	adds	r1, r3, #1
 8000bf0:	6379      	str	r1, [r7, #52]	; 0x34
 8000bf2:	3230      	adds	r2, #48	; 0x30
 8000bf4:	b2d1      	uxtb	r1, r2
 8000bf6:	4a70      	ldr	r2, [pc, #448]	; (8000db8 <create_datapocket+0x2c0>)
 8000bf8:	54d1      	strb	r1, [r2, r3]
	  postdata[postdata_cnt++] =  starter1+48;
 8000bfa:	4b72      	ldr	r3, [pc, #456]	; (8000dc4 <create_datapocket+0x2cc>)
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c00:	1c59      	adds	r1, r3, #1
 8000c02:	6379      	str	r1, [r7, #52]	; 0x34
 8000c04:	3230      	adds	r2, #48	; 0x30
 8000c06:	b2d1      	uxtb	r1, r2
 8000c08:	4a6b      	ldr	r2, [pc, #428]	; (8000db8 <create_datapocket+0x2c0>)
 8000c0a:	54d1      	strb	r1, [r2, r3]
	  postdata[postdata_cnt++] =  starter2+48;
 8000c0c:	4b6e      	ldr	r3, [pc, #440]	; (8000dc8 <create_datapocket+0x2d0>)
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c12:	1c59      	adds	r1, r3, #1
 8000c14:	6379      	str	r1, [r7, #52]	; 0x34
 8000c16:	3230      	adds	r2, #48	; 0x30
 8000c18:	b2d1      	uxtb	r1, r2
 8000c1a:	4a67      	ldr	r2, [pc, #412]	; (8000db8 <create_datapocket+0x2c0>)
 8000c1c:	54d1      	strb	r1, [r2, r3]
	  postdata[postdata_cnt++] =  ',';
 8000c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	637a      	str	r2, [r7, #52]	; 0x34
 8000c24:	4a64      	ldr	r2, [pc, #400]	; (8000db8 <create_datapocket+0x2c0>)
 8000c26:	212c      	movs	r1, #44	; 0x2c
 8000c28:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<6;i++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c2e:	e00b      	b.n	8000c48 <create_datapocket+0x150>
	  {
		  postdata[postdata_cnt++]=date[i];
 8000c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	637a      	str	r2, [r7, #52]	; 0x34
 8000c36:	4965      	ldr	r1, [pc, #404]	; (8000dcc <create_datapocket+0x2d4>)
 8000c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c3a:	188a      	adds	r2, r1, r2
 8000c3c:	7811      	ldrb	r1, [r2, #0]
 8000c3e:	4a5e      	ldr	r2, [pc, #376]	; (8000db8 <create_datapocket+0x2c0>)
 8000c40:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<6;i++)
 8000c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c44:	3301      	adds	r3, #1
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c4a:	2b05      	cmp	r3, #5
 8000c4c:	ddf0      	ble.n	8000c30 <create_datapocket+0x138>
	  }
	  for(i=0;i<6;i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c52:	e00b      	b.n	8000c6c <create_datapocket+0x174>
	  {
		  postdata[postdata_cnt++]=time[i];
 8000c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	637a      	str	r2, [r7, #52]	; 0x34
 8000c5a:	495d      	ldr	r1, [pc, #372]	; (8000dd0 <create_datapocket+0x2d8>)
 8000c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c5e:	188a      	adds	r2, r1, r2
 8000c60:	7811      	ldrb	r1, [r2, #0]
 8000c62:	4a55      	ldr	r2, [pc, #340]	; (8000db8 <create_datapocket+0x2c0>)
 8000c64:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<6;i++)
 8000c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c68:	3301      	adds	r3, #1
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c6e:	2b05      	cmp	r3, #5
 8000c70:	ddf0      	ble.n	8000c54 <create_datapocket+0x15c>
	  }
	  postdata[postdata_cnt++] =  ',';
 8000c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	637a      	str	r2, [r7, #52]	; 0x34
 8000c78:	4a4f      	ldr	r2, [pc, #316]	; (8000db8 <create_datapocket+0x2c0>)
 8000c7a:	212c      	movs	r1, #44	; 0x2c
 8000c7c:	54d1      	strb	r1, [r2, r3]
	  postdata[postdata_cnt++] =  configflag1+48;
 8000c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	637a      	str	r2, [r7, #52]	; 0x34
 8000c84:	1d7a      	adds	r2, r7, #5
 8000c86:	7812      	ldrb	r2, [r2, #0]
 8000c88:	3230      	adds	r2, #48	; 0x30
 8000c8a:	b2d1      	uxtb	r1, r2
 8000c8c:	4a4a      	ldr	r2, [pc, #296]	; (8000db8 <create_datapocket+0x2c0>)
 8000c8e:	54d1      	strb	r1, [r2, r3]
	  postdata[postdata_cnt++] =  ',';
 8000c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	637a      	str	r2, [r7, #52]	; 0x34
 8000c96:	4a48      	ldr	r2, [pc, #288]	; (8000db8 <create_datapocket+0x2c0>)
 8000c98:	212c      	movs	r1, #44	; 0x2c
 8000c9a:	54d1      	strb	r1, [r2, r3]
	  sprintf(countdata1,"%d",(configcnt1));
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	494d      	ldr	r1, [pc, #308]	; (8000dd4 <create_datapocket+0x2dc>)
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f005 facf 	bl	8006248 <siprintf>
	  for(i=0;countdata1[i]!='\0';i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cae:	e00c      	b.n	8000cca <create_datapocket+0x1d2>
		  postdata[postdata_cnt++] = countdata1[i];
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	637a      	str	r2, [r7, #52]	; 0x34
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	18b9      	adds	r1, r7, r2
 8000cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cbc:	188a      	adds	r2, r1, r2
 8000cbe:	7811      	ldrb	r1, [r2, #0]
 8000cc0:	4a3d      	ldr	r2, [pc, #244]	; (8000db8 <create_datapocket+0x2c0>)
 8000cc2:	54d1      	strb	r1, [r2, r3]
	  for(i=0;countdata1[i]!='\0';i++)
 8000cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cca:	2320      	movs	r3, #32
 8000ccc:	18fa      	adds	r2, r7, r3
 8000cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1eb      	bne.n	8000cb0 <create_datapocket+0x1b8>

	  postdata[postdata_cnt++] =  ',';
 8000cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	637a      	str	r2, [r7, #52]	; 0x34
 8000cde:	4a36      	ldr	r2, [pc, #216]	; (8000db8 <create_datapocket+0x2c0>)
 8000ce0:	212c      	movs	r1, #44	; 0x2c
 8000ce2:	54d1      	strb	r1, [r2, r3]
	  postdata[postdata_cnt++] =  configflag2+48;
 8000ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	637a      	str	r2, [r7, #52]	; 0x34
 8000cea:	2250      	movs	r2, #80	; 0x50
 8000cec:	18ba      	adds	r2, r7, r2
 8000cee:	7812      	ldrb	r2, [r2, #0]
 8000cf0:	3230      	adds	r2, #48	; 0x30
 8000cf2:	b2d1      	uxtb	r1, r2
 8000cf4:	4a30      	ldr	r2, [pc, #192]	; (8000db8 <create_datapocket+0x2c0>)
 8000cf6:	54d1      	strb	r1, [r2, r3]
	  postdata[postdata_cnt++] =  ',';
 8000cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8000cfe:	4a2e      	ldr	r2, [pc, #184]	; (8000db8 <create_datapocket+0x2c0>)
 8000d00:	212c      	movs	r1, #44	; 0x2c
 8000d02:	54d1      	strb	r1, [r2, r3]
	  sprintf(countdata2,"%d",(configcnt2));
 8000d04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d06:	4933      	ldr	r1, [pc, #204]	; (8000dd4 <create_datapocket+0x2dc>)
 8000d08:	230c      	movs	r3, #12
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f005 fa9b 	bl	8006248 <siprintf>
	  for(i=0;countdata2[i]!='\0';i++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d16:	e00c      	b.n	8000d32 <create_datapocket+0x23a>
		  postdata[postdata_cnt++] = countdata2[i];
 8000d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	637a      	str	r2, [r7, #52]	; 0x34
 8000d1e:	220c      	movs	r2, #12
 8000d20:	18b9      	adds	r1, r7, r2
 8000d22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d24:	188a      	adds	r2, r1, r2
 8000d26:	7811      	ldrb	r1, [r2, #0]
 8000d28:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <create_datapocket+0x2c0>)
 8000d2a:	54d1      	strb	r1, [r2, r3]
	  for(i=0;countdata2[i]!='\0';i++)
 8000d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d2e:	3301      	adds	r3, #1
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d32:	230c      	movs	r3, #12
 8000d34:	18fa      	adds	r2, r7, r3
 8000d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1eb      	bne.n	8000d18 <create_datapocket+0x220>
	  //postdata[postdata_cnt++] =  ',';
	  postdata[postdata_cnt++]=0x0A;
 8000d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	637a      	str	r2, [r7, #52]	; 0x34
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <create_datapocket+0x2c0>)
 8000d48:	210a      	movs	r1, #10
 8000d4a:	54d1      	strb	r1, [r2, r3]

	  if(conn==0 && B_row!=200)
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d12b      	bne.n	8000dac <create_datapocket+0x2b4>
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <create_datapocket+0x2e0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2bc8      	cmp	r3, #200	; 0xc8
 8000d5a:	d027      	beq.n	8000dac <create_datapocket+0x2b4>
	  {
		  backup_bit=1;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <create_datapocket+0x2e4>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
		  B_col=0;
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <create_datapocket+0x2e8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
		  for(j=0;j<postdata_cnt;j++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d6c:	e015      	b.n	8000d9a <create_datapocket+0x2a2>
		  {
			  B_data[B_row][B_col] = postdata[j];
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <create_datapocket+0x2e0>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <create_datapocket+0x2e8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4810      	ldr	r0, [pc, #64]	; (8000db8 <create_datapocket+0x2c0>)
 8000d78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000d7a:	1841      	adds	r1, r0, r1
 8000d7c:	780c      	ldrb	r4, [r1, #0]
 8000d7e:	4919      	ldr	r1, [pc, #100]	; (8000de4 <create_datapocket+0x2ec>)
 8000d80:	2064      	movs	r0, #100	; 0x64
 8000d82:	4342      	muls	r2, r0
 8000d84:	188a      	adds	r2, r1, r2
 8000d86:	1c21      	adds	r1, r4, #0
 8000d88:	54d1      	strb	r1, [r2, r3]
			  B_col++;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <create_datapocket+0x2e8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <create_datapocket+0x2e8>)
 8000d92:	601a      	str	r2, [r3, #0]
		  for(j=0;j<postdata_cnt;j++)
 8000d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d96:	3301      	adds	r3, #1
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	dbe5      	blt.n	8000d6e <create_datapocket+0x276>
		  }
		  B_row++;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <create_datapocket+0x2e0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <create_datapocket+0x2e0>)
 8000daa:	601a      	str	r2, [r3, #0]

	  }

}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b011      	add	sp, #68	; 0x44
 8000db2:	bd90      	pop	{r4, r7, pc}
 8000db4:	08006cd4 	.word	0x08006cd4
 8000db8:	200055a0 	.word	0x200055a0
 8000dbc:	20005604 	.word	0x20005604
 8000dc0:	20005605 	.word	0x20005605
 8000dc4:	2000559d 	.word	0x2000559d
 8000dc8:	2000559e 	.word	0x2000559e
 8000dcc:	200001b0 	.word	0x200001b0
 8000dd0:	200001a0 	.word	0x200001a0
 8000dd4:	08006cd0 	.word	0x08006cd0
 8000dd8:	2000505c 	.word	0x2000505c
 8000ddc:	20005620 	.word	0x20005620
 8000de0:	20005060 	.word	0x20005060
 8000de4:	200001d8 	.word	0x200001d8

08000de8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

    HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000df0:	499a      	ldr	r1, [pc, #616]	; (800105c <HAL_UART_RxCpltCallback+0x274>)
 8000df2:	4b9b      	ldr	r3, [pc, #620]	; (8001060 <HAL_UART_RxCpltCallback+0x278>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	0018      	movs	r0, r3
 8000df8:	f003 fb93 	bl	8004522 <HAL_UART_Receive_IT>
    rx_arr[rx_cnt]=rx_data[0];
 8000dfc:	4b99      	ldr	r3, [pc, #612]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a96      	ldr	r2, [pc, #600]	; (800105c <HAL_UART_RxCpltCallback+0x274>)
 8000e02:	7811      	ldrb	r1, [r2, #0]
 8000e04:	4a98      	ldr	r2, [pc, #608]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000e06:	54d1      	strb	r1, [r2, r3]
    if(set_time==1 && rx_arr[rx_cnt]!='*')
 8000e08:	4b98      	ldr	r3, [pc, #608]	; (800106c <HAL_UART_RxCpltCallback+0x284>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d110      	bne.n	8000e32 <HAL_UART_RxCpltCallback+0x4a>
 8000e10:	4b94      	ldr	r3, [pc, #592]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a94      	ldr	r2, [pc, #592]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000e16:	5cd3      	ldrb	r3, [r2, r3]
 8000e18:	2b2a      	cmp	r3, #42	; 0x2a
 8000e1a:	d00a      	beq.n	8000e32 <HAL_UART_RxCpltCallback+0x4a>
        time_arr[time_cnt++]=rx_arr[rx_cnt];
 8000e1c:	4b91      	ldr	r3, [pc, #580]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000e1e:	6819      	ldr	r1, [r3, #0]
 8000e20:	4b93      	ldr	r3, [pc, #588]	; (8001070 <HAL_UART_RxCpltCallback+0x288>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	1c58      	adds	r0, r3, #1
 8000e26:	4a92      	ldr	r2, [pc, #584]	; (8001070 <HAL_UART_RxCpltCallback+0x288>)
 8000e28:	6010      	str	r0, [r2, #0]
 8000e2a:	4a8f      	ldr	r2, [pc, #572]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000e2c:	5c51      	ldrb	r1, [r2, r1]
 8000e2e:	4a91      	ldr	r2, [pc, #580]	; (8001074 <HAL_UART_RxCpltCallback+0x28c>)
 8000e30:	54d1      	strb	r1, [r2, r3]


    if(set_config==1 && rx_arr[1]== '1' && rx_arr[rx_cnt]!=','  )
 8000e32:	4b91      	ldr	r3, [pc, #580]	; (8001078 <HAL_UART_RxCpltCallback+0x290>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d11e      	bne.n	8000e78 <HAL_UART_RxCpltCallback+0x90>
 8000e3a:	4b8b      	ldr	r3, [pc, #556]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000e3c:	785b      	ldrb	r3, [r3, #1]
 8000e3e:	2b31      	cmp	r3, #49	; 0x31
 8000e40:	d11a      	bne.n	8000e78 <HAL_UART_RxCpltCallback+0x90>
 8000e42:	4b88      	ldr	r3, [pc, #544]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a88      	ldr	r2, [pc, #544]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000e48:	5cd3      	ldrb	r3, [r2, r3]
 8000e4a:	2b2c      	cmp	r3, #44	; 0x2c
 8000e4c:	d014      	beq.n	8000e78 <HAL_UART_RxCpltCallback+0x90>
    {
    	if(rx_cnt!=1)
 8000e4e:	4b85      	ldr	r3, [pc, #532]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d00a      	beq.n	8000e6c <HAL_UART_RxCpltCallback+0x84>
    	   config_arr1[config_cnt1++] = rx_arr[rx_cnt];
 8000e56:	4b83      	ldr	r3, [pc, #524]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000e58:	6819      	ldr	r1, [r3, #0]
 8000e5a:	4b88      	ldr	r3, [pc, #544]	; (800107c <HAL_UART_RxCpltCallback+0x294>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1c58      	adds	r0, r3, #1
 8000e60:	4a86      	ldr	r2, [pc, #536]	; (800107c <HAL_UART_RxCpltCallback+0x294>)
 8000e62:	6010      	str	r0, [r2, #0]
 8000e64:	4a80      	ldr	r2, [pc, #512]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000e66:	5c51      	ldrb	r1, [r2, r1]
 8000e68:	4a85      	ldr	r2, [pc, #532]	; (8001080 <HAL_UART_RxCpltCallback+0x298>)
 8000e6a:	54d1      	strb	r1, [r2, r3]
    	machine1=1;
 8000e6c:	4b85      	ldr	r3, [pc, #532]	; (8001084 <HAL_UART_RxCpltCallback+0x29c>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
    	starter1=1;
 8000e72:	4b85      	ldr	r3, [pc, #532]	; (8001088 <HAL_UART_RxCpltCallback+0x2a0>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]

    }
    if(set_config==1 && rx_arr[1]== '2' && rx_arr[rx_cnt]!=','  )
 8000e78:	4b7f      	ldr	r3, [pc, #508]	; (8001078 <HAL_UART_RxCpltCallback+0x290>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d11e      	bne.n	8000ebe <HAL_UART_RxCpltCallback+0xd6>
 8000e80:	4b79      	ldr	r3, [pc, #484]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000e82:	785b      	ldrb	r3, [r3, #1]
 8000e84:	2b32      	cmp	r3, #50	; 0x32
 8000e86:	d11a      	bne.n	8000ebe <HAL_UART_RxCpltCallback+0xd6>
 8000e88:	4b76      	ldr	r3, [pc, #472]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a76      	ldr	r2, [pc, #472]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	2b2c      	cmp	r3, #44	; 0x2c
 8000e92:	d014      	beq.n	8000ebe <HAL_UART_RxCpltCallback+0xd6>
    {
    	if(rx_cnt!=1)
 8000e94:	4b73      	ldr	r3, [pc, #460]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d00a      	beq.n	8000eb2 <HAL_UART_RxCpltCallback+0xca>
    	   config_arr2[config_cnt2++] = rx_arr[rx_cnt];
 8000e9c:	4b71      	ldr	r3, [pc, #452]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000e9e:	6819      	ldr	r1, [r3, #0]
 8000ea0:	4b7a      	ldr	r3, [pc, #488]	; (800108c <HAL_UART_RxCpltCallback+0x2a4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	1c58      	adds	r0, r3, #1
 8000ea6:	4a79      	ldr	r2, [pc, #484]	; (800108c <HAL_UART_RxCpltCallback+0x2a4>)
 8000ea8:	6010      	str	r0, [r2, #0]
 8000eaa:	4a6f      	ldr	r2, [pc, #444]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000eac:	5c51      	ldrb	r1, [r2, r1]
 8000eae:	4a78      	ldr	r2, [pc, #480]	; (8001090 <HAL_UART_RxCpltCallback+0x2a8>)
 8000eb0:	54d1      	strb	r1, [r2, r3]
    	machine2=1;
 8000eb2:	4b78      	ldr	r3, [pc, #480]	; (8001094 <HAL_UART_RxCpltCallback+0x2ac>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
    	starter2=1;
 8000eb8:	4b77      	ldr	r3, [pc, #476]	; (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
    }
    if(set_time==0 && rx_arr[rx_cnt]=='*'&& rx_arr[rx_cnt-1]=='*')
 8000ebe:	4b6b      	ldr	r3, [pc, #428]	; (800106c <HAL_UART_RxCpltCallback+0x284>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10f      	bne.n	8000ee6 <HAL_UART_RxCpltCallback+0xfe>
 8000ec6:	4b67      	ldr	r3, [pc, #412]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a67      	ldr	r2, [pc, #412]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	2b2a      	cmp	r3, #42	; 0x2a
 8000ed0:	d109      	bne.n	8000ee6 <HAL_UART_RxCpltCallback+0xfe>
 8000ed2:	4b64      	ldr	r3, [pc, #400]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	4a63      	ldr	r2, [pc, #396]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	2b2a      	cmp	r3, #42	; 0x2a
 8000ede:	d102      	bne.n	8000ee6 <HAL_UART_RxCpltCallback+0xfe>
    {
    	set_time=1;
 8000ee0:	4b62      	ldr	r3, [pc, #392]	; (800106c <HAL_UART_RxCpltCallback+0x284>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
    }
    if(set_config==0 && rx_arr[rx_cnt]==')'&& rx_arr[rx_cnt-1]==')')
 8000ee6:	4b64      	ldr	r3, [pc, #400]	; (8001078 <HAL_UART_RxCpltCallback+0x290>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d115      	bne.n	8000f1a <HAL_UART_RxCpltCallback+0x132>
 8000eee:	4b5d      	ldr	r3, [pc, #372]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a5d      	ldr	r2, [pc, #372]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	2b29      	cmp	r3, #41	; 0x29
 8000ef8:	d10f      	bne.n	8000f1a <HAL_UART_RxCpltCallback+0x132>
 8000efa:	4b5a      	ldr	r3, [pc, #360]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	4a59      	ldr	r2, [pc, #356]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
 8000f04:	2b29      	cmp	r3, #41	; 0x29
 8000f06:	d108      	bne.n	8000f1a <HAL_UART_RxCpltCallback+0x132>
    {
    	set_config=1;
 8000f08:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <HAL_UART_RxCpltCallback+0x290>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
    	event=1;
 8000f0e:	4b63      	ldr	r3, [pc, #396]	; (800109c <HAL_UART_RxCpltCallback+0x2b4>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
    	rx_cnt=0;
 8000f14:	4b53      	ldr	r3, [pc, #332]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
    }
    if(event==0 && rx_arr[rx_cnt]=='+'&& rx_arr[rx_cnt-1]=='+')
 8000f1a:	4b60      	ldr	r3, [pc, #384]	; (800109c <HAL_UART_RxCpltCallback+0x2b4>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d115      	bne.n	8000f4e <HAL_UART_RxCpltCallback+0x166>
 8000f22:	4b50      	ldr	r3, [pc, #320]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a50      	ldr	r2, [pc, #320]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000f28:	5cd3      	ldrb	r3, [r2, r3]
 8000f2a:	2b2b      	cmp	r3, #43	; 0x2b
 8000f2c:	d10f      	bne.n	8000f4e <HAL_UART_RxCpltCallback+0x166>
 8000f2e:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000f36:	5cd3      	ldrb	r3, [r2, r3]
 8000f38:	2b2b      	cmp	r3, #43	; 0x2b
 8000f3a:	d108      	bne.n	8000f4e <HAL_UART_RxCpltCallback+0x166>
    {
    	event = 1,starter=1;
 8000f3c:	4b57      	ldr	r3, [pc, #348]	; (800109c <HAL_UART_RxCpltCallback+0x2b4>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <HAL_UART_RxCpltCallback+0x2b8>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
    	starter1=1;
 8000f48:	4b4f      	ldr	r3, [pc, #316]	; (8001088 <HAL_UART_RxCpltCallback+0x2a0>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
    }
    if(event==0 && rx_arr[rx_cnt]=='-'&& rx_arr[rx_cnt-1]=='-')
 8000f4e:	4b53      	ldr	r3, [pc, #332]	; (800109c <HAL_UART_RxCpltCallback+0x2b4>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d115      	bne.n	8000f82 <HAL_UART_RxCpltCallback+0x19a>
 8000f56:	4b43      	ldr	r3, [pc, #268]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a43      	ldr	r2, [pc, #268]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	2b2d      	cmp	r3, #45	; 0x2d
 8000f60:	d10f      	bne.n	8000f82 <HAL_UART_RxCpltCallback+0x19a>
 8000f62:	4b40      	ldr	r3, [pc, #256]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	4a3f      	ldr	r2, [pc, #252]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	2b2d      	cmp	r3, #45	; 0x2d
 8000f6e:	d108      	bne.n	8000f82 <HAL_UART_RxCpltCallback+0x19a>
    {
    	event = 1,starter=2;
 8000f70:	4b4a      	ldr	r3, [pc, #296]	; (800109c <HAL_UART_RxCpltCallback+0x2b4>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	4b4a      	ldr	r3, [pc, #296]	; (80010a0 <HAL_UART_RxCpltCallback+0x2b8>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	701a      	strb	r2, [r3, #0]
    	starter1=0;
 8000f7c:	4b42      	ldr	r3, [pc, #264]	; (8001088 <HAL_UART_RxCpltCallback+0x2a0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
    }
    if(event==0 && rx_arr[rx_cnt]=='('&& rx_arr[rx_cnt-1]=='(')
 8000f82:	4b46      	ldr	r3, [pc, #280]	; (800109c <HAL_UART_RxCpltCallback+0x2b4>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d115      	bne.n	8000fb6 <HAL_UART_RxCpltCallback+0x1ce>
 8000f8a:	4b36      	ldr	r3, [pc, #216]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a36      	ldr	r2, [pc, #216]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000f90:	5cd3      	ldrb	r3, [r2, r3]
 8000f92:	2b28      	cmp	r3, #40	; 0x28
 8000f94:	d10f      	bne.n	8000fb6 <HAL_UART_RxCpltCallback+0x1ce>
 8000f96:	4b33      	ldr	r3, [pc, #204]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	4a32      	ldr	r2, [pc, #200]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000f9e:	5cd3      	ldrb	r3, [r2, r3]
 8000fa0:	2b28      	cmp	r3, #40	; 0x28
 8000fa2:	d108      	bne.n	8000fb6 <HAL_UART_RxCpltCallback+0x1ce>
    {
    	event = 1,starter=3;
 8000fa4:	4b3d      	ldr	r3, [pc, #244]	; (800109c <HAL_UART_RxCpltCallback+0x2b4>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
 8000faa:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <HAL_UART_RxCpltCallback+0x2b8>)
 8000fac:	2203      	movs	r2, #3
 8000fae:	701a      	strb	r2, [r3, #0]
    	starter2=1;
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
    }
    if(event==0 && rx_arr[rx_cnt]=='#'&& rx_arr[rx_cnt-1]=='#')
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <HAL_UART_RxCpltCallback+0x2b4>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d115      	bne.n	8000fea <HAL_UART_RxCpltCallback+0x202>
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a29      	ldr	r2, [pc, #164]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	2b23      	cmp	r3, #35	; 0x23
 8000fc8:	d10f      	bne.n	8000fea <HAL_UART_RxCpltCallback+0x202>
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	4a25      	ldr	r2, [pc, #148]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000fd2:	5cd3      	ldrb	r3, [r2, r3]
 8000fd4:	2b23      	cmp	r3, #35	; 0x23
 8000fd6:	d108      	bne.n	8000fea <HAL_UART_RxCpltCallback+0x202>
    {
    	event = 1,starter=4;
 8000fd8:	4b30      	ldr	r3, [pc, #192]	; (800109c <HAL_UART_RxCpltCallback+0x2b4>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <HAL_UART_RxCpltCallback+0x2b8>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	701a      	strb	r2, [r3, #0]
    	starter2=0;
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
    }
    if(rx_arr[rx_cnt]=='&'&& rx_arr[rx_cnt-1]=='&')
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	2b26      	cmp	r3, #38	; 0x26
 8000ff4:	d109      	bne.n	800100a <HAL_UART_RxCpltCallback+0x222>
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8000ffe:	5cd3      	ldrb	r3, [r2, r3]
 8001000:	2b26      	cmp	r3, #38	; 0x26
 8001002:	d102      	bne.n	800100a <HAL_UART_RxCpltCallback+0x222>
    {
         connection=0;
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_UART_RxCpltCallback+0x2bc>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
    }
    if(rx_arr[rx_cnt]=='@'&& rx_arr[rx_cnt-1]=='@')
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	2b40      	cmp	r3, #64	; 0x40
 8001014:	d109      	bne.n	800102a <HAL_UART_RxCpltCallback+0x242>
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3b01      	subs	r3, #1
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 800101e:	5cd3      	ldrb	r3, [r2, r3]
 8001020:	2b40      	cmp	r3, #64	; 0x40
 8001022:	d102      	bne.n	800102a <HAL_UART_RxCpltCallback+0x242>
    {
         connection=1;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <HAL_UART_RxCpltCallback+0x2bc>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
    }
    if(set_config==1 && rx_arr[rx_cnt]=='*')
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_UART_RxCpltCallback+0x290>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d108      	bne.n	8001044 <HAL_UART_RxCpltCallback+0x25c>
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <HAL_UART_RxCpltCallback+0x280>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	2b2a      	cmp	r3, #42	; 0x2a
 800103c:	d102      	bne.n	8001044 <HAL_UART_RxCpltCallback+0x25c>
        rx_cnt =0;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
    rx_cnt++;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_UART_RxCpltCallback+0x27c>)
 800104c:	601a      	str	r2, [r3, #0]
    timer_flag=1;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_UART_RxCpltCallback+0x2c0>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]

}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b002      	add	sp, #8
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20005598 	.word	0x20005598
 8001060:	20000108 	.word	0x20000108
 8001064:	20005584 	.word	0x20005584
 8001068:	2000506c 	.word	0x2000506c
 800106c:	20005599 	.word	0x20005599
 8001070:	2000558c 	.word	0x2000558c
 8001074:	20005454 	.word	0x20005454
 8001078:	2000559a 	.word	0x2000559a
 800107c:	20005590 	.word	0x20005590
 8001080:	200054b8 	.word	0x200054b8
 8001084:	2000560a 	.word	0x2000560a
 8001088:	2000559d 	.word	0x2000559d
 800108c:	20005594 	.word	0x20005594
 8001090:	2000551c 	.word	0x2000551c
 8001094:	2000560b 	.word	0x2000560b
 8001098:	2000559e 	.word	0x2000559e
 800109c:	2000559b 	.word	0x2000559b
 80010a0:	2000559c 	.word	0x2000559c
 80010a4:	20000001 	.word	0x20000001
 80010a8:	20005068 	.word	0x20005068

080010ac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	  //ei_printf("T1");

	  if(starterflag==1 && NO_OF_RELAYS == FOUR_RELAYS)
 80010b4:	4b36      	ldr	r3, [pc, #216]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d10e      	bne.n	80010da <HAL_TIM_PeriodElapsedCallback+0x2e>
	  {
		 startertimercnt++;
 80010bc:	4b35      	ldr	r3, [pc, #212]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010c4:	601a      	str	r2, [r3, #0]
		 if(startertimercnt == 5)
 80010c6:	4b33      	ldr	r3, [pc, #204]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d105      	bne.n	80010da <HAL_TIM_PeriodElapsedCallback+0x2e>
		 {
			 starterflag = Ready_to_send;
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010d0:	2202      	movs	r2, #2
 80010d2:	701a      	strb	r2, [r3, #0]
			 startertimercnt=0;
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
		 }
	  }
	  //=========================
	  if(postflag==0)
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x3c>
	     postcnt=1;
 80010e2:	4b2e      	ldr	r3, [pc, #184]	; (800119c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
	  if(postcnt==1)
 80010e8:	4b2c      	ldr	r3, [pc, #176]	; (800119c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d105      	bne.n	80010fc <HAL_TIM_PeriodElapsedCallback+0x50>
		  postcnt=0,postflag=1;
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
	  //========================
      if(B_timer_flag)
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <HAL_TIM_PeriodElapsedCallback+0x62>
    	  B_timer_cnt++;
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800110c:	601a      	str	r2, [r3, #0]
      if(B_timer_cnt==2)
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d108      	bne.n	8001128 <HAL_TIM_PeriodElapsedCallback+0x7c>
    	  B_timer_send=1,B_timer_cnt=0,B_timer_flag=0;
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
	  if(timer_flag)
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x100>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <HAL_TIM_PeriodElapsedCallback+0x8e>
		  timer_cnt++;
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001138:	601a      	str	r2, [r3, #0]
	  if(timer_cnt==3)
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d121      	bne.n	8001186 <HAL_TIM_PeriodElapsedCallback+0xda>
	  {
		  data_flag=1,timer_flag=0,timer_cnt=0;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x100>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
		  if(set_time==1)
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d102      	bne.n	8001162 <HAL_TIM_PeriodElapsedCallback+0xb6>
			 set_time=2,rx_arr[rx_cnt]!='\0';
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800115e:	2202      	movs	r2, #2
 8001160:	701a      	strb	r2, [r3, #0]
		  if(set_config==1)
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d102      	bne.n	8001170 <HAL_TIM_PeriodElapsedCallback+0xc4>
			  sensordetected=1,rx_arr[rx_cnt]!='\0'; // dont go inside starter on/off,so sen_detected=1
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
		  if(event==1 && set_config!=1)              // dont go inside starter on/off,so sen_detected=1
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d106      	bne.n	8001186 <HAL_TIM_PeriodElapsedCallback+0xda>
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d002      	beq.n	8001186 <HAL_TIM_PeriodElapsedCallback+0xda>
			  event=Ready_to_send;
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001182:	2202      	movs	r2, #2
 8001184:	701a      	strb	r2, [r3, #0]
	  }
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	20005609 	.word	0x20005609
 8001194:	2000560c 	.word	0x2000560c
 8001198:	2000562c 	.word	0x2000562c
 800119c:	20005630 	.word	0x20005630
 80011a0:	20005623 	.word	0x20005623
 80011a4:	20005628 	.word	0x20005628
 80011a8:	20005624 	.word	0x20005624
 80011ac:	20005068 	.word	0x20005068
 80011b0:	20005580 	.word	0x20005580
 80011b4:	20005069 	.word	0x20005069
 80011b8:	20005599 	.word	0x20005599
 80011bc:	2000559a 	.word	0x2000559a
 80011c0:	20005608 	.word	0x20005608
 80011c4:	2000559b 	.word	0x2000559b

080011c8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b093      	sub	sp, #76	; 0x4c
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	2414      	movs	r4, #20
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	0018      	movs	r0, r3
 80011d4:	2334      	movs	r3, #52	; 0x34
 80011d6:	001a      	movs	r2, r3
 80011d8:	2100      	movs	r1, #0
 80011da:	f005 f82d 	bl	8006238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	0018      	movs	r0, r3
 80011e2:	2310      	movs	r3, #16
 80011e4:	001a      	movs	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	f005 f826 	bl	8006238 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	0018      	movs	r0, r3
 80011f2:	f001 fa37 	bl	8002664 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80011f6:	193b      	adds	r3, r7, r4
 80011f8:	220a      	movs	r2, #10
 80011fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fc:	193b      	adds	r3, r7, r4
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	0052      	lsls	r2, r2, #1
 8001202:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001204:	0021      	movs	r1, r4
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2240      	movs	r2, #64	; 0x40
 8001210:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2201      	movs	r2, #1
 8001216:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	187b      	adds	r3, r7, r1
 8001220:	0018      	movs	r0, r3
 8001222:	f001 fa6b 	bl	80026fc <HAL_RCC_OscConfig>
 8001226:	1e03      	subs	r3, r0, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800122a:	f000 f9d5 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2100      	movs	r1, #0
 800124a:	0018      	movs	r0, r3
 800124c:	f001 fd66 	bl	8002d1c <HAL_RCC_ClockConfig>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001254:	f000 f9c0 	bl	80015d8 <Error_Handler>
  }
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b013      	add	sp, #76	; 0x4c
 800125e:	bd90      	pop	{r4, r7, pc}

08001260 <Settime_RTC>:
  /* USER CODE END RTC_Init 2 */

}

void Settime_RTC()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	0018      	movs	r0, r3
 800126a:	2314      	movs	r3, #20
 800126c:	001a      	movs	r2, r3
 800126e:	2100      	movs	r1, #0
 8001270:	f004 ffe2 	bl	8006238 <memset>
	  RTC_DateTypeDef sDate = {0};
 8001274:	003b      	movs	r3, r7
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

	  /* USER CODE END RTC_Init 1 */

	  /** Initialize RTC Only
	  */
	  hrtc.Instance = RTC;
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <Settime_RTC+0xe0>)
 800127c:	4a31      	ldr	r2, [pc, #196]	; (8001344 <Settime_RTC+0xe4>)
 800127e:	601a      	str	r2, [r3, #0]
	  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <Settime_RTC+0xe0>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
	  hrtc.Init.AsynchPrediv = 127;
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <Settime_RTC+0xe0>)
 8001288:	227f      	movs	r2, #127	; 0x7f
 800128a:	60da      	str	r2, [r3, #12]
	  hrtc.Init.SynchPrediv = 255;
 800128c:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <Settime_RTC+0xe0>)
 800128e:	22ff      	movs	r2, #255	; 0xff
 8001290:	611a      	str	r2, [r3, #16]
	  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <Settime_RTC+0xe0>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
	  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <Settime_RTC+0xe0>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
	  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <Settime_RTC+0xe0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
	  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <Settime_RTC+0xe0>)
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	05d2      	lsls	r2, r2, #23
 80012aa:	621a      	str	r2, [r3, #32]
	  //hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
	  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <Settime_RTC+0xe0>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f002 f812 	bl	80032d8 <HAL_RTC_Init>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <Settime_RTC+0x5c>
	  {
	    Error_Handler();
 80012b8:	f000 f98e 	bl	80015d8 <Error_Handler>
	  }
	  sTime.Hours = Hour;
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <Settime_RTC+0xe8>)
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = Min;
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <Settime_RTC+0xec>)
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = Sec;
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <Settime_RTC+0xf0>)
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	709a      	strb	r2, [r3, #2]
	  //sTime.SubSeconds = 0x0;
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012e0:	1d39      	adds	r1, r7, #4
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <Settime_RTC+0xe0>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	0018      	movs	r0, r3
 80012e8:	f002 f88c 	bl	8003404 <HAL_RTC_SetTime>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <Settime_RTC+0x94>
	  {
	    Error_Handler();
 80012f0:	f000 f972 	bl	80015d8 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012f4:	003b      	movs	r3, r7
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
	  sDate.Month = Month;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <Settime_RTC+0xf4>)
 80012fc:	781a      	ldrb	r2, [r3, #0]
 80012fe:	003b      	movs	r3, r7
 8001300:	705a      	strb	r2, [r3, #1]
	  sDate.Date = Date;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <Settime_RTC+0xf8>)
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	003b      	movs	r3, r7
 8001308:	709a      	strb	r2, [r3, #2]
	  sDate.Year = Year;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <Settime_RTC+0xfc>)
 800130c:	781a      	ldrb	r2, [r3, #0]
 800130e:	003b      	movs	r3, r7
 8001310:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001312:	0039      	movs	r1, r7
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <Settime_RTC+0xe0>)
 8001316:	2201      	movs	r2, #1
 8001318:	0018      	movs	r0, r3
 800131a:	f002 f977 	bl	800360c <HAL_RTC_SetDate>
 800131e:	1e03      	subs	r3, r0, #0
 8001320:	d001      	beq.n	8001326 <Settime_RTC+0xc6>
	  {
	    Error_Handler();
 8001322:	f000 f959 	bl	80015d8 <Error_Handler>
	  }

	  /** Enable the reference Clock input
	  */
	  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <Settime_RTC+0xe0>)
 8001328:	0018      	movs	r0, r3
 800132a:	f002 fb42 	bl	80039b2 <HAL_RTCEx_SetRefClock>
 800132e:	1e03      	subs	r3, r0, #0
 8001330:	d001      	beq.n	8001336 <Settime_RTC+0xd6>
	  {
	    Error_Handler();
 8001332:	f000 f951 	bl	80015d8 <Error_Handler>
	  }
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b006      	add	sp, #24
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	20000090 	.word	0x20000090
 8001344:	40002800 	.word	0x40002800
 8001348:	20000198 	.word	0x20000198
 800134c:	20000199 	.word	0x20000199
 8001350:	2000019a 	.word	0x2000019a
 8001354:	2000019c 	.word	0x2000019c
 8001358:	2000019b 	.word	0x2000019b
 800135c:	2000019d 	.word	0x2000019d

08001360 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	2310      	movs	r3, #16
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	0018      	movs	r0, r3
 800136c:	2310      	movs	r3, #16
 800136e:	001a      	movs	r2, r3
 8001370:	2100      	movs	r1, #0
 8001372:	f004 ff61 	bl	8006238 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	0018      	movs	r0, r3
 800137a:	230c      	movs	r3, #12
 800137c:	001a      	movs	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	f004 ff5a 	bl	8006238 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <MX_TIM1_Init+0xb0>)
 8001386:	4a23      	ldr	r2, [pc, #140]	; (8001414 <MX_TIM1_Init+0xb4>)
 8001388:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <MX_TIM1_Init+0xb0>)
 800138c:	22fa      	movs	r2, #250	; 0xfa
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_TIM1_Init+0xb0>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7200;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <MX_TIM1_Init+0xb0>)
 800139a:	22e1      	movs	r2, #225	; 0xe1
 800139c:	0152      	lsls	r2, r2, #5
 800139e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <MX_TIM1_Init+0xb0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_TIM1_Init+0xb0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_TIM1_Init+0xb0>)
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_TIM1_Init+0xb0>)
 80013b4:	0018      	movs	r0, r3
 80013b6:	f002 fb4b 	bl	8003a50 <HAL_TIM_Base_Init>
 80013ba:	1e03      	subs	r3, r0, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x62>
  {
    Error_Handler();
 80013be:	f000 f90b 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c2:	2110      	movs	r1, #16
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	0152      	lsls	r2, r2, #5
 80013ca:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013cc:	187a      	adds	r2, r7, r1
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_TIM1_Init+0xb0>)
 80013d0:	0011      	movs	r1, r2
 80013d2:	0018      	movs	r0, r3
 80013d4:	f002 fd1c 	bl	8003e10 <HAL_TIM_ConfigClockSource>
 80013d8:	1e03      	subs	r3, r0, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80013dc:	f000 f8fc 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013f2:	1d3a      	adds	r2, r7, #4
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_TIM1_Init+0xb0>)
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f002 ff11 	bl	8004220 <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	1e03      	subs	r3, r0, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001402:	f000 f8e9 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b008      	add	sp, #32
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	200000bc 	.word	0x200000bc
 8001414:	40012c00 	.word	0x40012c00

08001418 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <MX_USART2_UART_Init+0x94>)
 800141e:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <MX_USART2_UART_Init+0x98>)
 8001420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_USART2_UART_Init+0x94>)
 8001424:	2296      	movs	r2, #150	; 0x96
 8001426:	0192      	lsls	r2, r2, #6
 8001428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <MX_USART2_UART_Init+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <MX_USART2_UART_Init+0x94>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_USART2_UART_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_USART2_UART_Init+0x94>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_USART2_UART_Init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_USART2_UART_Init+0x94>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_USART2_UART_Init+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_USART2_UART_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_USART2_UART_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_USART2_UART_Init+0x94>)
 8001462:	0018      	movs	r0, r3
 8001464:	f002 ff5c 	bl	8004320 <HAL_UART_Init>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d001      	beq.n	8001470 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800146c:	f000 f8b4 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USART2_UART_Init+0x94>)
 8001472:	2100      	movs	r1, #0
 8001474:	0018      	movs	r0, r3
 8001476:	f004 fdcf 	bl	8006018 <HAL_UARTEx_SetTxFifoThreshold>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800147e:	f000 f8ab 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_USART2_UART_Init+0x94>)
 8001484:	2100      	movs	r1, #0
 8001486:	0018      	movs	r0, r3
 8001488:	f004 fe06 	bl	8006098 <HAL_UARTEx_SetRxFifoThreshold>
 800148c:	1e03      	subs	r3, r0, #0
 800148e:	d001      	beq.n	8001494 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001490:	f000 f8a2 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <MX_USART2_UART_Init+0x94>)
 8001496:	0018      	movs	r0, r3
 8001498:	f004 fd84 	bl	8005fa4 <HAL_UARTEx_DisableFifoMode>
 800149c:	1e03      	subs	r3, r0, #0
 800149e:	d001      	beq.n	80014a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014a0:	f000 f89a 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	20000108 	.word	0x20000108
 80014b0:	40004400 	.word	0x40004400

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b08b      	sub	sp, #44	; 0x2c
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	2414      	movs	r4, #20
 80014bc:	193b      	adds	r3, r7, r4
 80014be:	0018      	movs	r0, r3
 80014c0:	2314      	movs	r3, #20
 80014c2:	001a      	movs	r2, r3
 80014c4:	2100      	movs	r1, #0
 80014c6:	f004 feb7 	bl	8006238 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <MX_GPIO_Init+0xb4>)
 80014cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <MX_GPIO_Init+0xb4>)
 80014d0:	2104      	movs	r1, #4
 80014d2:	430a      	orrs	r2, r1
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <MX_GPIO_Init+0xb4>)
 80014d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014da:	2204      	movs	r2, #4
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MX_GPIO_Init+0xb4>)
 80014e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <MX_GPIO_Init+0xb4>)
 80014e8:	2120      	movs	r1, #32
 80014ea:	430a      	orrs	r2, r1
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <MX_GPIO_Init+0xb4>)
 80014f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f2:	2220      	movs	r2, #32
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_GPIO_Init+0xb4>)
 80014fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_GPIO_Init+0xb4>)
 8001500:	2101      	movs	r1, #1
 8001502:	430a      	orrs	r2, r1
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_GPIO_Init+0xb4>)
 8001508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150a:	2201      	movs	r2, #1
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_GPIO_Init+0xb4>)
 8001514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_GPIO_Init+0xb4>)
 8001518:	2102      	movs	r1, #2
 800151a:	430a      	orrs	r2, r1
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_GPIO_Init+0xb4>)
 8001520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800152a:	23a0      	movs	r3, #160	; 0xa0
 800152c:	05db      	lsls	r3, r3, #23
 800152e:	2200      	movs	r2, #0
 8001530:	2120      	movs	r1, #32
 8001532:	0018      	movs	r0, r3
 8001534:	f001 f879 	bl	800262a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001538:	0021      	movs	r1, r4
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2220      	movs	r2, #32
 800153e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2201      	movs	r2, #1
 8001544:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2202      	movs	r2, #2
 8001550:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001552:	187a      	adds	r2, r7, r1
 8001554:	23a0      	movs	r3, #160	; 0xa0
 8001556:	05db      	lsls	r3, r3, #23
 8001558:	0011      	movs	r1, r2
 800155a:	0018      	movs	r0, r3
 800155c:	f000 fee4 	bl	8002328 <HAL_GPIO_Init>

}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b00b      	add	sp, #44	; 0x2c
 8001566:	bd90      	pop	{r4, r7, pc}
 8001568:	40021000 	.word	0x40021000

0800156c <vprint>:
void vprint(const char *fmt, va_list argp)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b0b5      	sub	sp, #212	; 0xd4
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	2408      	movs	r4, #8
 800157c:	193b      	adds	r3, r7, r4
 800157e:	0018      	movs	r0, r3
 8001580:	f004 ff32 	bl	80063e8 <vsiprintf>
 8001584:	1e03      	subs	r3, r0, #0
 8001586:	dd0a      	ble.n	800159e <vprint+0x32>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 8001588:	193b      	adds	r3, r7, r4
 800158a:	0018      	movs	r0, r3
 800158c:	f7fe fdb8 	bl	8000100 <strlen>
 8001590:	0003      	movs	r3, r0
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <vprint+0x3c>)
 8001596:	1939      	adds	r1, r7, r4
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <vprint+0x40>)
 800159a:	f002 ff17 	bl	80043cc <HAL_UART_Transmit>
    }
}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b035      	add	sp, #212	; 0xd4
 80015a4:	bd90      	pop	{r4, r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	00ffffff 	.word	0x00ffffff
 80015ac:	20000108 	.word	0x20000108

080015b0 <ei_printf>:

void ei_printf(const char *format, ...) {
 80015b0:	b40f      	push	{r0, r1, r2, r3}
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 80015b8:	2314      	movs	r3, #20
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	0011      	movs	r1, r2
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff ffd1 	bl	800156c <vprint>
    va_end(myargs);
}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b002      	add	sp, #8
 80015d0:	bc80      	pop	{r7}
 80015d2:	bc08      	pop	{r3}
 80015d4:	b004      	add	sp, #16
 80015d6:	4718      	bx	r3

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <Error_Handler+0x8>
	...

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_MspInit+0x4c>)
 80015ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_MspInit+0x4c>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_MspInit+0x4c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2201      	movs	r2, #1
 80015fc:	4013      	ands	r3, r2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_MspInit+0x4c>)
 8001604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_MspInit+0x4c>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0549      	lsls	r1, r1, #21
 800160c:	430a      	orrs	r2, r1
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <HAL_MspInit+0x4c>)
 8001612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	055b      	lsls	r3, r3, #21
 8001618:	4013      	ands	r3, r2
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800161e:	23c0      	movs	r3, #192	; 0xc0
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	0018      	movs	r0, r3
 8001624:	f000 fcc0 	bl	8001fa8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000

08001634 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b08b      	sub	sp, #44	; 0x2c
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800163c:	240c      	movs	r4, #12
 800163e:	193b      	adds	r3, r7, r4
 8001640:	0018      	movs	r0, r3
 8001642:	231c      	movs	r3, #28
 8001644:	001a      	movs	r2, r3
 8001646:	2100      	movs	r1, #0
 8001648:	f004 fdf6 	bl	8006238 <memset>
  if(hrtc->Instance==RTC)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_RTC_MspInit+0x74>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d124      	bne.n	80016a0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001656:	193b      	adds	r3, r7, r4
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	0292      	lsls	r2, r2, #10
 800165c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800165e:	193b      	adds	r3, r7, r4
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	619a      	str	r2, [r3, #24]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001666:	193b      	adds	r3, r7, r4
 8001668:	0018      	movs	r0, r3
 800166a:	f001 fd01 	bl	8003070 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001672:	f7ff ffb1 	bl	80015d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_RTC_MspInit+0x78>)
 8001678:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_RTC_MspInit+0x78>)
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	0209      	lsls	r1, r1, #8
 8001680:	430a      	orrs	r2, r1
 8001682:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_RTC_MspInit+0x78>)
 8001686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_RTC_MspInit+0x78>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	00c9      	lsls	r1, r1, #3
 800168e:	430a      	orrs	r2, r1
 8001690:	63da      	str	r2, [r3, #60]	; 0x3c
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_RTC_MspInit+0x78>)
 8001694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4013      	ands	r3, r2
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b00b      	add	sp, #44	; 0x2c
 80016a6:	bd90      	pop	{r4, r7, pc}
 80016a8:	40002800 	.word	0x40002800
 80016ac:	40021000 	.word	0x40021000

080016b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <HAL_TIM_Base_MspInit+0x58>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d11d      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_TIM_Base_MspInit+0x5c>)
 80016c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_TIM_Base_MspInit+0x5c>)
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	0109      	lsls	r1, r1, #4
 80016cc:	430a      	orrs	r2, r1
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_TIM_Base_MspInit+0x5c>)
 80016d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200d      	movs	r0, #13
 80016e4:	f000 fd22 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80016e8:	200d      	movs	r0, #13
 80016ea:	f000 fd34 	bl	8002156 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	200e      	movs	r0, #14
 80016f4:	f000 fd1a 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016f8:	200e      	movs	r0, #14
 80016fa:	f000 fd2c 	bl	8002156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	40012c00 	.word	0x40012c00
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b091      	sub	sp, #68	; 0x44
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	232c      	movs	r3, #44	; 0x2c
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	0018      	movs	r0, r3
 800171e:	2314      	movs	r3, #20
 8001720:	001a      	movs	r2, r3
 8001722:	2100      	movs	r1, #0
 8001724:	f004 fd88 	bl	8006238 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001728:	2410      	movs	r4, #16
 800172a:	193b      	adds	r3, r7, r4
 800172c:	0018      	movs	r0, r3
 800172e:	231c      	movs	r3, #28
 8001730:	001a      	movs	r2, r3
 8001732:	2100      	movs	r1, #0
 8001734:	f004 fd80 	bl	8006238 <memset>
  if(huart->Instance==USART2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <HAL_UART_MspInit+0xc8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d146      	bne.n	80017d0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001742:	193b      	adds	r3, r7, r4
 8001744:	2202      	movs	r2, #2
 8001746:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001748:	193b      	adds	r3, r7, r4
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174e:	193b      	adds	r3, r7, r4
 8001750:	0018      	movs	r0, r3
 8001752:	f001 fc8d 	bl	8003070 <HAL_RCCEx_PeriphCLKConfig>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d001      	beq.n	800175e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800175a:	f7ff ff3d 	bl	80015d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <HAL_UART_MspInit+0xcc>)
 8001760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_UART_MspInit+0xcc>)
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	0289      	lsls	r1, r1, #10
 8001768:	430a      	orrs	r2, r1
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_UART_MspInit+0xcc>)
 800176e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	029b      	lsls	r3, r3, #10
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_UART_MspInit+0xcc>)
 800177c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_UART_MspInit+0xcc>)
 8001780:	2101      	movs	r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_UART_MspInit+0xcc>)
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	2201      	movs	r2, #1
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001792:	212c      	movs	r1, #44	; 0x2c
 8001794:	187b      	adds	r3, r7, r1
 8001796:	220c      	movs	r2, #12
 8001798:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	187b      	adds	r3, r7, r1
 800179c:	2202      	movs	r2, #2
 800179e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	2201      	movs	r2, #1
 80017a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2201      	movs	r2, #1
 80017b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	187a      	adds	r2, r7, r1
 80017b4:	23a0      	movs	r3, #160	; 0xa0
 80017b6:	05db      	lsls	r3, r3, #23
 80017b8:	0011      	movs	r1, r2
 80017ba:	0018      	movs	r0, r3
 80017bc:	f000 fdb4 	bl	8002328 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	201c      	movs	r0, #28
 80017c6:	f000 fcb1 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017ca:	201c      	movs	r0, #28
 80017cc:	f000 fcc3 	bl	8002156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b011      	add	sp, #68	; 0x44
 80017d6:	bd90      	pop	{r4, r7, pc}
 80017d8:	40004400 	.word	0x40004400
 80017dc:	40021000 	.word	0x40021000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f000 fb90 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001816:	0018      	movs	r0, r3
 8001818:	f002 f9c8 	bl	8003bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	200000bc 	.word	0x200000bc

08001828 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <TIM1_CC_IRQHandler+0x14>)
 800182e:	0018      	movs	r0, r3
 8001830:	f002 f9bc 	bl	8003bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	200000bc 	.word	0x200000bc

08001840 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <USART2_IRQHandler+0x14>)
 8001846:	0018      	movs	r0, r3
 8001848:	f002 fece 	bl	80045e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	20000108 	.word	0x20000108

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	18d3      	adds	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f004 fcac 	bl	80061e4 <__errno>
 800188c:	0003      	movs	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	2301      	movs	r3, #1
 8001894:	425b      	negs	r3, r3
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	18d2      	adds	r2, r2, r3
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b006      	add	sp, #24
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20009000 	.word	0x20009000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20005634 	.word	0x20005634
 80018c0:	20005650 	.word	0x20005650

080018c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <decimalcopyhex>:
//unsigned char RTC_bit=0;////
unsigned char rx_time[50];
char change_bit=0;

void decimalcopyhex(char *msg)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    unsigned char  temp,i=0,cnt=0;
 80018d8:	210f      	movs	r1, #15
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	230e      	movs	r3, #14
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]


        Hour  = ((msg[11]-48)*10)+(msg[12]-48);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	330b      	adds	r3, #11
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	3b30      	subs	r3, #48	; 0x30
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	1c1a      	adds	r2, r3, #0
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	18d3      	adds	r3, r2, r3
 80018f8:	18db      	adds	r3, r3, r3
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	330c      	adds	r3, #12
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	18d3      	adds	r3, r2, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	3b30      	subs	r3, #48	; 0x30
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b88      	ldr	r3, [pc, #544]	; (8001b2c <decimalcopyhex+0x25c>)
 800190c:	701a      	strb	r2, [r3, #0]
        Min   = ((msg[14]-48)*10)+(msg[15]-48);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	330e      	adds	r3, #14
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	3b30      	subs	r3, #48	; 0x30
 8001916:	b2db      	uxtb	r3, r3
 8001918:	1c1a      	adds	r2, r3, #0
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	18d3      	adds	r3, r2, r3
 800191e:	18db      	adds	r3, r3, r3
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	330f      	adds	r3, #15
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	18d3      	adds	r3, r2, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	3b30      	subs	r3, #48	; 0x30
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b7f      	ldr	r3, [pc, #508]	; (8001b30 <decimalcopyhex+0x260>)
 8001932:	701a      	strb	r2, [r3, #0]
        Sec   = ((msg[17]-48)*10)+(msg[18]-48);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3311      	adds	r3, #17
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3b30      	subs	r3, #48	; 0x30
 800193c:	b2db      	uxtb	r3, r3
 800193e:	1c1a      	adds	r2, r3, #0
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	18d3      	adds	r3, r2, r3
 8001944:	18db      	adds	r3, r3, r3
 8001946:	b2da      	uxtb	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3312      	adds	r3, #18
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	18d3      	adds	r3, r2, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	3b30      	subs	r3, #48	; 0x30
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b77      	ldr	r3, [pc, #476]	; (8001b34 <decimalcopyhex+0x264>)
 8001958:	701a      	strb	r2, [r3, #0]

        for(i=0;i<3;i++)
 800195a:	187b      	adds	r3, r7, r1
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	e0d9      	b.n	8001b16 <decimalcopyhex+0x246>
        {
                if(i==0)
 8001962:	230f      	movs	r3, #15
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d103      	bne.n	8001974 <decimalcopyhex+0xa4>
                {
                    Check  = Hour;
 800196c:	4b6f      	ldr	r3, [pc, #444]	; (8001b2c <decimalcopyhex+0x25c>)
 800196e:	781a      	ldrb	r2, [r3, #0]
 8001970:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <decimalcopyhex+0x268>)
 8001972:	701a      	strb	r2, [r3, #0]

                }
                if(i==1)
 8001974:	230f      	movs	r3, #15
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d107      	bne.n	800198e <decimalcopyhex+0xbe>
                {
                    Min = Min;
 800197e:	4b6c      	ldr	r3, [pc, #432]	; (8001b30 <decimalcopyhex+0x260>)
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	4b6b      	ldr	r3, [pc, #428]	; (8001b30 <decimalcopyhex+0x260>)
 8001984:	701a      	strb	r2, [r3, #0]
                    Check  = Min;
 8001986:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <decimalcopyhex+0x260>)
 8001988:	781a      	ldrb	r2, [r3, #0]
 800198a:	4b6b      	ldr	r3, [pc, #428]	; (8001b38 <decimalcopyhex+0x268>)
 800198c:	701a      	strb	r2, [r3, #0]
                }
                if(i==2)
 800198e:	230f      	movs	r3, #15
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d103      	bne.n	80019a0 <decimalcopyhex+0xd0>
                    Check  = Sec;
 8001998:	4b66      	ldr	r3, [pc, #408]	; (8001b34 <decimalcopyhex+0x264>)
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	4b66      	ldr	r3, [pc, #408]	; (8001b38 <decimalcopyhex+0x268>)
 800199e:	701a      	strb	r2, [r3, #0]

                if(Check<10)
 80019a0:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <decimalcopyhex+0x268>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b09      	cmp	r3, #9
 80019a6:	d804      	bhi.n	80019b2 <decimalcopyhex+0xe2>
                {
                    Check =  Check;
 80019a8:	4b63      	ldr	r3, [pc, #396]	; (8001b38 <decimalcopyhex+0x268>)
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <decimalcopyhex+0x268>)
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	e090      	b.n	8001ad4 <decimalcopyhex+0x204>
                }
                else if((Check>=10)&&(Check<20))
 80019b2:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <decimalcopyhex+0x268>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b09      	cmp	r3, #9
 80019b8:	d914      	bls.n	80019e4 <decimalcopyhex+0x114>
 80019ba:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <decimalcopyhex+0x268>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b13      	cmp	r3, #19
 80019c0:	d810      	bhi.n	80019e4 <decimalcopyhex+0x114>
                {
                    temp =   Check%10;
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <decimalcopyhex+0x268>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	220d      	movs	r2, #13
 80019c8:	18bc      	adds	r4, r7, r2
 80019ca:	210a      	movs	r1, #10
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7fe fc2f 	bl	8000230 <__aeabi_uidivmod>
 80019d2:	000b      	movs	r3, r1
 80019d4:	7023      	strb	r3, [r4, #0]
                    Check =  Check+6;
 80019d6:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <decimalcopyhex+0x268>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	3306      	adds	r3, #6
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b56      	ldr	r3, [pc, #344]	; (8001b38 <decimalcopyhex+0x268>)
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e077      	b.n	8001ad4 <decimalcopyhex+0x204>
                }
                else if((Check>=20)&&(Check<30))
 80019e4:	4b54      	ldr	r3, [pc, #336]	; (8001b38 <decimalcopyhex+0x268>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b13      	cmp	r3, #19
 80019ea:	d914      	bls.n	8001a16 <decimalcopyhex+0x146>
 80019ec:	4b52      	ldr	r3, [pc, #328]	; (8001b38 <decimalcopyhex+0x268>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b1d      	cmp	r3, #29
 80019f2:	d810      	bhi.n	8001a16 <decimalcopyhex+0x146>
                {
                    temp =   Check%10;
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <decimalcopyhex+0x268>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	220d      	movs	r2, #13
 80019fa:	18bc      	adds	r4, r7, r2
 80019fc:	210a      	movs	r1, #10
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7fe fc16 	bl	8000230 <__aeabi_uidivmod>
 8001a04:	000b      	movs	r3, r1
 8001a06:	7023      	strb	r3, [r4, #0]
                    Check =  Check+12;
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <decimalcopyhex+0x268>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	330c      	adds	r3, #12
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <decimalcopyhex+0x268>)
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e05e      	b.n	8001ad4 <decimalcopyhex+0x204>
                }
                else if((Check>=30)&&(Check<40))
 8001a16:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <decimalcopyhex+0x268>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b1d      	cmp	r3, #29
 8001a1c:	d914      	bls.n	8001a48 <decimalcopyhex+0x178>
 8001a1e:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <decimalcopyhex+0x268>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b27      	cmp	r3, #39	; 0x27
 8001a24:	d810      	bhi.n	8001a48 <decimalcopyhex+0x178>
                {
                    temp =   Check%10;
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <decimalcopyhex+0x268>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	220d      	movs	r2, #13
 8001a2c:	18bc      	adds	r4, r7, r2
 8001a2e:	210a      	movs	r1, #10
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7fe fbfd 	bl	8000230 <__aeabi_uidivmod>
 8001a36:	000b      	movs	r3, r1
 8001a38:	7023      	strb	r3, [r4, #0]
                    Check =  Check+18;
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <decimalcopyhex+0x268>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	3312      	adds	r3, #18
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <decimalcopyhex+0x268>)
 8001a44:	701a      	strb	r2, [r3, #0]
 8001a46:	e045      	b.n	8001ad4 <decimalcopyhex+0x204>
                }
                else if((Check>=40)&&(Check<50))
 8001a48:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <decimalcopyhex+0x268>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b27      	cmp	r3, #39	; 0x27
 8001a4e:	d914      	bls.n	8001a7a <decimalcopyhex+0x1aa>
 8001a50:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <decimalcopyhex+0x268>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b31      	cmp	r3, #49	; 0x31
 8001a56:	d810      	bhi.n	8001a7a <decimalcopyhex+0x1aa>
                {
                    temp =   Check%10;
 8001a58:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <decimalcopyhex+0x268>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	220d      	movs	r2, #13
 8001a5e:	18bc      	adds	r4, r7, r2
 8001a60:	210a      	movs	r1, #10
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7fe fbe4 	bl	8000230 <__aeabi_uidivmod>
 8001a68:	000b      	movs	r3, r1
 8001a6a:	7023      	strb	r3, [r4, #0]
                    Check =  Check+24;
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <decimalcopyhex+0x268>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	3318      	adds	r3, #24
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <decimalcopyhex+0x268>)
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	e02c      	b.n	8001ad4 <decimalcopyhex+0x204>
                }
                else if((Check>=50)&&(Check<60))
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <decimalcopyhex+0x268>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b31      	cmp	r3, #49	; 0x31
 8001a80:	d914      	bls.n	8001aac <decimalcopyhex+0x1dc>
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <decimalcopyhex+0x268>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b3b      	cmp	r3, #59	; 0x3b
 8001a88:	d810      	bhi.n	8001aac <decimalcopyhex+0x1dc>
                {
                    temp =   Check%10;
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <decimalcopyhex+0x268>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	220d      	movs	r2, #13
 8001a90:	18bc      	adds	r4, r7, r2
 8001a92:	210a      	movs	r1, #10
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7fe fbcb 	bl	8000230 <__aeabi_uidivmod>
 8001a9a:	000b      	movs	r3, r1
 8001a9c:	7023      	strb	r3, [r4, #0]
                    Check =  Check+30;
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <decimalcopyhex+0x268>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	331e      	adds	r3, #30
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <decimalcopyhex+0x268>)
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e013      	b.n	8001ad4 <decimalcopyhex+0x204>
                }
                else if(Check>=60)
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <decimalcopyhex+0x268>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b3b      	cmp	r3, #59	; 0x3b
 8001ab2:	d90f      	bls.n	8001ad4 <decimalcopyhex+0x204>
                {
                    temp =   Check%10;
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <decimalcopyhex+0x268>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	220d      	movs	r2, #13
 8001aba:	18bc      	adds	r4, r7, r2
 8001abc:	210a      	movs	r1, #10
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f7fe fbb6 	bl	8000230 <__aeabi_uidivmod>
 8001ac4:	000b      	movs	r3, r1
 8001ac6:	7023      	strb	r3, [r4, #0]
                    Check =  Check+36;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <decimalcopyhex+0x268>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	3324      	adds	r3, #36	; 0x24
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <decimalcopyhex+0x268>)
 8001ad2:	701a      	strb	r2, [r3, #0]
                }
                if(i==0)
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <decimalcopyhex+0x216>
                {

                    Hour = Check;
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <decimalcopyhex+0x268>)
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <decimalcopyhex+0x25c>)
 8001ae4:	701a      	strb	r2, [r3, #0]

//                    ei_printf("Hour  <%d",Hour);
//                    ei_printf("> ");
                }
                if(i==1)
 8001ae6:	230f      	movs	r3, #15
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d103      	bne.n	8001af8 <decimalcopyhex+0x228>
                {
                    Min  = Check;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <decimalcopyhex+0x268>)
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <decimalcopyhex+0x260>)
 8001af6:	701a      	strb	r2, [r3, #0]

//                    ei_printf("Min  <%d",Min);
//                    ei_printf(" >");
                }
                if(i==2)
 8001af8:	230f      	movs	r3, #15
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d103      	bne.n	8001b0a <decimalcopyhex+0x23a>
                {
                    Sec  = Check;
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <decimalcopyhex+0x268>)
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <decimalcopyhex+0x264>)
 8001b08:	701a      	strb	r2, [r3, #0]
        for(i=0;i<3;i++)
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	3201      	adds	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	230f      	movs	r3, #15
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d800      	bhi.n	8001b22 <decimalcopyhex+0x252>
 8001b20:	e71f      	b.n	8001962 <decimalcopyhex+0x92>
//                    ei_printf("Sec  <%d",Sec);
//                    ei_printf('>');
                }
        }

}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b005      	add	sp, #20
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	20000198 	.word	0x20000198
 8001b30:	20000199 	.word	0x20000199
 8001b34:	2000019a 	.word	0x2000019a
 8001b38:	20005638 	.word	0x20005638

08001b3c <decimalcopyhex_date>:

void decimalcopyhex_date(char *msg)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
            unsigned char  Checkval=0;
 8001b44:	210f      	movs	r1, #15
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
            Date  = ((msg[8]-48)*10)+(msg[9]-48);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	3b30      	subs	r3, #48	; 0x30
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	1c1a      	adds	r2, r3, #0
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	18d3      	adds	r3, r2, r3
 8001b5c:	18db      	adds	r3, r3, r3
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3309      	adds	r3, #9
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	18d3      	adds	r3, r2, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	3b30      	subs	r3, #48	; 0x30
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <decimalcopyhex_date+0xbc>)
 8001b70:	701a      	strb	r2, [r3, #0]

            Check  = Date;
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <decimalcopyhex_date+0xbc>)
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001b78:	701a      	strb	r2, [r3, #0]

            if((Check>=10)&&(Check<20))
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b09      	cmp	r3, #9
 8001b80:	d909      	bls.n	8001b96 <decimalcopyhex_date+0x5a>
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b13      	cmp	r3, #19
 8001b88:	d805      	bhi.n	8001b96 <decimalcopyhex_date+0x5a>
            {
                Checkval =  Check+6;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	187b      	adds	r3, r7, r1
 8001b90:	3206      	adds	r2, #6
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e026      	b.n	8001be4 <decimalcopyhex_date+0xa8>
            }
            else if(Check<10)
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b09      	cmp	r3, #9
 8001b9c:	d805      	bhi.n	8001baa <decimalcopyhex_date+0x6e>
            {
                Checkval =  Check;
 8001b9e:	230f      	movs	r3, #15
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	4a16      	ldr	r2, [pc, #88]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	e01c      	b.n	8001be4 <decimalcopyhex_date+0xa8>
            }
            else if((Check>=20)&&(Check<30))
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b13      	cmp	r3, #19
 8001bb0:	d90a      	bls.n	8001bc8 <decimalcopyhex_date+0x8c>
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b1d      	cmp	r3, #29
 8001bb8:	d806      	bhi.n	8001bc8 <decimalcopyhex_date+0x8c>
            {
                Checkval =  Check+12;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	320c      	adds	r2, #12
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e00d      	b.n	8001be4 <decimalcopyhex_date+0xa8>
            }
            else if((Check>=30)&&(Check<40))
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b1d      	cmp	r3, #29
 8001bce:	d909      	bls.n	8001be4 <decimalcopyhex_date+0xa8>
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b27      	cmp	r3, #39	; 0x27
 8001bd6:	d805      	bhi.n	8001be4 <decimalcopyhex_date+0xa8>
            {
                Checkval =  Check+18;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <decimalcopyhex_date+0xc0>)
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	230f      	movs	r3, #15
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	3212      	adds	r2, #18
 8001be2:	701a      	strb	r2, [r3, #0]
            }

            Date  = Checkval;
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <decimalcopyhex_date+0xbc>)
 8001be6:	220f      	movs	r2, #15
 8001be8:	18ba      	adds	r2, r7, r2
 8001bea:	7812      	ldrb	r2, [r2, #0]
 8001bec:	701a      	strb	r2, [r3, #0]


//            ei_printf("Date< %X",Date);
//            ei_printf('>');

    }
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b004      	add	sp, #16
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	2000019b 	.word	0x2000019b
 8001bfc:	20005638 	.word	0x20005638

08001c00 <decimalcopyhex_month>:

void decimalcopyhex_month(char *msg)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
            unsigned char  Checkval=0;
 8001c08:	210f      	movs	r1, #15
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
            Month  = ((msg[5]-48)*10)+(msg[6]-48);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3305      	adds	r3, #5
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	3b30      	subs	r3, #48	; 0x30
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	1c1a      	adds	r2, r3, #0
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	18d3      	adds	r3, r2, r3
 8001c20:	18db      	adds	r3, r3, r3
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3306      	adds	r3, #6
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	18d3      	adds	r3, r2, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3b30      	subs	r3, #48	; 0x30
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <decimalcopyhex_month+0xbc>)
 8001c34:	701a      	strb	r2, [r3, #0]

            Check  = Month;
 8001c36:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <decimalcopyhex_month+0xbc>)
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c3c:	701a      	strb	r2, [r3, #0]

            if((Check>=10)&&(Check<20))
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b09      	cmp	r3, #9
 8001c44:	d909      	bls.n	8001c5a <decimalcopyhex_month+0x5a>
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b13      	cmp	r3, #19
 8001c4c:	d805      	bhi.n	8001c5a <decimalcopyhex_month+0x5a>
            {
                Checkval =  Check+6;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	3206      	adds	r2, #6
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	e026      	b.n	8001ca8 <decimalcopyhex_month+0xa8>
            }
            else if(Check<10)
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b09      	cmp	r3, #9
 8001c60:	d805      	bhi.n	8001c6e <decimalcopyhex_month+0x6e>
            {
                Checkval =  Check;
 8001c62:	230f      	movs	r3, #15
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e01c      	b.n	8001ca8 <decimalcopyhex_month+0xa8>
            }
            else if((Check>=20)&&(Check<30))
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b13      	cmp	r3, #19
 8001c74:	d90a      	bls.n	8001c8c <decimalcopyhex_month+0x8c>
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b1d      	cmp	r3, #29
 8001c7c:	d806      	bhi.n	8001c8c <decimalcopyhex_month+0x8c>
            {
                Checkval =  Check+12;
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	230f      	movs	r3, #15
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	320c      	adds	r2, #12
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	e00d      	b.n	8001ca8 <decimalcopyhex_month+0xa8>
            }
            else if((Check>=30)&&(Check<40))
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b1d      	cmp	r3, #29
 8001c92:	d909      	bls.n	8001ca8 <decimalcopyhex_month+0xa8>
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b27      	cmp	r3, #39	; 0x27
 8001c9a:	d805      	bhi.n	8001ca8 <decimalcopyhex_month+0xa8>
            {
                Checkval =  Check+18;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <decimalcopyhex_month+0xc0>)
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	3212      	adds	r2, #18
 8001ca6:	701a      	strb	r2, [r3, #0]
            }

            Month  = Checkval;
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <decimalcopyhex_month+0xbc>)
 8001caa:	220f      	movs	r2, #15
 8001cac:	18ba      	adds	r2, r7, r2
 8001cae:	7812      	ldrb	r2, [r2, #0]
 8001cb0:	701a      	strb	r2, [r3, #0]


//            ei_printf("Month < %d",Month);
//            ei_printf('>');

    }
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b004      	add	sp, #16
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	2000019c 	.word	0x2000019c
 8001cc0:	20005638 	.word	0x20005638

08001cc4 <decimalcopyhex_Year>:



void decimalcopyhex_Year(char *msg)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  unsigned char  Checkval,i=0,cnt=0;
 8001ccc:	230e      	movs	r3, #14
 8001cce:	18fb      	adds	r3, r7, r3
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
 8001cd4:	230d      	movs	r3, #13
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]


    Year  = ((msg[2]-48)*10)+((msg[3]-48));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3302      	adds	r3, #2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	3b30      	subs	r3, #48	; 0x30
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	1c1a      	adds	r2, r3, #0
 8001ce8:	0092      	lsls	r2, r2, #2
 8001cea:	18d3      	adds	r3, r2, r3
 8001cec:	18db      	adds	r3, r3, r3
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3303      	adds	r3, #3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	18d3      	adds	r3, r2, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	3b30      	subs	r3, #48	; 0x30
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <decimalcopyhex_Year+0x104>)
 8001d00:	701a      	strb	r2, [r3, #0]
    Check  = Year;
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <decimalcopyhex_Year+0x104>)
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d08:	701a      	strb	r2, [r3, #0]

        if((Check>=10)&&(Check<20))
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b09      	cmp	r3, #9
 8001d10:	d90a      	bls.n	8001d28 <decimalcopyhex_Year+0x64>
 8001d12:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b13      	cmp	r3, #19
 8001d18:	d806      	bhi.n	8001d28 <decimalcopyhex_Year+0x64>
        {
            Checkval =  Check+6;
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	230f      	movs	r3, #15
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	3206      	adds	r2, #6
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e045      	b.n	8001db4 <decimalcopyhex_Year+0xf0>
        }
        else if((Check>=20)&&(Check<30))
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b13      	cmp	r3, #19
 8001d2e:	d90a      	bls.n	8001d46 <decimalcopyhex_Year+0x82>
 8001d30:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b1d      	cmp	r3, #29
 8001d36:	d806      	bhi.n	8001d46 <decimalcopyhex_Year+0x82>
        {
            Checkval =  Check+12;
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	320c      	adds	r2, #12
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e036      	b.n	8001db4 <decimalcopyhex_Year+0xf0>
        }
        else if((Check>=30)&&(Check<40))
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b1d      	cmp	r3, #29
 8001d4c:	d90a      	bls.n	8001d64 <decimalcopyhex_Year+0xa0>
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b27      	cmp	r3, #39	; 0x27
 8001d54:	d806      	bhi.n	8001d64 <decimalcopyhex_Year+0xa0>
        {
            Checkval =  Check+18;
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	3212      	adds	r2, #18
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e027      	b.n	8001db4 <decimalcopyhex_Year+0xf0>
        }
        else if((Check>=40)&&(Check<50))
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b27      	cmp	r3, #39	; 0x27
 8001d6a:	d90a      	bls.n	8001d82 <decimalcopyhex_Year+0xbe>
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b31      	cmp	r3, #49	; 0x31
 8001d72:	d806      	bhi.n	8001d82 <decimalcopyhex_Year+0xbe>
        {
            Checkval =  Check+24;
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	230f      	movs	r3, #15
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	3218      	adds	r2, #24
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	e018      	b.n	8001db4 <decimalcopyhex_Year+0xf0>
        }
        else if((Check>=50)&&(Check<60))
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b31      	cmp	r3, #49	; 0x31
 8001d88:	d90a      	bls.n	8001da0 <decimalcopyhex_Year+0xdc>
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b3b      	cmp	r3, #59	; 0x3b
 8001d90:	d806      	bhi.n	8001da0 <decimalcopyhex_Year+0xdc>
        {
            Checkval =  Check+30;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	230f      	movs	r3, #15
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	321e      	adds	r2, #30
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	e009      	b.n	8001db4 <decimalcopyhex_Year+0xf0>
        }
        else if(Check>=60)
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b3b      	cmp	r3, #59	; 0x3b
 8001da6:	d905      	bls.n	8001db4 <decimalcopyhex_Year+0xf0>
        {
            Checkval =  Check+36;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <decimalcopyhex_Year+0x108>)
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	230f      	movs	r3, #15
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	3224      	adds	r2, #36	; 0x24
 8001db2:	701a      	strb	r2, [r3, #0]
        }

        Year  = Checkval;
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <decimalcopyhex_Year+0x104>)
 8001db6:	220f      	movs	r2, #15
 8001db8:	18ba      	adds	r2, r7, r2
 8001dba:	7812      	ldrb	r2, [r2, #0]
 8001dbc:	701a      	strb	r2, [r3, #0]


}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b004      	add	sp, #16
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	2000019d 	.word	0x2000019d
 8001dcc:	20005638 	.word	0x20005638

08001dd0 <update_time>:


}

void update_time(char *rx_time)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
    decimalcopyhex_date(rx_time);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7ff feae 	bl	8001b3c <decimalcopyhex_date>
    decimalcopyhex_month(rx_time);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f7ff ff0c 	bl	8001c00 <decimalcopyhex_month>
    decimalcopyhex_Year(rx_time);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f7ff ff6a 	bl	8001cc4 <decimalcopyhex_Year>
    decimalcopyhex(rx_time);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7ff fd6c 	bl	80018d0 <decimalcopyhex>
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e04:	f7ff fd5e 	bl	80018c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e08:	480c      	ldr	r0, [pc, #48]	; (8001e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e0a:	490d      	ldr	r1, [pc, #52]	; (8001e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <LoopForever+0xe>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e20:	4c0a      	ldr	r4, [pc, #40]	; (8001e4c <LoopForever+0x16>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e2e:	f004 f9df 	bl	80061f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e32:	f7fe faed 	bl	8000410 <main>

08001e36 <LoopForever>:

LoopForever:
  b LoopForever
 8001e36:	e7fe      	b.n	8001e36 <LoopForever>
  ldr   r0, =_estack
 8001e38:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e44:	08006ea0 	.word	0x08006ea0
  ldr r2, =_sbss
 8001e48:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e4c:	20005650 	.word	0x20005650

08001e50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_Init+0x3c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_Init+0x3c>)
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	0049      	lsls	r1, r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 f810 	bl	8001e94 <HAL_InitTick>
 8001e74:	1e03      	subs	r3, r0, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e78:	1dfb      	adds	r3, r7, #7
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	e001      	b.n	8001e84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fbb0 	bl	80015e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	781b      	ldrb	r3, [r3, #0]
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40022000 	.word	0x40022000

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_InitTick+0x88>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d02b      	beq.n	8001f04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_InitTick+0x8c>)
 8001eae:	681c      	ldr	r4, [r3, #0]
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_InitTick+0x88>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	23fa      	movs	r3, #250	; 0xfa
 8001eb8:	0098      	lsls	r0, r3, #2
 8001eba:	f7fe f933 	bl	8000124 <__udivsi3>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	0020      	movs	r0, r4
 8001ec4:	f7fe f92e 	bl	8000124 <__udivsi3>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 f953 	bl	8002176 <HAL_SYSTICK_Config>
 8001ed0:	1e03      	subs	r3, r0, #0
 8001ed2:	d112      	bne.n	8001efa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d80a      	bhi.n	8001ef0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	2301      	movs	r3, #1
 8001ede:	425b      	negs	r3, r3
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 f922 	bl	800212c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_InitTick+0x90>)
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e00d      	b.n	8001f0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	e008      	b.n	8001f0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001efa:	230f      	movs	r3, #15
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e003      	b.n	8001f0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f04:	230f      	movs	r3, #15
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b005      	add	sp, #20
 8001f18:	bd90      	pop	{r4, r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	2000000c 	.word	0x2000000c
 8001f20:	20000004 	.word	0x20000004
 8001f24:	20000008 	.word	0x20000008

08001f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_IncTick+0x1c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	001a      	movs	r2, r3
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_IncTick+0x20>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	18d2      	adds	r2, r2, r3
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_IncTick+0x20>)
 8001f3a:	601a      	str	r2, [r3, #0]
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	2000000c 	.word	0x2000000c
 8001f48:	2000563c 	.word	0x2000563c

08001f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <HAL_GetTick+0x10>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	2000563c 	.word	0x2000563c

08001f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fff0 	bl	8001f4c <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3301      	adds	r3, #1
 8001f78:	d005      	beq.n	8001f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_Delay+0x44>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	001a      	movs	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	189b      	adds	r3, r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	f7ff ffe0 	bl	8001f4c <HAL_GetTick>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8f7      	bhi.n	8001f88 <HAL_Delay+0x28>
  {
  }
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b004      	add	sp, #16
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	2000000c 	.word	0x2000000c

08001fa8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	0019      	movs	r1, r3
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	fffff9ff 	.word	0xfffff9ff

08001fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	0002      	movs	r2, r0
 8001fdc:	1dfb      	adds	r3, r7, #7
 8001fde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	1dfb      	adds	r3, r7, #7
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fe6:	d809      	bhi.n	8001ffc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe8:	1dfb      	adds	r3, r7, #7
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	001a      	movs	r2, r3
 8001fee:	231f      	movs	r3, #31
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <__NVIC_EnableIRQ+0x30>)
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4091      	lsls	r1, r2
 8001ff8:	000a      	movs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	0002      	movs	r2, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	1dfb      	adds	r3, r7, #7
 8002014:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b7f      	cmp	r3, #127	; 0x7f
 800201c:	d828      	bhi.n	8002070 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800201e:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <__NVIC_SetPriority+0xd4>)
 8002020:	1dfb      	adds	r3, r7, #7
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b25b      	sxtb	r3, r3
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	33c0      	adds	r3, #192	; 0xc0
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	589b      	ldr	r3, [r3, r2]
 800202e:	1dfa      	adds	r2, r7, #7
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	0011      	movs	r1, r2
 8002034:	2203      	movs	r2, #3
 8002036:	400a      	ands	r2, r1
 8002038:	00d2      	lsls	r2, r2, #3
 800203a:	21ff      	movs	r1, #255	; 0xff
 800203c:	4091      	lsls	r1, r2
 800203e:	000a      	movs	r2, r1
 8002040:	43d2      	mvns	r2, r2
 8002042:	401a      	ands	r2, r3
 8002044:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	019b      	lsls	r3, r3, #6
 800204a:	22ff      	movs	r2, #255	; 0xff
 800204c:	401a      	ands	r2, r3
 800204e:	1dfb      	adds	r3, r7, #7
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	0018      	movs	r0, r3
 8002054:	2303      	movs	r3, #3
 8002056:	4003      	ands	r3, r0
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800205c:	481f      	ldr	r0, [pc, #124]	; (80020dc <__NVIC_SetPriority+0xd4>)
 800205e:	1dfb      	adds	r3, r7, #7
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b25b      	sxtb	r3, r3
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	430a      	orrs	r2, r1
 8002068:	33c0      	adds	r3, #192	; 0xc0
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800206e:	e031      	b.n	80020d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002070:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <__NVIC_SetPriority+0xd8>)
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	0019      	movs	r1, r3
 8002078:	230f      	movs	r3, #15
 800207a:	400b      	ands	r3, r1
 800207c:	3b08      	subs	r3, #8
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3306      	adds	r3, #6
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	18d3      	adds	r3, r2, r3
 8002086:	3304      	adds	r3, #4
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1dfa      	adds	r2, r7, #7
 800208c:	7812      	ldrb	r2, [r2, #0]
 800208e:	0011      	movs	r1, r2
 8002090:	2203      	movs	r2, #3
 8002092:	400a      	ands	r2, r1
 8002094:	00d2      	lsls	r2, r2, #3
 8002096:	21ff      	movs	r1, #255	; 0xff
 8002098:	4091      	lsls	r1, r2
 800209a:	000a      	movs	r2, r1
 800209c:	43d2      	mvns	r2, r2
 800209e:	401a      	ands	r2, r3
 80020a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	019b      	lsls	r3, r3, #6
 80020a6:	22ff      	movs	r2, #255	; 0xff
 80020a8:	401a      	ands	r2, r3
 80020aa:	1dfb      	adds	r3, r7, #7
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	0018      	movs	r0, r3
 80020b0:	2303      	movs	r3, #3
 80020b2:	4003      	ands	r3, r0
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020b8:	4809      	ldr	r0, [pc, #36]	; (80020e0 <__NVIC_SetPriority+0xd8>)
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	001c      	movs	r4, r3
 80020c0:	230f      	movs	r3, #15
 80020c2:	4023      	ands	r3, r4
 80020c4:	3b08      	subs	r3, #8
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	430a      	orrs	r2, r1
 80020ca:	3306      	adds	r3, #6
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	18c3      	adds	r3, r0, r3
 80020d0:	3304      	adds	r3, #4
 80020d2:	601a      	str	r2, [r3, #0]
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b003      	add	sp, #12
 80020da:	bd90      	pop	{r4, r7, pc}
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	1e5a      	subs	r2, r3, #1
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	045b      	lsls	r3, r3, #17
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d301      	bcc.n	80020fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f8:	2301      	movs	r3, #1
 80020fa:	e010      	b.n	800211e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <SysTick_Config+0x44>)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	3a01      	subs	r2, #1
 8002102:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002104:	2301      	movs	r3, #1
 8002106:	425b      	negs	r3, r3
 8002108:	2103      	movs	r1, #3
 800210a:	0018      	movs	r0, r3
 800210c:	f7ff ff7c 	bl	8002008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <SysTick_Config+0x44>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <SysTick_Config+0x44>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	0018      	movs	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	b002      	add	sp, #8
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	210f      	movs	r1, #15
 8002138:	187b      	adds	r3, r7, r1
 800213a:	1c02      	adds	r2, r0, #0
 800213c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	187b      	adds	r3, r7, r1
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b25b      	sxtb	r3, r3
 8002146:	0011      	movs	r1, r2
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff ff5d 	bl	8002008 <__NVIC_SetPriority>
}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	b004      	add	sp, #16
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	0002      	movs	r2, r0
 800215e:	1dfb      	adds	r3, r7, #7
 8002160:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b25b      	sxtb	r3, r3
 8002168:	0018      	movs	r0, r3
 800216a:	f7ff ff33 	bl	8001fd4 <__NVIC_EnableIRQ>
}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	46bd      	mov	sp, r7
 8002172:	b002      	add	sp, #8
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f7ff ffaf 	bl	80020e4 <SysTick_Config>
 8002186:	0003      	movs	r3, r0
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e050      	b.n	8002244 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2225      	movs	r2, #37	; 0x25
 80021a6:	5c9b      	ldrb	r3, [r3, r2]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d008      	beq.n	80021c0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2204      	movs	r2, #4
 80021b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	; 0x24
 80021b8:	2100      	movs	r1, #0
 80021ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e041      	b.n	8002244 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	210e      	movs	r1, #14
 80021cc:	438a      	bics	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	491c      	ldr	r1, [pc, #112]	; (800224c <HAL_DMA_Abort+0xbc>)
 80021dc:	400a      	ands	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2101      	movs	r1, #1
 80021ec:	438a      	bics	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_DMA_Abort+0xc0>)
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	221c      	movs	r2, #28
 80021fa:	4013      	ands	r3, r2
 80021fc:	2201      	movs	r2, #1
 80021fe:	409a      	lsls	r2, r3
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_DMA_Abort+0xc0>)
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800220e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00c      	beq.n	8002232 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002222:	490a      	ldr	r1, [pc, #40]	; (800224c <HAL_DMA_Abort+0xbc>)
 8002224:	400a      	ands	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002230:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2225      	movs	r2, #37	; 0x25
 8002236:	2101      	movs	r1, #1
 8002238:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2224      	movs	r2, #36	; 0x24
 800223e:	2100      	movs	r1, #0
 8002240:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}
 800224c:	fffffeff 	.word	0xfffffeff
 8002250:	40020000 	.word	0x40020000

08002254 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800225c:	210f      	movs	r1, #15
 800225e:	187b      	adds	r3, r7, r1
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2225      	movs	r2, #37	; 0x25
 8002268:	5c9b      	ldrb	r3, [r3, r2]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d006      	beq.n	800227e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2204      	movs	r2, #4
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002276:	187b      	adds	r3, r7, r1
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e049      	b.n	8002312 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	210e      	movs	r1, #14
 800228a:	438a      	bics	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	438a      	bics	r2, r1
 800229c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	491d      	ldr	r1, [pc, #116]	; (8002320 <HAL_DMA_Abort_IT+0xcc>)
 80022aa:	400a      	ands	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_DMA_Abort_IT+0xd0>)
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	221c      	movs	r2, #28
 80022b8:	4013      	ands	r3, r2
 80022ba:	2201      	movs	r2, #1
 80022bc:	409a      	lsls	r2, r3
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_DMA_Abort_IT+0xd0>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e0:	490f      	ldr	r1, [pc, #60]	; (8002320 <HAL_DMA_Abort_IT+0xcc>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80022ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2225      	movs	r2, #37	; 0x25
 80022f4:	2101      	movs	r1, #1
 80022f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	; 0x24
 80022fc:	2100      	movs	r1, #0
 80022fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	0010      	movs	r0, r2
 8002310:	4798      	blx	r3
    }
  }
  return status;
 8002312:	230f      	movs	r3, #15
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	781b      	ldrb	r3, [r3, #0]
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b004      	add	sp, #16
 800231e:	bd80      	pop	{r7, pc}
 8002320:	fffffeff 	.word	0xfffffeff
 8002324:	40020000 	.word	0x40020000

08002328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002336:	e147      	b.n	80025c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4091      	lsls	r1, r2
 8002342:	000a      	movs	r2, r1
 8002344:	4013      	ands	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d100      	bne.n	8002350 <HAL_GPIO_Init+0x28>
 800234e:	e138      	b.n	80025c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2203      	movs	r2, #3
 8002356:	4013      	ands	r3, r2
 8002358:	2b01      	cmp	r3, #1
 800235a:	d005      	beq.n	8002368 <HAL_GPIO_Init+0x40>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2203      	movs	r2, #3
 8002362:	4013      	ands	r3, r2
 8002364:	2b02      	cmp	r3, #2
 8002366:	d130      	bne.n	80023ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	409a      	lsls	r2, r3
 8002376:	0013      	movs	r3, r2
 8002378:	43da      	mvns	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	409a      	lsls	r2, r3
 800238a:	0013      	movs	r3, r2
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239e:	2201      	movs	r2, #1
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
 80023a4:	0013      	movs	r3, r2
 80023a6:	43da      	mvns	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	2201      	movs	r2, #1
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
 80023bc:	0013      	movs	r3, r2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2203      	movs	r2, #3
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d017      	beq.n	8002406 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	409a      	lsls	r2, r3
 80023e4:	0013      	movs	r3, r2
 80023e6:	43da      	mvns	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	409a      	lsls	r2, r3
 80023f8:	0013      	movs	r3, r2
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2203      	movs	r2, #3
 800240c:	4013      	ands	r3, r2
 800240e:	2b02      	cmp	r3, #2
 8002410:	d123      	bne.n	800245a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	58d3      	ldr	r3, [r2, r3]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2207      	movs	r2, #7
 8002424:	4013      	ands	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	220f      	movs	r2, #15
 800242a:	409a      	lsls	r2, r3
 800242c:	0013      	movs	r3, r2
 800242e:	43da      	mvns	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2107      	movs	r1, #7
 800243e:	400b      	ands	r3, r1
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	409a      	lsls	r2, r3
 8002444:	0013      	movs	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	08da      	lsrs	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3208      	adds	r2, #8
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	6939      	ldr	r1, [r7, #16]
 8002458:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	409a      	lsls	r2, r3
 8002468:	0013      	movs	r3, r2
 800246a:	43da      	mvns	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2203      	movs	r2, #3
 8002478:	401a      	ands	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	409a      	lsls	r2, r3
 8002480:	0013      	movs	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	23c0      	movs	r3, #192	; 0xc0
 8002494:	029b      	lsls	r3, r3, #10
 8002496:	4013      	ands	r3, r2
 8002498:	d100      	bne.n	800249c <HAL_GPIO_Init+0x174>
 800249a:	e092      	b.n	80025c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800249c:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <HAL_GPIO_Init+0x2b8>)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	3318      	adds	r3, #24
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	589b      	ldr	r3, [r3, r2]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2203      	movs	r2, #3
 80024ae:	4013      	ands	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	220f      	movs	r2, #15
 80024b4:	409a      	lsls	r2, r3
 80024b6:	0013      	movs	r3, r2
 80024b8:	43da      	mvns	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	23a0      	movs	r3, #160	; 0xa0
 80024c4:	05db      	lsls	r3, r3, #23
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d013      	beq.n	80024f2 <HAL_GPIO_Init+0x1ca>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a45      	ldr	r2, [pc, #276]	; (80025e4 <HAL_GPIO_Init+0x2bc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00d      	beq.n	80024ee <HAL_GPIO_Init+0x1c6>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a44      	ldr	r2, [pc, #272]	; (80025e8 <HAL_GPIO_Init+0x2c0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <HAL_GPIO_Init+0x1c2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a43      	ldr	r2, [pc, #268]	; (80025ec <HAL_GPIO_Init+0x2c4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <HAL_GPIO_Init+0x1be>
 80024e2:	2303      	movs	r3, #3
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x1cc>
 80024e6:	2305      	movs	r3, #5
 80024e8:	e004      	b.n	80024f4 <HAL_GPIO_Init+0x1cc>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e002      	b.n	80024f4 <HAL_GPIO_Init+0x1cc>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_GPIO_Init+0x1cc>
 80024f2:	2300      	movs	r3, #0
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	2103      	movs	r1, #3
 80024f8:	400a      	ands	r2, r1
 80024fa:	00d2      	lsls	r2, r2, #3
 80024fc:	4093      	lsls	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002504:	4936      	ldr	r1, [pc, #216]	; (80025e0 <HAL_GPIO_Init+0x2b8>)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	3318      	adds	r3, #24
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002512:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <HAL_GPIO_Init+0x2b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	43da      	mvns	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	035b      	lsls	r3, r3, #13
 800252a:	4013      	ands	r3, r2
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002536:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <HAL_GPIO_Init+0x2b8>)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_GPIO_Init+0x2b8>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	43da      	mvns	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	039b      	lsls	r3, r3, #14
 8002554:	4013      	ands	r3, r2
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002560:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <HAL_GPIO_Init+0x2b8>)
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002566:	4a1e      	ldr	r2, [pc, #120]	; (80025e0 <HAL_GPIO_Init+0x2b8>)
 8002568:	2384      	movs	r3, #132	; 0x84
 800256a:	58d3      	ldr	r3, [r2, r3]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	43da      	mvns	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	029b      	lsls	r3, r3, #10
 8002580:	4013      	ands	r3, r2
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800258c:	4914      	ldr	r1, [pc, #80]	; (80025e0 <HAL_GPIO_Init+0x2b8>)
 800258e:	2284      	movs	r2, #132	; 0x84
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002594:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <HAL_GPIO_Init+0x2b8>)
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	58d3      	ldr	r3, [r2, r3]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	43da      	mvns	r2, r3
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	025b      	lsls	r3, r3, #9
 80025ae:	4013      	ands	r3, r2
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ba:	4909      	ldr	r1, [pc, #36]	; (80025e0 <HAL_GPIO_Init+0x2b8>)
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	40da      	lsrs	r2, r3
 80025d0:	1e13      	subs	r3, r2, #0
 80025d2:	d000      	beq.n	80025d6 <HAL_GPIO_Init+0x2ae>
 80025d4:	e6b0      	b.n	8002338 <HAL_GPIO_Init+0x10>
  }
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b006      	add	sp, #24
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021800 	.word	0x40021800
 80025e4:	50000400 	.word	0x50000400
 80025e8:	50000800 	.word	0x50000800
 80025ec:	50000c00 	.word	0x50000c00

080025f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	000a      	movs	r2, r1
 80025fa:	1cbb      	adds	r3, r7, #2
 80025fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	1cba      	adds	r2, r7, #2
 8002604:	8812      	ldrh	r2, [r2, #0]
 8002606:	4013      	ands	r3, r2
 8002608:	d004      	beq.n	8002614 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800260a:	230f      	movs	r3, #15
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	e003      	b.n	800261c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002614:	230f      	movs	r3, #15
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800261c:	230f      	movs	r3, #15
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	781b      	ldrb	r3, [r3, #0]
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b004      	add	sp, #16
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	0008      	movs	r0, r1
 8002634:	0011      	movs	r1, r2
 8002636:	1cbb      	adds	r3, r7, #2
 8002638:	1c02      	adds	r2, r0, #0
 800263a:	801a      	strh	r2, [r3, #0]
 800263c:	1c7b      	adds	r3, r7, #1
 800263e:	1c0a      	adds	r2, r1, #0
 8002640:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002642:	1c7b      	adds	r3, r7, #1
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800264a:	1cbb      	adds	r3, r7, #2
 800264c:	881a      	ldrh	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002652:	e003      	b.n	800265c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002654:	1cbb      	adds	r3, r7, #2
 8002656:	881a      	ldrh	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002672:	4013      	ands	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	429a      	cmp	r2, r3
 8002686:	d11f      	bne.n	80026c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	0013      	movs	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	189b      	adds	r3, r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4912      	ldr	r1, [pc, #72]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002696:	0018      	movs	r0, r3
 8002698:	f7fd fd44 	bl	8000124 <__udivsi3>
 800269c:	0003      	movs	r3, r0
 800269e:	3301      	adds	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026a2:	e008      	b.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e001      	b.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e009      	b.n	80026ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	401a      	ands	r2, r3
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d0ed      	beq.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	40007000 	.word	0x40007000
 80026d8:	fffff9ff 	.word	0xfffff9ff
 80026dc:	20000004 	.word	0x20000004
 80026e0:	000f4240 	.word	0x000f4240

080026e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	23e0      	movs	r3, #224	; 0xe0
 80026ee:	01db      	lsls	r3, r3, #7
 80026f0:	4013      	ands	r3, r2
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e2f3      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d100      	bne.n	800271a <HAL_RCC_OscConfig+0x1e>
 8002718:	e07c      	b.n	8002814 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271a:	4bc3      	ldr	r3, [pc, #780]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	; 0x38
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002724:	4bc0      	ldr	r3, [pc, #768]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2203      	movs	r2, #3
 800272a:	4013      	ands	r3, r2
 800272c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b10      	cmp	r3, #16
 8002732:	d102      	bne.n	800273a <HAL_RCC_OscConfig+0x3e>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d002      	beq.n	8002740 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d10b      	bne.n	8002758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	4bb9      	ldr	r3, [pc, #740]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	029b      	lsls	r3, r3, #10
 8002748:	4013      	ands	r3, r2
 800274a:	d062      	beq.n	8002812 <HAL_RCC_OscConfig+0x116>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d15e      	bne.n	8002812 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e2ce      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	429a      	cmp	r2, r3
 8002762:	d107      	bne.n	8002774 <HAL_RCC_OscConfig+0x78>
 8002764:	4bb0      	ldr	r3, [pc, #704]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4baf      	ldr	r3, [pc, #700]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	0249      	lsls	r1, r1, #9
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e020      	b.n	80027b6 <HAL_RCC_OscConfig+0xba>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	23a0      	movs	r3, #160	; 0xa0
 800277a:	02db      	lsls	r3, r3, #11
 800277c:	429a      	cmp	r2, r3
 800277e:	d10e      	bne.n	800279e <HAL_RCC_OscConfig+0xa2>
 8002780:	4ba9      	ldr	r3, [pc, #676]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4ba8      	ldr	r3, [pc, #672]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	02c9      	lsls	r1, r1, #11
 800278a:	430a      	orrs	r2, r1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	4ba6      	ldr	r3, [pc, #664]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4ba5      	ldr	r3, [pc, #660]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	0249      	lsls	r1, r1, #9
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e00b      	b.n	80027b6 <HAL_RCC_OscConfig+0xba>
 800279e:	4ba2      	ldr	r3, [pc, #648]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4ba1      	ldr	r3, [pc, #644]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027a4:	49a1      	ldr	r1, [pc, #644]	; (8002a2c <HAL_RCC_OscConfig+0x330>)
 80027a6:	400a      	ands	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	4b9f      	ldr	r3, [pc, #636]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b9e      	ldr	r3, [pc, #632]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027b0:	499f      	ldr	r1, [pc, #636]	; (8002a30 <HAL_RCC_OscConfig+0x334>)
 80027b2:	400a      	ands	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d014      	beq.n	80027e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7ff fbc5 	bl	8001f4c <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7ff fbc0 	bl	8001f4c <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e28d      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027da:	4b93      	ldr	r3, [pc, #588]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	4013      	ands	r3, r2
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0xcc>
 80027e6:	e015      	b.n	8002814 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7ff fbb0 	bl	8001f4c <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f2:	f7ff fbab 	bl	8001f4c <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b64      	cmp	r3, #100	; 0x64
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e278      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002804:	4b88      	ldr	r3, [pc, #544]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	029b      	lsls	r3, r3, #10
 800280c:	4013      	ands	r3, r2
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0xf6>
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002812:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d100      	bne.n	8002820 <HAL_RCC_OscConfig+0x124>
 800281e:	e099      	b.n	8002954 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002820:	4b81      	ldr	r3, [pc, #516]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2238      	movs	r2, #56	; 0x38
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800282a:	4b7f      	ldr	r3, [pc, #508]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2203      	movs	r2, #3
 8002830:	4013      	ands	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b10      	cmp	r3, #16
 8002838:	d102      	bne.n	8002840 <HAL_RCC_OscConfig+0x144>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d002      	beq.n	8002846 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d135      	bne.n	80028b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002846:	4b78      	ldr	r3, [pc, #480]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4013      	ands	r3, r2
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x162>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e24b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b72      	ldr	r3, [pc, #456]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a74      	ldr	r2, [pc, #464]	; (8002a34 <HAL_RCC_OscConfig+0x338>)
 8002864:	4013      	ands	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	021a      	lsls	r2, r3, #8
 800286e:	4b6e      	ldr	r3, [pc, #440]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d112      	bne.n	80028a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800287a:	4b6b      	ldr	r3, [pc, #428]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6e      	ldr	r2, [pc, #440]	; (8002a38 <HAL_RCC_OscConfig+0x33c>)
 8002880:	4013      	ands	r3, r2
 8002882:	0019      	movs	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	4b67      	ldr	r3, [pc, #412]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800288a:	430a      	orrs	r2, r1
 800288c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800288e:	4b66      	ldr	r3, [pc, #408]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0adb      	lsrs	r3, r3, #11
 8002894:	2207      	movs	r2, #7
 8002896:	4013      	ands	r3, r2
 8002898:	4a68      	ldr	r2, [pc, #416]	; (8002a3c <HAL_RCC_OscConfig+0x340>)
 800289a:	40da      	lsrs	r2, r3
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x344>)
 800289e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <HAL_RCC_OscConfig+0x348>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7ff faf5 	bl	8001e94 <HAL_InitTick>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d051      	beq.n	8002952 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e221      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d030      	beq.n	800291c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028ba:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a5e      	ldr	r2, [pc, #376]	; (8002a38 <HAL_RCC_OscConfig+0x33c>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	4b57      	ldr	r3, [pc, #348]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028ce:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b55      	ldr	r3, [pc, #340]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	0049      	lsls	r1, r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7ff fb36 	bl	8001f4c <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e6:	f7ff fb31 	bl	8001f4c <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1fe      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f8:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4013      	ands	r3, r2
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a4a      	ldr	r2, [pc, #296]	; (8002a34 <HAL_RCC_OscConfig+0x338>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	e01b      	b.n	8002954 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800291c:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002922:	4949      	ldr	r1, [pc, #292]	; (8002a48 <HAL_RCC_OscConfig+0x34c>)
 8002924:	400a      	ands	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7ff fb10 	bl	8001f4c <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7ff fb0b 	bl	8001f4c <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1d8      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002944:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4013      	ands	r3, r2
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x236>
 8002950:	e000      	b.n	8002954 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002952:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2208      	movs	r2, #8
 800295a:	4013      	ands	r3, r2
 800295c:	d047      	beq.n	80029ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800295e:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2238      	movs	r2, #56	; 0x38
 8002964:	4013      	ands	r3, r2
 8002966:	2b18      	cmp	r3, #24
 8002968:	d10a      	bne.n	8002980 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d03c      	beq.n	80029ee <HAL_RCC_OscConfig+0x2f2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d138      	bne.n	80029ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e1ba      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d019      	beq.n	80029bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800298a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800298c:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800298e:	2101      	movs	r1, #1
 8002990:	430a      	orrs	r2, r1
 8002992:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7ff fada 	bl	8001f4c <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299e:	f7ff fad5 	bl	8001f4c <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e1a2      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b4:	2202      	movs	r2, #2
 80029b6:	4013      	ands	r3, r2
 80029b8:	d0f1      	beq.n	800299e <HAL_RCC_OscConfig+0x2a2>
 80029ba:	e018      	b.n	80029ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	438a      	bics	r2, r1
 80029c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7ff fac0 	bl	8001f4c <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d2:	f7ff fabb 	bl	8001f4c <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e188      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e8:	2202      	movs	r2, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d1f1      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2204      	movs	r2, #4
 80029f4:	4013      	ands	r3, r2
 80029f6:	d100      	bne.n	80029fa <HAL_RCC_OscConfig+0x2fe>
 80029f8:	e0c6      	b.n	8002b88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	231f      	movs	r3, #31
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2238      	movs	r2, #56	; 0x38
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d11e      	bne.n	8002a4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	d100      	bne.n	8002a1a <HAL_RCC_OscConfig+0x31e>
 8002a18:	e0b6      	b.n	8002b88 <HAL_RCC_OscConfig+0x48c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d000      	beq.n	8002a24 <HAL_RCC_OscConfig+0x328>
 8002a22:	e0b1      	b.n	8002b88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e166      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	fffeffff 	.word	0xfffeffff
 8002a30:	fffbffff 	.word	0xfffbffff
 8002a34:	ffff80ff 	.word	0xffff80ff
 8002a38:	ffffc7ff 	.word	0xffffc7ff
 8002a3c:	00f42400 	.word	0x00f42400
 8002a40:	20000004 	.word	0x20000004
 8002a44:	20000008 	.word	0x20000008
 8002a48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a4c:	4bac      	ldr	r3, [pc, #688]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	055b      	lsls	r3, r3, #21
 8002a54:	4013      	ands	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_OscConfig+0x360>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x362>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d011      	beq.n	8002a86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4ba7      	ldr	r3, [pc, #668]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a66:	4ba6      	ldr	r3, [pc, #664]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	0549      	lsls	r1, r1, #21
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a70:	4ba3      	ldr	r3, [pc, #652]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	055b      	lsls	r3, r3, #21
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a7e:	231f      	movs	r3, #31
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a86:	4b9f      	ldr	r3, [pc, #636]	; (8002d04 <HAL_RCC_OscConfig+0x608>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d11a      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a92:	4b9c      	ldr	r3, [pc, #624]	; (8002d04 <HAL_RCC_OscConfig+0x608>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b9b      	ldr	r3, [pc, #620]	; (8002d04 <HAL_RCC_OscConfig+0x608>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0049      	lsls	r1, r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002aa0:	f7ff fa54 	bl	8001f4c <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aaa:	f7ff fa4f 	bl	8001f4c <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e11c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abc:	4b91      	ldr	r3, [pc, #580]	; (8002d04 <HAL_RCC_OscConfig+0x608>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d106      	bne.n	8002ade <HAL_RCC_OscConfig+0x3e2>
 8002ad0:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ad4:	4b8a      	ldr	r3, [pc, #552]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	65da      	str	r2, [r3, #92]	; 0x5c
 8002adc:	e01c      	b.n	8002b18 <HAL_RCC_OscConfig+0x41c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x404>
 8002ae6:	4b86      	ldr	r3, [pc, #536]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002ae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002aec:	2104      	movs	r1, #4
 8002aee:	430a      	orrs	r2, r1
 8002af0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002af2:	4b83      	ldr	r3, [pc, #524]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002af4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002af6:	4b82      	ldr	r3, [pc, #520]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002af8:	2101      	movs	r1, #1
 8002afa:	430a      	orrs	r2, r1
 8002afc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0x41c>
 8002b00:	4b7f      	ldr	r3, [pc, #508]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b06:	2101      	movs	r1, #1
 8002b08:	438a      	bics	r2, r1
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b0c:	4b7c      	ldr	r3, [pc, #496]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b10:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b12:	2104      	movs	r1, #4
 8002b14:	438a      	bics	r2, r1
 8002b16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d014      	beq.n	8002b4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7ff fa14 	bl	8001f4c <HAL_GetTick>
 8002b24:	0003      	movs	r3, r0
 8002b26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b28:	e009      	b.n	8002b3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7ff fa0f 	bl	8001f4c <HAL_GetTick>
 8002b2e:	0002      	movs	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	4a74      	ldr	r2, [pc, #464]	; (8002d08 <HAL_RCC_OscConfig+0x60c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0db      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	4b70      	ldr	r3, [pc, #448]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x42e>
 8002b48:	e013      	b.n	8002b72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7ff f9ff 	bl	8001f4c <HAL_GetTick>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b52:	e009      	b.n	8002b68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7ff f9fa 	bl	8001f4c <HAL_GetTick>
 8002b58:	0002      	movs	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	4a6a      	ldr	r2, [pc, #424]	; (8002d08 <HAL_RCC_OscConfig+0x60c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0c6      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b68:	4b65      	ldr	r3, [pc, #404]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b72:	231f      	movs	r3, #31
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b7c:	4b60      	ldr	r3, [pc, #384]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b80:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b82:	4962      	ldr	r1, [pc, #392]	; (8002d0c <HAL_RCC_OscConfig+0x610>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d100      	bne.n	8002b92 <HAL_RCC_OscConfig+0x496>
 8002b90:	e0b0      	b.n	8002cf4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2238      	movs	r2, #56	; 0x38
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d100      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4a4>
 8002b9e:	e078      	b.n	8002c92 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d153      	bne.n	8002c50 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002bae:	4958      	ldr	r1, [pc, #352]	; (8002d10 <HAL_RCC_OscConfig+0x614>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7ff f9ca 	bl	8001f4c <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7ff f9c5 	bl	8001f4c <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e092      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	049b      	lsls	r3, r3, #18
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bdc:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1a      	ldr	r2, [r3, #32]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	431a      	orrs	r2, r3
 8002c04:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c06:	430a      	orrs	r2, r1
 8002c08:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	0449      	lsls	r1, r1, #17
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	0549      	lsls	r1, r1, #21
 8002c22:	430a      	orrs	r2, r1
 8002c24:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7ff f991 	bl	8001f4c <HAL_GetTick>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7ff f98c 	bl	8001f4c <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e059      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c42:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	049b      	lsls	r3, r3, #18
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x534>
 8002c4e:	e051      	b.n	8002cf4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c56:	492e      	ldr	r1, [pc, #184]	; (8002d10 <HAL_RCC_OscConfig+0x614>)
 8002c58:	400a      	ands	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7ff f976 	bl	8001f4c <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c66:	f7ff f971 	bl	8001f4c <HAL_GetTick>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e03e      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c78:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	049b      	lsls	r3, r3, #18
 8002c80:	4013      	ands	r3, r2
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c8a:	4923      	ldr	r1, [pc, #140]	; (8002d18 <HAL_RCC_OscConfig+0x61c>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	e030      	b.n	8002cf4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e02b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	401a      	ands	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d11e      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2270      	movs	r2, #112	; 0x70
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d117      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	23fe      	movs	r3, #254	; 0xfe
 8002cc4:	01db      	lsls	r3, r3, #7
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	23f8      	movs	r3, #248	; 0xf8
 8002cd6:	039b      	lsls	r3, r3, #14
 8002cd8:	401a      	ands	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d106      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	0f5b      	lsrs	r3, r3, #29
 8002ce6:	075a      	lsls	r2, r3, #29
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b008      	add	sp, #32
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
 8002d08:	00001388 	.word	0x00001388
 8002d0c:	efffffff 	.word	0xefffffff
 8002d10:	feffffff 	.word	0xfeffffff
 8002d14:	1fc1808c 	.word	0x1fc1808c
 8002d18:	effefffc 	.word	0xeffefffc

08002d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0e9      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2207      	movs	r2, #7
 8002d36:	4013      	ands	r3, r2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d91e      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2207      	movs	r2, #7
 8002d44:	4393      	bics	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	4b70      	ldr	r3, [pc, #448]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d50:	f7ff f8fc 	bl	8001f4c <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d58:	e009      	b.n	8002d6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5a:	f7ff f8f7 	bl	8001f4c <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	4a6a      	ldr	r2, [pc, #424]	; (8002f10 <HAL_RCC_ClockConfig+0x1f4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0ca      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d6e:	4b67      	ldr	r3, [pc, #412]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2207      	movs	r2, #7
 8002d74:	4013      	ands	r3, r2
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1ee      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2202      	movs	r2, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	d015      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d006      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d90:	4b60      	ldr	r3, [pc, #384]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002d96:	21e0      	movs	r1, #224	; 0xe0
 8002d98:	01c9      	lsls	r1, r1, #7
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9e:	4b5d      	ldr	r3, [pc, #372]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	4a5d      	ldr	r2, [pc, #372]	; (8002f18 <HAL_RCC_ClockConfig+0x1fc>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dae:	430a      	orrs	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2201      	movs	r2, #1
 8002db8:	4013      	ands	r3, r2
 8002dba:	d057      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d12b      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e097      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ddc:	4b4d      	ldr	r3, [pc, #308]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	049b      	lsls	r3, r3, #18
 8002de4:	4013      	ands	r3, r2
 8002de6:	d11f      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e08b      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df4:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d113      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e07f      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e0c:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e10:	2202      	movs	r2, #2
 8002e12:	4013      	ands	r3, r2
 8002e14:	d108      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e074      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1a:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4013      	ands	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e06d      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e28:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	4393      	bics	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e3c:	f7ff f886 	bl	8001f4c <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e44:	e009      	b.n	8002e5a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e46:	f7ff f881 	bl	8001f4c <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	4a2f      	ldr	r2, [pc, #188]	; (8002f10 <HAL_RCC_ClockConfig+0x1f4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e054      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2238      	movs	r2, #56	; 0x38
 8002e60:	401a      	ands	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1ec      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2207      	movs	r2, #7
 8002e72:	4013      	ands	r3, r2
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d21e      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2207      	movs	r2, #7
 8002e80:	4393      	bics	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e8c:	f7ff f85e 	bl	8001f4c <HAL_GetTick>
 8002e90:	0003      	movs	r3, r0
 8002e92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e94:	e009      	b.n	8002eaa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e96:	f7ff f859 	bl	8001f4c <HAL_GetTick>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <HAL_RCC_ClockConfig+0x1f4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e02c      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2207      	movs	r2, #7
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <HAL_RCC_ClockConfig+0x200>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ed6:	f000 f829 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8002eda:	0001      	movs	r1, r0
 8002edc:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_RCC_ClockConfig+0x204>)
 8002ee8:	0092      	lsls	r2, r2, #2
 8002eea:	58d3      	ldr	r3, [r2, r3]
 8002eec:	221f      	movs	r2, #31
 8002eee:	4013      	ands	r3, r2
 8002ef0:	000a      	movs	r2, r1
 8002ef2:	40da      	lsrs	r2, r3
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_ClockConfig+0x208>)
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_ClockConfig+0x20c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7fe ffc9 	bl	8001e94 <HAL_InitTick>
 8002f02:	0003      	movs	r3, r0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b004      	add	sp, #16
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40022000 	.word	0x40022000
 8002f10:	00001388 	.word	0x00001388
 8002f14:	40021000 	.word	0x40021000
 8002f18:	fffff0ff 	.word	0xfffff0ff
 8002f1c:	ffff8fff 	.word	0xffff8fff
 8002f20:	08006cdc 	.word	0x08006cdc
 8002f24:	20000004 	.word	0x20000004
 8002f28:	20000008 	.word	0x20000008

08002f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f32:	4b3c      	ldr	r3, [pc, #240]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2238      	movs	r2, #56	; 0x38
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d10f      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f3c:	4b39      	ldr	r3, [pc, #228]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0adb      	lsrs	r3, r3, #11
 8002f42:	2207      	movs	r2, #7
 8002f44:	4013      	ands	r3, r2
 8002f46:	2201      	movs	r2, #1
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f4e:	6839      	ldr	r1, [r7, #0]
 8002f50:	4835      	ldr	r0, [pc, #212]	; (8003028 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f52:	f7fd f8e7 	bl	8000124 <__udivsi3>
 8002f56:	0003      	movs	r3, r0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	e05d      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f5c:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2238      	movs	r2, #56	; 0x38
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f68:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_RCC_GetSysClockFreq+0x100>)
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	e054      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2238      	movs	r2, #56	; 0x38
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d138      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2203      	movs	r2, #3
 8002f80:	4013      	ands	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f84:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d10d      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4824      	ldr	r0, [pc, #144]	; (800302c <HAL_RCC_GetSysClockFreq+0x100>)
 8002f9c:	f7fd f8c2 	bl	8000124 <__udivsi3>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	227f      	movs	r2, #127	; 0x7f
 8002fac:	4013      	ands	r3, r2
 8002fae:	434b      	muls	r3, r1
 8002fb0:	617b      	str	r3, [r7, #20]
        break;
 8002fb2:	e00d      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	481c      	ldr	r0, [pc, #112]	; (8003028 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fb8:	f7fd f8b4 	bl	8000124 <__udivsi3>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	4b18      	ldr	r3, [pc, #96]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	227f      	movs	r2, #127	; 0x7f
 8002fc8:	4013      	ands	r3, r2
 8002fca:	434b      	muls	r3, r1
 8002fcc:	617b      	str	r3, [r7, #20]
        break;
 8002fce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0f5b      	lsrs	r3, r3, #29
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	4013      	ands	r3, r2
 8002fda:	3301      	adds	r3, #1
 8002fdc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	6978      	ldr	r0, [r7, #20]
 8002fe2:	f7fd f89f 	bl	8000124 <__udivsi3>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e015      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fec:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2238      	movs	r2, #56	; 0x38
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d103      	bne.n	8003000 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2238      	movs	r2, #56	; 0x38
 8003006:	4013      	ands	r3, r2
 8003008:	2b18      	cmp	r3, #24
 800300a:	d103      	bne.n	8003014 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800300c:	23fa      	movs	r3, #250	; 0xfa
 800300e:	01db      	lsls	r3, r3, #7
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	e001      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003018:	693b      	ldr	r3, [r7, #16]
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b006      	add	sp, #24
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	40021000 	.word	0x40021000
 8003028:	00f42400 	.word	0x00f42400
 800302c:	007a1200 	.word	0x007a1200

08003030 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b02      	ldr	r3, [pc, #8]	; (8003040 <HAL_RCC_GetHCLKFreq+0x10>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	20000004 	.word	0x20000004

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b5b0      	push	{r4, r5, r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003048:	f7ff fff2 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 800304c:	0004      	movs	r4, r0
 800304e:	f7ff fb49 	bl	80026e4 <LL_RCC_GetAPB1Prescaler>
 8003052:	0003      	movs	r3, r0
 8003054:	0b1a      	lsrs	r2, r3, #12
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	58d3      	ldr	r3, [r2, r3]
 800305c:	221f      	movs	r2, #31
 800305e:	4013      	ands	r3, r2
 8003060:	40dc      	lsrs	r4, r3
 8003062:	0023      	movs	r3, r4
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	bdb0      	pop	{r4, r5, r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	08006d1c 	.word	0x08006d1c

08003070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003078:	2313      	movs	r3, #19
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003080:	2312      	movs	r3, #18
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	029b      	lsls	r3, r3, #10
 8003090:	4013      	ands	r3, r2
 8003092:	d100      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003094:	e0a3      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	2011      	movs	r0, #17
 8003098:	183b      	adds	r3, r7, r0
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b86      	ldr	r3, [pc, #536]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	055b      	lsls	r3, r3, #21
 80030a6:	4013      	ands	r3, r2
 80030a8:	d110      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b83      	ldr	r3, [pc, #524]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030ae:	4b82      	ldr	r3, [pc, #520]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	0549      	lsls	r1, r1, #21
 80030b4:	430a      	orrs	r2, r1
 80030b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80030b8:	4b7f      	ldr	r3, [pc, #508]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	055b      	lsls	r3, r3, #21
 80030c0:	4013      	ands	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	183b      	adds	r3, r7, r0
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030cc:	4b7b      	ldr	r3, [pc, #492]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b7a      	ldr	r3, [pc, #488]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	0049      	lsls	r1, r1, #1
 80030d6:	430a      	orrs	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030da:	f7fe ff37 	bl	8001f4c <HAL_GetTick>
 80030de:	0003      	movs	r3, r0
 80030e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030e2:	e00b      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e4:	f7fe ff32 	bl	8001f4c <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d904      	bls.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80030f2:	2313      	movs	r3, #19
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	2203      	movs	r2, #3
 80030f8:	701a      	strb	r2, [r3, #0]
        break;
 80030fa:	e005      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030fc:	4b6f      	ldr	r3, [pc, #444]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4013      	ands	r3, r2
 8003106:	d0ed      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003108:	2313      	movs	r3, #19
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d154      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003112:	4b69      	ldr	r3, [pc, #420]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003114:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003116:	23c0      	movs	r3, #192	; 0xc0
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4013      	ands	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d019      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	429a      	cmp	r2, r3
 800312c:	d014      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800312e:	4b62      	ldr	r3, [pc, #392]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	4a63      	ldr	r2, [pc, #396]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003134:	4013      	ands	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003138:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800313a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800313c:	4b5e      	ldr	r3, [pc, #376]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	0249      	lsls	r1, r1, #9
 8003142:	430a      	orrs	r2, r1
 8003144:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003146:	4b5c      	ldr	r3, [pc, #368]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003148:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800314a:	4b5b      	ldr	r3, [pc, #364]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800314c:	495d      	ldr	r1, [pc, #372]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800314e:	400a      	ands	r2, r1
 8003150:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003152:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2201      	movs	r2, #1
 800315c:	4013      	ands	r3, r2
 800315e:	d016      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe fef4 	bl	8001f4c <HAL_GetTick>
 8003164:	0003      	movs	r3, r0
 8003166:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003168:	e00c      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fe feef 	bl	8001f4c <HAL_GetTick>
 800316e:	0002      	movs	r2, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	4a54      	ldr	r2, [pc, #336]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d904      	bls.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800317a:	2313      	movs	r3, #19
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	2203      	movs	r2, #3
 8003180:	701a      	strb	r2, [r3, #0]
            break;
 8003182:	e004      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003184:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	2202      	movs	r2, #2
 800318a:	4013      	ands	r3, r2
 800318c:	d0ed      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800318e:	2313      	movs	r3, #19
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003198:	4b47      	ldr	r3, [pc, #284]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	4a48      	ldr	r2, [pc, #288]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800319e:	4013      	ands	r3, r2
 80031a0:	0019      	movs	r1, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	4b44      	ldr	r3, [pc, #272]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a8:	430a      	orrs	r2, r1
 80031aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80031ac:	e00c      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031ae:	2312      	movs	r3, #18
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2213      	movs	r2, #19
 80031b4:	18ba      	adds	r2, r7, r2
 80031b6:	7812      	ldrb	r2, [r2, #0]
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e005      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	2312      	movs	r3, #18
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2213      	movs	r2, #19
 80031c2:	18ba      	adds	r2, r7, r2
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031c8:	2311      	movs	r3, #17
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d6:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031d8:	493c      	ldr	r1, [pc, #240]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80031da:	400a      	ands	r2, r1
 80031dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2201      	movs	r2, #1
 80031e4:	4013      	ands	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031e8:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	2203      	movs	r2, #3
 80031ee:	4393      	bics	r3, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031f8:	430a      	orrs	r2, r1
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2202      	movs	r2, #2
 8003202:	4013      	ands	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003206:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	220c      	movs	r2, #12
 800320c:	4393      	bics	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003216:	430a      	orrs	r2, r1
 8003218:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2220      	movs	r2, #32
 8003220:	4013      	ands	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003224:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322a:	4013      	ands	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003234:	430a      	orrs	r2, r1
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	01db      	lsls	r3, r3, #7
 8003240:	4013      	ands	r3, r2
 8003242:	d015      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003244:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	0899      	lsrs	r1, r3, #2
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003252:	430a      	orrs	r2, r1
 8003254:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	05db      	lsls	r3, r3, #23
 800325e:	429a      	cmp	r2, r3
 8003260:	d106      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003268:	2180      	movs	r1, #128	; 0x80
 800326a:	0249      	lsls	r1, r1, #9
 800326c:	430a      	orrs	r2, r1
 800326e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	4013      	ands	r3, r2
 800327a:	d016      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800328c:	430a      	orrs	r2, r1
 800328e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	01db      	lsls	r3, r3, #7
 8003298:	429a      	cmp	r2, r3
 800329a:	d106      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032a2:	2180      	movs	r1, #128	; 0x80
 80032a4:	0249      	lsls	r1, r1, #9
 80032a6:	430a      	orrs	r2, r1
 80032a8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80032aa:	2312      	movs	r3, #18
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	781b      	ldrb	r3, [r3, #0]
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b006      	add	sp, #24
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40007000 	.word	0x40007000
 80032c0:	fffffcff 	.word	0xfffffcff
 80032c4:	fffeffff 	.word	0xfffeffff
 80032c8:	00001388 	.word	0x00001388
 80032cc:	efffffff 	.word	0xefffffff
 80032d0:	ffffcfff 	.word	0xffffcfff
 80032d4:	ffff3fff 	.word	0xffff3fff

080032d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032e0:	230f      	movs	r3, #15
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d100      	bne.n	80032f0 <HAL_RTC_Init+0x18>
 80032ee:	e080      	b.n	80033f2 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2229      	movs	r2, #41	; 0x29
 80032f4:	5c9b      	ldrb	r3, [r3, r2]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2228      	movs	r2, #40	; 0x28
 8003300:	2100      	movs	r1, #0
 8003302:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2288      	movs	r2, #136	; 0x88
 8003308:	0212      	lsls	r2, r2, #8
 800330a:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	0018      	movs	r0, r3
 8003310:	f7fe f990 	bl	8001634 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2229      	movs	r2, #41	; 0x29
 8003318:	2102      	movs	r1, #2
 800331a:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	22ca      	movs	r2, #202	; 0xca
 8003322:	625a      	str	r2, [r3, #36]	; 0x24
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2253      	movs	r2, #83	; 0x53
 800332a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800332c:	250f      	movs	r5, #15
 800332e:	197c      	adds	r4, r7, r5
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 fa71 	bl	800381a <RTC_EnterInitMode>
 8003338:	0003      	movs	r3, r0
 800333a:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 800333c:	0028      	movs	r0, r5
 800333e:	183b      	adds	r3, r7, r0
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d148      	bne.n	80033d8 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	492b      	ldr	r1, [pc, #172]	; (8003400 <HAL_RTC_Init+0x128>)
 8003352:	400a      	ands	r2, r1
 8003354:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6999      	ldr	r1, [r3, #24]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6912      	ldr	r2, [r2, #16]
 800337c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6919      	ldr	r1, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	041a      	lsls	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003392:	0005      	movs	r5, r0
 8003394:	183c      	adds	r4, r7, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	0018      	movs	r0, r3
 800339a:	f000 fa81 	bl	80038a0 <RTC_ExitInitMode>
 800339e:	0003      	movs	r3, r0
 80033a0:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80033a2:	197b      	adds	r3, r7, r5
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d116      	bne.n	80033d8 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	00d2      	lsls	r2, r2, #3
 80033b6:	08d2      	lsrs	r2, r2, #3
 80033b8:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6999      	ldr	r1, [r3, #24]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	22ff      	movs	r2, #255	; 0xff
 80033de:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80033e0:	230f      	movs	r3, #15
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2229      	movs	r2, #41	; 0x29
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80033f2:	230f      	movs	r3, #15
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	781b      	ldrb	r3, [r3, #0]
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b004      	add	sp, #16
 80033fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003400:	fb8fffbf 	.word	0xfb8fffbf

08003404 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003404:	b5b0      	push	{r4, r5, r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2228      	movs	r2, #40	; 0x28
 8003414:	5c9b      	ldrb	r3, [r3, r2]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_RTC_SetTime+0x1a>
 800341a:	2302      	movs	r3, #2
 800341c:	e092      	b.n	8003544 <HAL_RTC_SetTime+0x140>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2228      	movs	r2, #40	; 0x28
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2229      	movs	r2, #41	; 0x29
 800342a:	2102      	movs	r1, #2
 800342c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	22ca      	movs	r2, #202	; 0xca
 8003434:	625a      	str	r2, [r3, #36]	; 0x24
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2253      	movs	r2, #83	; 0x53
 800343c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800343e:	2513      	movs	r5, #19
 8003440:	197c      	adds	r4, r7, r5
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	0018      	movs	r0, r3
 8003446:	f000 f9e8 	bl	800381a <RTC_EnterInitMode>
 800344a:	0003      	movs	r3, r0
 800344c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800344e:	197b      	adds	r3, r7, r5
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d162      	bne.n	800351c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d125      	bne.n	80034a8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2240      	movs	r2, #64	; 0x40
 8003464:	4013      	ands	r3, r2
 8003466:	d102      	bne.n	800346e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2200      	movs	r2, #0
 800346c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	0018      	movs	r0, r3
 8003474:	f000 fa58 	bl	8003928 <RTC_ByteToBcd2>
 8003478:	0003      	movs	r3, r0
 800347a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	785b      	ldrb	r3, [r3, #1]
 8003480:	0018      	movs	r0, r3
 8003482:	f000 fa51 	bl	8003928 <RTC_ByteToBcd2>
 8003486:	0003      	movs	r3, r0
 8003488:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800348a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	789b      	ldrb	r3, [r3, #2]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 fa49 	bl	8003928 <RTC_ByteToBcd2>
 8003496:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003498:	0022      	movs	r2, r4
 800349a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	78db      	ldrb	r3, [r3, #3]
 80034a0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e017      	b.n	80034d8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	4013      	ands	r3, r2
 80034b2:	d102      	bne.n	80034ba <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2200      	movs	r2, #0
 80034b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	785b      	ldrb	r3, [r3, #1]
 80034c4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034c6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034cc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	78db      	ldrb	r3, [r3, #3]
 80034d2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	491b      	ldr	r1, [pc, #108]	; (800354c <HAL_RTC_SetTime+0x148>)
 80034e0:	400a      	ands	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4918      	ldr	r1, [pc, #96]	; (8003550 <HAL_RTC_SetTime+0x14c>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6999      	ldr	r1, [r3, #24]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	431a      	orrs	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800350c:	2313      	movs	r3, #19
 800350e:	18fc      	adds	r4, r7, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	0018      	movs	r0, r3
 8003514:	f000 f9c4 	bl	80038a0 <RTC_ExitInitMode>
 8003518:	0003      	movs	r3, r0
 800351a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	22ff      	movs	r2, #255	; 0xff
 8003522:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003524:	2313      	movs	r3, #19
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2229      	movs	r2, #41	; 0x29
 8003532:	2101      	movs	r1, #1
 8003534:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2228      	movs	r2, #40	; 0x28
 800353a:	2100      	movs	r1, #0
 800353c:	5499      	strb	r1, [r3, r2]

  return status;
 800353e:	2313      	movs	r3, #19
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	781b      	ldrb	r3, [r3, #0]
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b006      	add	sp, #24
 800354a:	bdb0      	pop	{r4, r5, r7, pc}
 800354c:	007f7f7f 	.word	0x007f7f7f
 8003550:	fffbffff 	.word	0xfffbffff

08003554 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	045b      	lsls	r3, r3, #17
 8003572:	0c5a      	lsrs	r2, r3, #17
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a22      	ldr	r2, [pc, #136]	; (8003608 <HAL_RTC_GetTime+0xb4>)
 8003580:	4013      	ands	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	b2db      	uxtb	r3, r3
 800358a:	223f      	movs	r2, #63	; 0x3f
 800358c:	4013      	ands	r3, r2
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	b2db      	uxtb	r3, r3
 800359a:	227f      	movs	r2, #127	; 0x7f
 800359c:	4013      	ands	r3, r2
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	227f      	movs	r2, #127	; 0x7f
 80035aa:	4013      	ands	r3, r2
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	0d9b      	lsrs	r3, r3, #22
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2201      	movs	r2, #1
 80035ba:	4013      	ands	r3, r2
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d11a      	bne.n	80035fe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 f9d3 	bl	8003978 <RTC_Bcd2ToByte>
 80035d2:	0003      	movs	r3, r0
 80035d4:	001a      	movs	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	785b      	ldrb	r3, [r3, #1]
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 f9ca 	bl	8003978 <RTC_Bcd2ToByte>
 80035e4:	0003      	movs	r3, r0
 80035e6:	001a      	movs	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	789b      	ldrb	r3, [r3, #2]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 f9c1 	bl	8003978 <RTC_Bcd2ToByte>
 80035f6:	0003      	movs	r3, r0
 80035f8:	001a      	movs	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b006      	add	sp, #24
 8003606:	bd80      	pop	{r7, pc}
 8003608:	007f7f7f 	.word	0x007f7f7f

0800360c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800360c:	b5b0      	push	{r4, r5, r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2228      	movs	r2, #40	; 0x28
 800361c:	5c9b      	ldrb	r3, [r3, r2]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_RTC_SetDate+0x1a>
 8003622:	2302      	movs	r3, #2
 8003624:	e07e      	b.n	8003724 <HAL_RTC_SetDate+0x118>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2228      	movs	r2, #40	; 0x28
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2229      	movs	r2, #41	; 0x29
 8003632:	2102      	movs	r1, #2
 8003634:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10e      	bne.n	800365a <HAL_RTC_SetDate+0x4e>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	785b      	ldrb	r3, [r3, #1]
 8003640:	001a      	movs	r2, r3
 8003642:	2310      	movs	r3, #16
 8003644:	4013      	ands	r3, r2
 8003646:	d008      	beq.n	800365a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	2210      	movs	r2, #16
 800364e:	4393      	bics	r3, r2
 8003650:	b2db      	uxtb	r3, r3
 8003652:	330a      	adds	r3, #10
 8003654:	b2da      	uxtb	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d11c      	bne.n	800369a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	78db      	ldrb	r3, [r3, #3]
 8003664:	0018      	movs	r0, r3
 8003666:	f000 f95f 	bl	8003928 <RTC_ByteToBcd2>
 800366a:	0003      	movs	r3, r0
 800366c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	785b      	ldrb	r3, [r3, #1]
 8003672:	0018      	movs	r0, r3
 8003674:	f000 f958 	bl	8003928 <RTC_ByteToBcd2>
 8003678:	0003      	movs	r3, r0
 800367a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800367c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	789b      	ldrb	r3, [r3, #2]
 8003682:	0018      	movs	r0, r3
 8003684:	f000 f950 	bl	8003928 <RTC_ByteToBcd2>
 8003688:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800368a:	0022      	movs	r2, r4
 800368c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	e00e      	b.n	80036b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	78db      	ldrb	r3, [r3, #3]
 800369e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80036a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80036ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	22ca      	movs	r2, #202	; 0xca
 80036be:	625a      	str	r2, [r3, #36]	; 0x24
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2253      	movs	r2, #83	; 0x53
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036c8:	2513      	movs	r5, #19
 80036ca:	197c      	adds	r4, r7, r5
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f000 f8a3 	bl	800381a <RTC_EnterInitMode>
 80036d4:	0003      	movs	r3, r0
 80036d6:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80036d8:	0028      	movs	r0, r5
 80036da:	183b      	adds	r3, r7, r0
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10c      	bne.n	80036fc <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4910      	ldr	r1, [pc, #64]	; (800372c <HAL_RTC_SetDate+0x120>)
 80036ea:	400a      	ands	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80036ee:	183c      	adds	r4, r7, r0
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 f8d4 	bl	80038a0 <RTC_ExitInitMode>
 80036f8:	0003      	movs	r3, r0
 80036fa:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	22ff      	movs	r2, #255	; 0xff
 8003702:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003704:	2313      	movs	r3, #19
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2229      	movs	r2, #41	; 0x29
 8003712:	2101      	movs	r1, #1
 8003714:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2228      	movs	r2, #40	; 0x28
 800371a:	2100      	movs	r1, #0
 800371c:	5499      	strb	r1, [r3, r2]

  return status;
 800371e:	2313      	movs	r3, #19
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	781b      	ldrb	r3, [r3, #0]
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b006      	add	sp, #24
 800372a:	bdb0      	pop	{r4, r5, r7, pc}
 800372c:	00ffff3f 	.word	0x00ffff3f

08003730 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <HAL_RTC_GetDate+0x98>)
 8003744:	4013      	ands	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	0c1b      	lsrs	r3, r3, #16
 800374c:	b2da      	uxtb	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	b2db      	uxtb	r3, r3
 8003758:	221f      	movs	r2, #31
 800375a:	4013      	ands	r3, r2
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	223f      	movs	r2, #63	; 0x3f
 8003768:	4013      	ands	r3, r2
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	0b5b      	lsrs	r3, r3, #13
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2207      	movs	r2, #7
 8003778:	4013      	ands	r3, r2
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d11a      	bne.n	80037bc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	78db      	ldrb	r3, [r3, #3]
 800378a:	0018      	movs	r0, r3
 800378c:	f000 f8f4 	bl	8003978 <RTC_Bcd2ToByte>
 8003790:	0003      	movs	r3, r0
 8003792:	001a      	movs	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	785b      	ldrb	r3, [r3, #1]
 800379c:	0018      	movs	r0, r3
 800379e:	f000 f8eb 	bl	8003978 <RTC_Bcd2ToByte>
 80037a2:	0003      	movs	r3, r0
 80037a4:	001a      	movs	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	789b      	ldrb	r3, [r3, #2]
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 f8e2 	bl	8003978 <RTC_Bcd2ToByte>
 80037b4:	0003      	movs	r3, r0
 80037b6:	001a      	movs	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b006      	add	sp, #24
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	00ffff3f 	.word	0x00ffff3f

080037cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	21a0      	movs	r1, #160	; 0xa0
 80037e0:	438a      	bics	r2, r1
 80037e2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80037e4:	f7fe fbb2 	bl	8001f4c <HAL_GetTick>
 80037e8:	0003      	movs	r3, r0
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80037ec:	e00a      	b.n	8003804 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037ee:	f7fe fbad 	bl	8001f4c <HAL_GetTick>
 80037f2:	0002      	movs	r2, r0
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1ad2      	subs	r2, r2, r3
 80037f8:	23fa      	movs	r3, #250	; 0xfa
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d901      	bls.n	8003804 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e006      	b.n	8003812 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	4013      	ands	r3, r2
 800380e:	d0ee      	beq.n	80037ee <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b004      	add	sp, #16
 8003818:	bd80      	pop	{r7, pc}

0800381a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003822:	230f      	movs	r3, #15
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2240      	movs	r2, #64	; 0x40
 8003832:	4013      	ands	r3, r2
 8003834:	d12c      	bne.n	8003890 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	430a      	orrs	r2, r1
 8003844:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003846:	f7fe fb81 	bl	8001f4c <HAL_GetTick>
 800384a:	0003      	movs	r3, r0
 800384c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800384e:	e014      	b.n	800387a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003850:	f7fe fb7c 	bl	8001f4c <HAL_GetTick>
 8003854:	0002      	movs	r2, r0
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	1ad2      	subs	r2, r2, r3
 800385a:	200f      	movs	r0, #15
 800385c:	183b      	adds	r3, r7, r0
 800385e:	1839      	adds	r1, r7, r0
 8003860:	7809      	ldrb	r1, [r1, #0]
 8003862:	7019      	strb	r1, [r3, #0]
 8003864:	23fa      	movs	r3, #250	; 0xfa
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d906      	bls.n	800387a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800386c:	183b      	adds	r3, r7, r0
 800386e:	2203      	movs	r2, #3
 8003870:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2229      	movs	r2, #41	; 0x29
 8003876:	2103      	movs	r1, #3
 8003878:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2240      	movs	r2, #64	; 0x40
 8003882:	4013      	ands	r3, r2
 8003884:	d104      	bne.n	8003890 <RTC_EnterInitMode+0x76>
 8003886:	230f      	movs	r3, #15
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d1df      	bne.n	8003850 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003890:	230f      	movs	r3, #15
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	781b      	ldrb	r3, [r3, #0]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b004      	add	sp, #16
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a8:	240f      	movs	r4, #15
 80038aa:	193b      	adds	r3, r7, r4
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80038b0:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <RTC_ExitInitMode+0x84>)
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <RTC_ExitInitMode+0x84>)
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	438a      	bics	r2, r1
 80038ba:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <RTC_ExitInitMode+0x84>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2220      	movs	r2, #32
 80038c2:	4013      	ands	r3, r2
 80038c4:	d10d      	bne.n	80038e2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7ff ff7f 	bl	80037cc <HAL_RTC_WaitForSynchro>
 80038ce:	1e03      	subs	r3, r0, #0
 80038d0:	d021      	beq.n	8003916 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2229      	movs	r2, #41	; 0x29
 80038d6:	2103      	movs	r1, #3
 80038d8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80038da:	193b      	adds	r3, r7, r4
 80038dc:	2203      	movs	r2, #3
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	e019      	b.n	8003916 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <RTC_ExitInitMode+0x84>)
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <RTC_ExitInitMode+0x84>)
 80038e8:	2120      	movs	r1, #32
 80038ea:	438a      	bics	r2, r1
 80038ec:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7ff ff6b 	bl	80037cc <HAL_RTC_WaitForSynchro>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d007      	beq.n	800390a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2229      	movs	r2, #41	; 0x29
 80038fe:	2103      	movs	r1, #3
 8003900:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003902:	230f      	movs	r3, #15
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	2203      	movs	r2, #3
 8003908:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <RTC_ExitInitMode+0x84>)
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <RTC_ExitInitMode+0x84>)
 8003910:	2120      	movs	r1, #32
 8003912:	430a      	orrs	r2, r1
 8003914:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003916:	230f      	movs	r3, #15
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	781b      	ldrb	r3, [r3, #0]
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b005      	add	sp, #20
 8003922:	bd90      	pop	{r4, r7, pc}
 8003924:	40002800 	.word	0x40002800

08003928 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	0002      	movs	r2, r0
 8003930:	1dfb      	adds	r3, r7, #7
 8003932:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003938:	230b      	movs	r3, #11
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	1dfa      	adds	r2, r7, #7
 800393e:	7812      	ldrb	r2, [r2, #0]
 8003940:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003942:	e008      	b.n	8003956 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3301      	adds	r3, #1
 8003948:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800394a:	220b      	movs	r2, #11
 800394c:	18bb      	adds	r3, r7, r2
 800394e:	18ba      	adds	r2, r7, r2
 8003950:	7812      	ldrb	r2, [r2, #0]
 8003952:	3a0a      	subs	r2, #10
 8003954:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003956:	210b      	movs	r1, #11
 8003958:	187b      	adds	r3, r7, r1
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b09      	cmp	r3, #9
 800395e:	d8f1      	bhi.n	8003944 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	b2da      	uxtb	r2, r3
 8003968:	187b      	adds	r3, r7, r1
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	4313      	orrs	r3, r2
 800396e:	b2db      	uxtb	r3, r3
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b004      	add	sp, #16
 8003976:	bd80      	pop	{r7, pc}

08003978 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	0002      	movs	r2, r0
 8003980:	1dfb      	adds	r3, r7, #7
 8003982:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003984:	1dfb      	adds	r3, r7, #7
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	b2db      	uxtb	r3, r3
 800398c:	001a      	movs	r2, r3
 800398e:	0013      	movs	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	189b      	adds	r3, r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	1dfb      	adds	r3, r7, #7
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	210f      	movs	r1, #15
 80039a2:	400b      	ands	r3, r1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	18d3      	adds	r3, r2, r3
 80039a8:	b2db      	uxtb	r3, r3
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b004      	add	sp, #16
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef* hrtc)
{
 80039b2:	b5b0      	push	{r4, r5, r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2228      	movs	r2, #40	; 0x28
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_RTCEx_SetRefClock+0x16>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e03f      	b.n	8003a48 <HAL_RTCEx_SetRefClock+0x96>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2228      	movs	r2, #40	; 0x28
 80039cc:	2101      	movs	r1, #1
 80039ce:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2229      	movs	r2, #41	; 0x29
 80039d4:	2102      	movs	r1, #2
 80039d6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	22ca      	movs	r2, #202	; 0xca
 80039de:	625a      	str	r2, [r3, #36]	; 0x24
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2253      	movs	r2, #83	; 0x53
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80039e8:	250f      	movs	r5, #15
 80039ea:	197c      	adds	r4, r7, r5
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7ff ff13 	bl	800381a <RTC_EnterInitMode>
 80039f4:	0003      	movs	r3, r0
 80039f6:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80039f8:	0028      	movs	r0, r5
 80039fa:	183b      	adds	r3, r7, r0
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10e      	bne.n	8003a20 <HAL_RTCEx_SetRefClock+0x6e>
  {
    /* Enable clockref detection */
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2110      	movs	r1, #16
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a12:	183c      	adds	r4, r7, r0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7ff ff42 	bl	80038a0 <RTC_ExitInitMode>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	22ff      	movs	r2, #255	; 0xff
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003a28:	230f      	movs	r3, #15
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <HAL_RTCEx_SetRefClock+0x88>
  {
  hrtc->State = HAL_RTC_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2229      	movs	r2, #41	; 0x29
 8003a36:	2101      	movs	r1, #1
 8003a38:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2228      	movs	r2, #40	; 0x28
 8003a3e:	2100      	movs	r1, #0
 8003a40:	5499      	strb	r1, [r3, r2]

  return status;
 8003a42:	230f      	movs	r3, #15
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	781b      	ldrb	r3, [r3, #0]
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b004      	add	sp, #16
 8003a4e:	bdb0      	pop	{r4, r5, r7, pc}

08003a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e04a      	b.n	8003af8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	223d      	movs	r2, #61	; 0x3d
 8003a66:	5c9b      	ldrb	r3, [r3, r2]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d107      	bne.n	8003a7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	223c      	movs	r2, #60	; 0x3c
 8003a72:	2100      	movs	r1, #0
 8003a74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7fd fe19 	bl	80016b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	223d      	movs	r2, #61	; 0x3d
 8003a82:	2102      	movs	r1, #2
 8003a84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	0019      	movs	r1, r3
 8003a90:	0010      	movs	r0, r2
 8003a92:	f000 fab3 	bl	8003ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2248      	movs	r2, #72	; 0x48
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	223e      	movs	r2, #62	; 0x3e
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	5499      	strb	r1, [r3, r2]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	223f      	movs	r2, #63	; 0x3f
 8003aaa:	2101      	movs	r1, #1
 8003aac:	5499      	strb	r1, [r3, r2]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2240      	movs	r2, #64	; 0x40
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	5499      	strb	r1, [r3, r2]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2241      	movs	r2, #65	; 0x41
 8003aba:	2101      	movs	r1, #1
 8003abc:	5499      	strb	r1, [r3, r2]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2242      	movs	r2, #66	; 0x42
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	5499      	strb	r1, [r3, r2]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2243      	movs	r2, #67	; 0x43
 8003aca:	2101      	movs	r1, #1
 8003acc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2244      	movs	r2, #68	; 0x44
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	5499      	strb	r1, [r3, r2]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2245      	movs	r2, #69	; 0x45
 8003ada:	2101      	movs	r1, #1
 8003adc:	5499      	strb	r1, [r3, r2]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2246      	movs	r2, #70	; 0x46
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	5499      	strb	r1, [r3, r2]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2247      	movs	r2, #71	; 0x47
 8003aea:	2101      	movs	r1, #1
 8003aec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	223d      	movs	r2, #61	; 0x3d
 8003af2:	2101      	movs	r1, #1
 8003af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	0018      	movs	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b002      	add	sp, #8
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	223d      	movs	r2, #61	; 0x3d
 8003b0c:	5c9b      	ldrb	r3, [r3, r2]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d001      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e03c      	b.n	8003b92 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	223d      	movs	r2, #61	; 0x3d
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <HAL_TIM_Base_Start_IT+0x9c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_TIM_Base_Start_IT+0x4e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_TIM_Base_Start_IT+0x4e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a16      	ldr	r2, [pc, #88]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d116      	bne.n	8003b7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xa8>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b06      	cmp	r3, #6
 8003b5e:	d016      	beq.n	8003b8e <HAL_TIM_Base_Start_IT+0x8e>
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	025b      	lsls	r3, r3, #9
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d011      	beq.n	8003b8e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2101      	movs	r1, #1
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	e008      	b.n	8003b8e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2101      	movs	r1, #1
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e000      	b.n	8003b90 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b004      	add	sp, #16
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	00010007 	.word	0x00010007

08003bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d124      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d11d      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	4252      	negs	r2, r2
 8003bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2203      	movs	r2, #3
 8003be8:	4013      	ands	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f000 f9ec 	bl	8003fcc <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e007      	b.n	8003c06 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 f9df 	bl	8003fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 f9eb 	bl	8003fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2204      	movs	r2, #4
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d125      	bne.n	8003c66 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2204      	movs	r2, #4
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d11e      	bne.n	8003c66 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2205      	movs	r2, #5
 8003c2e:	4252      	negs	r2, r2
 8003c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	23c0      	movs	r3, #192	; 0xc0
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4013      	ands	r3, r2
 8003c44:	d004      	beq.n	8003c50 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f000 f9bf 	bl	8003fcc <HAL_TIM_IC_CaptureCallback>
 8003c4e:	e007      	b.n	8003c60 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	0018      	movs	r0, r3
 8003c54:	f000 f9b2 	bl	8003fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 f9be 	bl	8003fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d124      	bne.n	8003cbe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d11d      	bne.n	8003cbe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2209      	movs	r2, #9
 8003c88:	4252      	negs	r2, r2
 8003c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	2203      	movs	r2, #3
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 f993 	bl	8003fcc <HAL_TIM_IC_CaptureCallback>
 8003ca6:	e007      	b.n	8003cb8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f000 f986 	bl	8003fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 f992 	bl	8003fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d125      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d11e      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2211      	movs	r2, #17
 8003ce0:	4252      	negs	r2, r2
 8003ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	23c0      	movs	r3, #192	; 0xc0
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d004      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f000 f966 	bl	8003fcc <HAL_TIM_IC_CaptureCallback>
 8003d00:	e007      	b.n	8003d12 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 f959 	bl	8003fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f000 f965 	bl	8003fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10f      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d108      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	4252      	negs	r2, r2
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fd f9b3 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	2280      	movs	r2, #128	; 0x80
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d10f      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	d108      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2281      	movs	r2, #129	; 0x81
 8003d68:	4252      	negs	r2, r2
 8003d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f000 fac6 	bl	8004300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	401a      	ands	r2, r3
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d10e      	bne.n	8003da6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d107      	bne.n	8003da6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1c      	ldr	r2, [pc, #112]	; (8003e0c <HAL_TIM_IRQHandler+0x260>)
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 fab5 	bl	8004310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2240      	movs	r2, #64	; 0x40
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d10f      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2240      	movs	r2, #64	; 0x40
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d108      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2241      	movs	r2, #65	; 0x41
 8003dc8:	4252      	negs	r2, r2
 8003dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f000 f90c 	bl	8003fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d10f      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d108      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2221      	movs	r2, #33	; 0x21
 8003df6:	4252      	negs	r2, r2
 8003df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f000 fa77 	bl	80042f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b002      	add	sp, #8
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	fffffeff 	.word	0xfffffeff

08003e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1a:	230f      	movs	r3, #15
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	223c      	movs	r2, #60	; 0x3c
 8003e26:	5c9b      	ldrb	r3, [r3, r2]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIM_ConfigClockSource+0x20>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e0bc      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x19a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	223c      	movs	r2, #60	; 0x3c
 8003e34:	2101      	movs	r1, #1
 8003e36:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	223d      	movs	r2, #61	; 0x3d
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4a5a      	ldr	r2, [pc, #360]	; (8003fb4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4a59      	ldr	r2, [pc, #356]	; (8003fb8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2280      	movs	r2, #128	; 0x80
 8003e66:	0192      	lsls	r2, r2, #6
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d040      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0xde>
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	0192      	lsls	r2, r2, #6
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d900      	bls.n	8003e76 <HAL_TIM_ConfigClockSource+0x66>
 8003e74:	e088      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x178>
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	0152      	lsls	r2, r2, #5
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d100      	bne.n	8003e80 <HAL_TIM_ConfigClockSource+0x70>
 8003e7e:	e088      	b.n	8003f92 <HAL_TIM_ConfigClockSource+0x182>
 8003e80:	2280      	movs	r2, #128	; 0x80
 8003e82:	0152      	lsls	r2, r2, #5
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d900      	bls.n	8003e8a <HAL_TIM_ConfigClockSource+0x7a>
 8003e88:	e07e      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x178>
 8003e8a:	2b70      	cmp	r3, #112	; 0x70
 8003e8c:	d018      	beq.n	8003ec0 <HAL_TIM_ConfigClockSource+0xb0>
 8003e8e:	d900      	bls.n	8003e92 <HAL_TIM_ConfigClockSource+0x82>
 8003e90:	e07a      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x178>
 8003e92:	2b60      	cmp	r3, #96	; 0x60
 8003e94:	d04f      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x126>
 8003e96:	d900      	bls.n	8003e9a <HAL_TIM_ConfigClockSource+0x8a>
 8003e98:	e076      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x178>
 8003e9a:	2b50      	cmp	r3, #80	; 0x50
 8003e9c:	d03b      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x106>
 8003e9e:	d900      	bls.n	8003ea2 <HAL_TIM_ConfigClockSource+0x92>
 8003ea0:	e072      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x178>
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d057      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x146>
 8003ea6:	d900      	bls.n	8003eaa <HAL_TIM_ConfigClockSource+0x9a>
 8003ea8:	e06e      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x178>
 8003eaa:	2b30      	cmp	r3, #48	; 0x30
 8003eac:	d063      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x166>
 8003eae:	d86b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x178>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d060      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x166>
 8003eb4:	d868      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x178>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d05d      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x166>
 8003eba:	2b10      	cmp	r3, #16
 8003ebc:	d05b      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x166>
 8003ebe:	e063      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	6899      	ldr	r1, [r3, #8]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f000 f986 	bl	80041e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2277      	movs	r2, #119	; 0x77
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	609a      	str	r2, [r3, #8]
      break;
 8003eec:	e052      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6899      	ldr	r1, [r3, #8]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f000 f96f 	bl	80041e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2180      	movs	r1, #128	; 0x80
 8003f0e:	01c9      	lsls	r1, r1, #7
 8003f10:	430a      	orrs	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
      break;
 8003f14:	e03e      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	001a      	movs	r2, r3
 8003f24:	f000 f8e0 	bl	80040e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2150      	movs	r1, #80	; 0x50
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f000 f93a 	bl	80041a8 <TIM_ITRx_SetConfig>
      break;
 8003f34:	e02e      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	001a      	movs	r2, r3
 8003f44:	f000 f8fe 	bl	8004144 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2160      	movs	r1, #96	; 0x60
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 f92a 	bl	80041a8 <TIM_ITRx_SetConfig>
      break;
 8003f54:	e01e      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	001a      	movs	r2, r3
 8003f64:	f000 f8c0 	bl	80040e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2140      	movs	r1, #64	; 0x40
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f000 f91a 	bl	80041a8 <TIM_ITRx_SetConfig>
      break;
 8003f74:	e00e      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	0019      	movs	r1, r3
 8003f80:	0010      	movs	r0, r2
 8003f82:	f000 f911 	bl	80041a8 <TIM_ITRx_SetConfig>
      break;
 8003f86:	e005      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003f88:	230f      	movs	r3, #15
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
      break;
 8003f90:	e000      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003f92:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	223d      	movs	r2, #61	; 0x3d
 8003f98:	2101      	movs	r1, #1
 8003f9a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	223c      	movs	r2, #60	; 0x3c
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	5499      	strb	r1, [r3, r2]

  return status;
 8003fa4:	230f      	movs	r3, #15
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	781b      	ldrb	r3, [r3, #0]
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b004      	add	sp, #16
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	ffceff88 	.word	0xffceff88
 8003fb8:	ffff00ff 	.word	0xffff00ff

08003fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b002      	add	sp, #8
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b002      	add	sp, #8
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <TIM_Base_SetConfig+0xd0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <TIM_Base_SetConfig+0x20>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a2e      	ldr	r2, [pc, #184]	; (80040d0 <TIM_Base_SetConfig+0xd4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2270      	movs	r2, #112	; 0x70
 8004020:	4393      	bics	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a26      	ldr	r2, [pc, #152]	; (80040cc <TIM_Base_SetConfig+0xd0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <TIM_Base_SetConfig+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <TIM_Base_SetConfig+0xd4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00f      	beq.n	800405e <TIM_Base_SetConfig+0x62>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a24      	ldr	r2, [pc, #144]	; (80040d4 <TIM_Base_SetConfig+0xd8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00b      	beq.n	800405e <TIM_Base_SetConfig+0x62>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a23      	ldr	r2, [pc, #140]	; (80040d8 <TIM_Base_SetConfig+0xdc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <TIM_Base_SetConfig+0x62>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a22      	ldr	r2, [pc, #136]	; (80040dc <TIM_Base_SetConfig+0xe0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d003      	beq.n	800405e <TIM_Base_SetConfig+0x62>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <TIM_Base_SetConfig+0xe4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d108      	bne.n	8004070 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <TIM_Base_SetConfig+0xe8>)
 8004062:	4013      	ands	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2280      	movs	r2, #128	; 0x80
 8004074:	4393      	bics	r3, r2
 8004076:	001a      	movs	r2, r3
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a0c      	ldr	r2, [pc, #48]	; (80040cc <TIM_Base_SetConfig+0xd0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00b      	beq.n	80040b6 <TIM_Base_SetConfig+0xba>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a0d      	ldr	r2, [pc, #52]	; (80040d8 <TIM_Base_SetConfig+0xdc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d007      	beq.n	80040b6 <TIM_Base_SetConfig+0xba>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <TIM_Base_SetConfig+0xe0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d003      	beq.n	80040b6 <TIM_Base_SetConfig+0xba>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a0b      	ldr	r2, [pc, #44]	; (80040e0 <TIM_Base_SetConfig+0xe4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d103      	bne.n	80040be <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	615a      	str	r2, [r3, #20]
}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b004      	add	sp, #16
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40002000 	.word	0x40002000
 80040d8:	40014000 	.word	0x40014000
 80040dc:	40014400 	.word	0x40014400
 80040e0:	40014800 	.word	0x40014800
 80040e4:	fffffcff 	.word	0xfffffcff

080040e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	2201      	movs	r2, #1
 8004100:	4393      	bics	r3, r2
 8004102:	001a      	movs	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	22f0      	movs	r2, #240	; 0xf0
 8004112:	4393      	bics	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	220a      	movs	r2, #10
 8004124:	4393      	bics	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	621a      	str	r2, [r3, #32]
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b006      	add	sp, #24
 8004142:	bd80      	pop	{r7, pc}

08004144 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	2210      	movs	r2, #16
 8004156:	4393      	bics	r3, r2
 8004158:	001a      	movs	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	4a0d      	ldr	r2, [pc, #52]	; (80041a4 <TIM_TI2_ConfigInputStage+0x60>)
 800416e:	4013      	ands	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	031b      	lsls	r3, r3, #12
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	22a0      	movs	r2, #160	; 0xa0
 8004180:	4393      	bics	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	46bd      	mov	sp, r7
 800419e:	b006      	add	sp, #24
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	ffff0fff 	.word	0xffff0fff

080041a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a08      	ldr	r2, [pc, #32]	; (80041dc <TIM_ITRx_SetConfig+0x34>)
 80041bc:	4013      	ands	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	2207      	movs	r2, #7
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	609a      	str	r2, [r3, #8]
}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b004      	add	sp, #16
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	ffcfff8f 	.word	0xffcfff8f

080041e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	4a09      	ldr	r2, [pc, #36]	; (800421c <TIM_ETR_SetConfig+0x3c>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	021a      	lsls	r2, r3, #8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	431a      	orrs	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	609a      	str	r2, [r3, #8]
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b006      	add	sp, #24
 800421a:	bd80      	pop	{r7, pc}
 800421c:	ffff00ff 	.word	0xffff00ff

08004220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	223c      	movs	r2, #60	; 0x3c
 800422e:	5c9b      	ldrb	r3, [r3, r2]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004234:	2302      	movs	r3, #2
 8004236:	e04f      	b.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	223c      	movs	r2, #60	; 0x3c
 800423c:	2101      	movs	r1, #1
 800423e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	223d      	movs	r2, #61	; 0x3d
 8004244:	2102      	movs	r1, #2
 8004246:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a20      	ldr	r2, [pc, #128]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d108      	bne.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004266:	4013      	ands	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2270      	movs	r2, #112	; 0x70
 8004278:	4393      	bics	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a11      	ldr	r2, [pc, #68]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10c      	bne.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	4393      	bics	r3, r2
 80042b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	223d      	movs	r2, #61	; 0x3d
 80042ca:	2101      	movs	r1, #1
 80042cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	223c      	movs	r2, #60	; 0x3c
 80042d2:	2100      	movs	r1, #0
 80042d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	0018      	movs	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	b004      	add	sp, #16
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	ff0fffff 	.word	0xff0fffff
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40014000 	.word	0x40014000

080042f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b002      	add	sp, #8
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b002      	add	sp, #8
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b002      	add	sp, #8
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e046      	b.n	80043c0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2284      	movs	r2, #132	; 0x84
 8004336:	589b      	ldr	r3, [r3, r2]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2280      	movs	r2, #128	; 0x80
 8004340:	2100      	movs	r1, #0
 8004342:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0018      	movs	r0, r3
 8004348:	f7fd f9e2 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2284      	movs	r2, #132	; 0x84
 8004350:	2124      	movs	r1, #36	; 0x24
 8004352:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2101      	movs	r1, #1
 8004360:	438a      	bics	r2, r1
 8004362:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	0018      	movs	r0, r3
 8004368:	f000 fc74 	bl	8004c54 <UART_SetConfig>
 800436c:	0003      	movs	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e024      	b.n	80043c0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 fe0b 	bl	8004f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	490d      	ldr	r1, [pc, #52]	; (80043c8 <HAL_UART_Init+0xa8>)
 8004392:	400a      	ands	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	212a      	movs	r1, #42	; 0x2a
 80043a2:	438a      	bics	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2101      	movs	r1, #1
 80043b2:	430a      	orrs	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f000 fea3 	bl	8005104 <UART_CheckIdleState>
 80043be:	0003      	movs	r3, r0
}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b002      	add	sp, #8
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	ffffb7ff 	.word	0xffffb7ff

080043cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	1dbb      	adds	r3, r7, #6
 80043da:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2284      	movs	r2, #132	; 0x84
 80043e0:	589b      	ldr	r3, [r3, r2]
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d000      	beq.n	80043e8 <HAL_UART_Transmit+0x1c>
 80043e6:	e097      	b.n	8004518 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_UART_Transmit+0x2a>
 80043ee:	1dbb      	adds	r3, r7, #6
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e08f      	b.n	800451a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	2380      	movs	r3, #128	; 0x80
 8004400:	015b      	lsls	r3, r3, #5
 8004402:	429a      	cmp	r2, r3
 8004404:	d109      	bne.n	800441a <HAL_UART_Transmit+0x4e>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2201      	movs	r2, #1
 8004412:	4013      	ands	r3, r2
 8004414:	d001      	beq.n	800441a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07f      	b.n	800451a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2280      	movs	r2, #128	; 0x80
 800441e:	5c9b      	ldrb	r3, [r3, r2]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_UART_Transmit+0x5c>
 8004424:	2302      	movs	r3, #2
 8004426:	e078      	b.n	800451a <HAL_UART_Transmit+0x14e>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2280      	movs	r2, #128	; 0x80
 800442c:	2101      	movs	r1, #1
 800442e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	228c      	movs	r2, #140	; 0x8c
 8004434:	2100      	movs	r1, #0
 8004436:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2284      	movs	r2, #132	; 0x84
 800443c:	2121      	movs	r1, #33	; 0x21
 800443e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004440:	f7fd fd84 	bl	8001f4c <HAL_GetTick>
 8004444:	0003      	movs	r3, r0
 8004446:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1dba      	adds	r2, r7, #6
 800444c:	2154      	movs	r1, #84	; 0x54
 800444e:	8812      	ldrh	r2, [r2, #0]
 8004450:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1dba      	adds	r2, r7, #6
 8004456:	2156      	movs	r1, #86	; 0x56
 8004458:	8812      	ldrh	r2, [r2, #0]
 800445a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	2380      	movs	r3, #128	; 0x80
 8004462:	015b      	lsls	r3, r3, #5
 8004464:	429a      	cmp	r2, r3
 8004466:	d108      	bne.n	800447a <HAL_UART_Transmit+0xae>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d104      	bne.n	800447a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e003      	b.n	8004482 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2280      	movs	r2, #128	; 0x80
 8004486:	2100      	movs	r1, #0
 8004488:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800448a:	e02c      	b.n	80044e6 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	0013      	movs	r3, r2
 8004496:	2200      	movs	r2, #0
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	f000 fe7d 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e039      	b.n	800451a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	001a      	movs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	05d2      	lsls	r2, r2, #23
 80044b8:	0dd2      	lsrs	r2, r2, #23
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	3302      	adds	r3, #2
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	e007      	b.n	80044d4 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	781a      	ldrb	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3301      	adds	r3, #1
 80044d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2256      	movs	r2, #86	; 0x56
 80044d8:	5a9b      	ldrh	r3, [r3, r2]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b299      	uxth	r1, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2256      	movs	r2, #86	; 0x56
 80044e4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2256      	movs	r2, #86	; 0x56
 80044ea:	5a9b      	ldrh	r3, [r3, r2]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1cc      	bne.n	800448c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	0013      	movs	r3, r2
 80044fc:	2200      	movs	r2, #0
 80044fe:	2140      	movs	r1, #64	; 0x40
 8004500:	f000 fe4a 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 8004504:	1e03      	subs	r3, r0, #0
 8004506:	d001      	beq.n	800450c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e006      	b.n	800451a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2284      	movs	r2, #132	; 0x84
 8004510:	2120      	movs	r1, #32
 8004512:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	0018      	movs	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	b008      	add	sp, #32
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b088      	sub	sp, #32
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	1dbb      	adds	r3, r7, #6
 800452e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2288      	movs	r2, #136	; 0x88
 8004534:	589b      	ldr	r3, [r3, r2]
 8004536:	2b20      	cmp	r3, #32
 8004538:	d150      	bne.n	80045dc <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_UART_Receive_IT+0x26>
 8004540:	1dbb      	adds	r3, r7, #6
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e048      	b.n	80045de <HAL_UART_Receive_IT+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	015b      	lsls	r3, r3, #5
 8004554:	429a      	cmp	r2, r3
 8004556:	d109      	bne.n	800456c <HAL_UART_Receive_IT+0x4a>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2201      	movs	r2, #1
 8004564:	4013      	ands	r3, r2
 8004566:	d001      	beq.n	800456c <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e038      	b.n	80045de <HAL_UART_Receive_IT+0xbc>
      }
    }

    __HAL_LOCK(huart);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2280      	movs	r2, #128	; 0x80
 8004570:	5c9b      	ldrb	r3, [r3, r2]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_UART_Receive_IT+0x58>
 8004576:	2302      	movs	r3, #2
 8004578:	e031      	b.n	80045de <HAL_UART_Receive_IT+0xbc>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	2101      	movs	r1, #1
 8004580:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	041b      	lsls	r3, r3, #16
 8004592:	4013      	ands	r3, r2
 8004594:	d019      	beq.n	80045ca <HAL_UART_Receive_IT+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004596:	f3ef 8310 	mrs	r3, PRIMASK
 800459a:	613b      	str	r3, [r7, #16]
  return(result);
 800459c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	2301      	movs	r3, #1
 80045a2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f383 8810 	msr	PRIMASK, r3
}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2180      	movs	r1, #128	; 0x80
 80045b8:	04c9      	lsls	r1, r1, #19
 80045ba:	430a      	orrs	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	f383 8810 	msr	PRIMASK, r3
}
 80045c8:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	881a      	ldrh	r2, [r3, #0]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	0018      	movs	r0, r3
 80045d4:	f000 fea8 	bl	8005328 <UART_Start_Receive_IT>
 80045d8:	0003      	movs	r3, r0
 80045da:	e000      	b.n	80045de <HAL_UART_Receive_IT+0xbc>
  }
  else
  {
    return HAL_BUSY;
 80045dc:	2302      	movs	r3, #2
  }
}
 80045de:	0018      	movs	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b008      	add	sp, #32
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045e8:	b5b0      	push	{r4, r5, r7, lr}
 80045ea:	b0aa      	sub	sp, #168	; 0xa8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	22a4      	movs	r2, #164	; 0xa4
 80045f8:	18b9      	adds	r1, r7, r2
 80045fa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	20a0      	movs	r0, #160	; 0xa0
 8004604:	1839      	adds	r1, r7, r0
 8004606:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	249c      	movs	r4, #156	; 0x9c
 8004610:	1939      	adds	r1, r7, r4
 8004612:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004614:	0011      	movs	r1, r2
 8004616:	18bb      	adds	r3, r7, r2
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4aa0      	ldr	r2, [pc, #640]	; (800489c <HAL_UART_IRQHandler+0x2b4>)
 800461c:	4013      	ands	r3, r2
 800461e:	2298      	movs	r2, #152	; 0x98
 8004620:	18bd      	adds	r5, r7, r2
 8004622:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004624:	18bb      	adds	r3, r7, r2
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d11a      	bne.n	8004662 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800462c:	187b      	adds	r3, r7, r1
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2220      	movs	r2, #32
 8004632:	4013      	ands	r3, r2
 8004634:	d015      	beq.n	8004662 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004636:	183b      	adds	r3, r7, r0
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2220      	movs	r2, #32
 800463c:	4013      	ands	r3, r2
 800463e:	d105      	bne.n	800464c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004640:	193b      	adds	r3, r7, r4
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	055b      	lsls	r3, r3, #21
 8004648:	4013      	ands	r3, r2
 800464a:	d00a      	beq.n	8004662 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	2b00      	cmp	r3, #0
 8004652:	d100      	bne.n	8004656 <HAL_UART_IRQHandler+0x6e>
 8004654:	e2cf      	b.n	8004bf6 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	0010      	movs	r0, r2
 800465e:	4798      	blx	r3
      }
      return;
 8004660:	e2c9      	b.n	8004bf6 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004662:	2398      	movs	r3, #152	; 0x98
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d100      	bne.n	800466e <HAL_UART_IRQHandler+0x86>
 800466c:	e11e      	b.n	80048ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800466e:	239c      	movs	r3, #156	; 0x9c
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a8a      	ldr	r2, [pc, #552]	; (80048a0 <HAL_UART_IRQHandler+0x2b8>)
 8004676:	4013      	ands	r3, r2
 8004678:	d106      	bne.n	8004688 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800467a:	23a0      	movs	r3, #160	; 0xa0
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a88      	ldr	r2, [pc, #544]	; (80048a4 <HAL_UART_IRQHandler+0x2bc>)
 8004682:	4013      	ands	r3, r2
 8004684:	d100      	bne.n	8004688 <HAL_UART_IRQHandler+0xa0>
 8004686:	e111      	b.n	80048ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004688:	23a4      	movs	r3, #164	; 0xa4
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2201      	movs	r2, #1
 8004690:	4013      	ands	r3, r2
 8004692:	d012      	beq.n	80046ba <HAL_UART_IRQHandler+0xd2>
 8004694:	23a0      	movs	r3, #160	; 0xa0
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4013      	ands	r3, r2
 80046a0:	d00b      	beq.n	80046ba <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2201      	movs	r2, #1
 80046a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	228c      	movs	r2, #140	; 0x8c
 80046ae:	589b      	ldr	r3, [r3, r2]
 80046b0:	2201      	movs	r2, #1
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	218c      	movs	r1, #140	; 0x8c
 80046b8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046ba:	23a4      	movs	r3, #164	; 0xa4
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2202      	movs	r2, #2
 80046c2:	4013      	ands	r3, r2
 80046c4:	d011      	beq.n	80046ea <HAL_UART_IRQHandler+0x102>
 80046c6:	239c      	movs	r3, #156	; 0x9c
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2201      	movs	r2, #1
 80046ce:	4013      	ands	r3, r2
 80046d0:	d00b      	beq.n	80046ea <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2202      	movs	r2, #2
 80046d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	228c      	movs	r2, #140	; 0x8c
 80046de:	589b      	ldr	r3, [r3, r2]
 80046e0:	2204      	movs	r2, #4
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	218c      	movs	r1, #140	; 0x8c
 80046e8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046ea:	23a4      	movs	r3, #164	; 0xa4
 80046ec:	18fb      	adds	r3, r7, r3
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2204      	movs	r2, #4
 80046f2:	4013      	ands	r3, r2
 80046f4:	d011      	beq.n	800471a <HAL_UART_IRQHandler+0x132>
 80046f6:	239c      	movs	r3, #156	; 0x9c
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2201      	movs	r2, #1
 80046fe:	4013      	ands	r3, r2
 8004700:	d00b      	beq.n	800471a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2204      	movs	r2, #4
 8004708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	228c      	movs	r2, #140	; 0x8c
 800470e:	589b      	ldr	r3, [r3, r2]
 8004710:	2202      	movs	r2, #2
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	218c      	movs	r1, #140	; 0x8c
 8004718:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800471a:	23a4      	movs	r3, #164	; 0xa4
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2208      	movs	r2, #8
 8004722:	4013      	ands	r3, r2
 8004724:	d017      	beq.n	8004756 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004726:	23a0      	movs	r3, #160	; 0xa0
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2220      	movs	r2, #32
 800472e:	4013      	ands	r3, r2
 8004730:	d105      	bne.n	800473e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004732:	239c      	movs	r3, #156	; 0x9c
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a59      	ldr	r2, [pc, #356]	; (80048a0 <HAL_UART_IRQHandler+0x2b8>)
 800473a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800473c:	d00b      	beq.n	8004756 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2208      	movs	r2, #8
 8004744:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	228c      	movs	r2, #140	; 0x8c
 800474a:	589b      	ldr	r3, [r3, r2]
 800474c:	2208      	movs	r2, #8
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	218c      	movs	r1, #140	; 0x8c
 8004754:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004756:	23a4      	movs	r3, #164	; 0xa4
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	4013      	ands	r3, r2
 8004762:	d013      	beq.n	800478c <HAL_UART_IRQHandler+0x1a4>
 8004764:	23a0      	movs	r3, #160	; 0xa0
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	04db      	lsls	r3, r3, #19
 800476e:	4013      	ands	r3, r2
 8004770:	d00c      	beq.n	800478c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2280      	movs	r2, #128	; 0x80
 8004778:	0112      	lsls	r2, r2, #4
 800477a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	228c      	movs	r2, #140	; 0x8c
 8004780:	589b      	ldr	r3, [r3, r2]
 8004782:	2220      	movs	r2, #32
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	218c      	movs	r1, #140	; 0x8c
 800478a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	228c      	movs	r2, #140	; 0x8c
 8004790:	589b      	ldr	r3, [r3, r2]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d100      	bne.n	8004798 <HAL_UART_IRQHandler+0x1b0>
 8004796:	e230      	b.n	8004bfa <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004798:	23a4      	movs	r3, #164	; 0xa4
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2220      	movs	r2, #32
 80047a0:	4013      	ands	r3, r2
 80047a2:	d015      	beq.n	80047d0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047a4:	23a0      	movs	r3, #160	; 0xa0
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2220      	movs	r2, #32
 80047ac:	4013      	ands	r3, r2
 80047ae:	d106      	bne.n	80047be <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047b0:	239c      	movs	r3, #156	; 0x9c
 80047b2:	18fb      	adds	r3, r7, r3
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	055b      	lsls	r3, r3, #21
 80047ba:	4013      	ands	r3, r2
 80047bc:	d008      	beq.n	80047d0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	0010      	movs	r0, r2
 80047ce:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	228c      	movs	r2, #140	; 0x8c
 80047d4:	589b      	ldr	r3, [r3, r2]
 80047d6:	2194      	movs	r1, #148	; 0x94
 80047d8:	187a      	adds	r2, r7, r1
 80047da:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2240      	movs	r2, #64	; 0x40
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d004      	beq.n	80047f4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047ea:	187b      	adds	r3, r7, r1
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2228      	movs	r2, #40	; 0x28
 80047f0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047f2:	d047      	beq.n	8004884 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	0018      	movs	r0, r3
 80047f8:	f000 fec2 	bl	8005580 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2240      	movs	r2, #64	; 0x40
 8004804:	4013      	ands	r3, r2
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	d137      	bne.n	800487a <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480a:	f3ef 8310 	mrs	r3, PRIMASK
 800480e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004812:	2090      	movs	r0, #144	; 0x90
 8004814:	183a      	adds	r2, r7, r0
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	2301      	movs	r3, #1
 800481a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800481e:	f383 8810 	msr	PRIMASK, r3
}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2140      	movs	r1, #64	; 0x40
 8004830:	438a      	bics	r2, r1
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	183b      	adds	r3, r7, r0
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800483c:	f383 8810 	msr	PRIMASK, r3
}
 8004840:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d012      	beq.n	8004870 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484e:	4a16      	ldr	r2, [pc, #88]	; (80048a8 <HAL_UART_IRQHandler+0x2c0>)
 8004850:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004856:	0018      	movs	r0, r3
 8004858:	f7fd fcfc 	bl	8002254 <HAL_DMA_Abort_IT>
 800485c:	1e03      	subs	r3, r0, #0
 800485e:	d01a      	beq.n	8004896 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800486a:	0018      	movs	r0, r3
 800486c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486e:	e012      	b.n	8004896 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	0018      	movs	r0, r3
 8004874:	f000 f9da 	bl	8004c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e00d      	b.n	8004896 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f9d5 	bl	8004c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004882:	e008      	b.n	8004896 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	0018      	movs	r0, r3
 8004888:	f000 f9d0 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	228c      	movs	r2, #140	; 0x8c
 8004890:	2100      	movs	r1, #0
 8004892:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004894:	e1b1      	b.n	8004bfa <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004896:	46c0      	nop			; (mov r8, r8)
    return;
 8004898:	e1af      	b.n	8004bfa <HAL_UART_IRQHandler+0x612>
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	0000080f 	.word	0x0000080f
 80048a0:	10000001 	.word	0x10000001
 80048a4:	04000120 	.word	0x04000120
 80048a8:	0800564d 	.word	0x0800564d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d000      	beq.n	80048b6 <HAL_UART_IRQHandler+0x2ce>
 80048b4:	e135      	b.n	8004b22 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048b6:	23a4      	movs	r3, #164	; 0xa4
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2210      	movs	r2, #16
 80048be:	4013      	ands	r3, r2
 80048c0:	d100      	bne.n	80048c4 <HAL_UART_IRQHandler+0x2dc>
 80048c2:	e12e      	b.n	8004b22 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048c4:	23a0      	movs	r3, #160	; 0xa0
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2210      	movs	r2, #16
 80048cc:	4013      	ands	r3, r2
 80048ce:	d100      	bne.n	80048d2 <HAL_UART_IRQHandler+0x2ea>
 80048d0:	e127      	b.n	8004b22 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2210      	movs	r2, #16
 80048d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2240      	movs	r2, #64	; 0x40
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d000      	beq.n	80048ea <HAL_UART_IRQHandler+0x302>
 80048e8:	e09e      	b.n	8004a28 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	217e      	movs	r1, #126	; 0x7e
 80048f4:	187b      	adds	r3, r7, r1
 80048f6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d100      	bne.n	8004902 <HAL_UART_IRQHandler+0x31a>
 8004900:	e17d      	b.n	8004bfe <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	225c      	movs	r2, #92	; 0x5c
 8004906:	5a9b      	ldrh	r3, [r3, r2]
 8004908:	187a      	adds	r2, r7, r1
 800490a:	8812      	ldrh	r2, [r2, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d300      	bcc.n	8004912 <HAL_UART_IRQHandler+0x32a>
 8004910:	e175      	b.n	8004bfe <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	187a      	adds	r2, r7, r1
 8004916:	215e      	movs	r1, #94	; 0x5e
 8004918:	8812      	ldrh	r2, [r2, #0]
 800491a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2220      	movs	r2, #32
 8004926:	4013      	ands	r3, r2
 8004928:	d16f      	bne.n	8004a0a <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492a:	f3ef 8310 	mrs	r3, PRIMASK
 800492e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004932:	67bb      	str	r3, [r7, #120]	; 0x78
 8004934:	2301      	movs	r3, #1
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	f383 8810 	msr	PRIMASK, r3
}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	49b1      	ldr	r1, [pc, #708]	; (8004c10 <HAL_UART_IRQHandler+0x628>)
 800494c:	400a      	ands	r2, r1
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004952:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004956:	f383 8810 	msr	PRIMASK, r3
}
 800495a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495c:	f3ef 8310 	mrs	r3, PRIMASK
 8004960:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004964:	677b      	str	r3, [r7, #116]	; 0x74
 8004966:	2301      	movs	r3, #1
 8004968:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2101      	movs	r1, #1
 800497e:	438a      	bics	r2, r1
 8004980:	609a      	str	r2, [r3, #8]
 8004982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004984:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004994:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004996:	673b      	str	r3, [r7, #112]	; 0x70
 8004998:	2301      	movs	r3, #1
 800499a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499e:	f383 8810 	msr	PRIMASK, r3
}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2140      	movs	r1, #64	; 0x40
 80049b0:	438a      	bics	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049b6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ba:	f383 8810 	msr	PRIMASK, r3
}
 80049be:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2288      	movs	r2, #136	; 0x88
 80049c4:	2120      	movs	r1, #32
 80049c6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ce:	f3ef 8310 	mrs	r3, PRIMASK
 80049d2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80049d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049d8:	2301      	movs	r3, #1
 80049da:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049de:	f383 8810 	msr	PRIMASK, r3
}
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2110      	movs	r1, #16
 80049f0:	438a      	bics	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049fa:	f383 8810 	msr	PRIMASK, r3
}
 80049fe:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7fd fbc3 	bl	8002190 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	225c      	movs	r2, #92	; 0x5c
 8004a0e:	5a9a      	ldrh	r2, [r3, r2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	215e      	movs	r1, #94	; 0x5e
 8004a14:	5a5b      	ldrh	r3, [r3, r1]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	0011      	movs	r1, r2
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 f90b 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a26:	e0ea      	b.n	8004bfe <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	225c      	movs	r2, #92	; 0x5c
 8004a2c:	5a99      	ldrh	r1, [r3, r2]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	225e      	movs	r2, #94	; 0x5e
 8004a32:	5a9b      	ldrh	r3, [r3, r2]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	208e      	movs	r0, #142	; 0x8e
 8004a38:	183b      	adds	r3, r7, r0
 8004a3a:	1a8a      	subs	r2, r1, r2
 8004a3c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	225e      	movs	r2, #94	; 0x5e
 8004a42:	5a9b      	ldrh	r3, [r3, r2]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d100      	bne.n	8004a4c <HAL_UART_IRQHandler+0x464>
 8004a4a:	e0da      	b.n	8004c02 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8004a4c:	183b      	adds	r3, r7, r0
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d100      	bne.n	8004a56 <HAL_UART_IRQHandler+0x46e>
 8004a54:	e0d5      	b.n	8004c02 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a56:	f3ef 8310 	mrs	r3, PRIMASK
 8004a5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a5e:	2488      	movs	r4, #136	; 0x88
 8004a60:	193a      	adds	r2, r7, r4
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	2301      	movs	r3, #1
 8004a66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f383 8810 	msr	PRIMASK, r3
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4966      	ldr	r1, [pc, #408]	; (8004c14 <HAL_UART_IRQHandler+0x62c>)
 8004a7c:	400a      	ands	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	193b      	adds	r3, r7, r4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f383 8810 	msr	PRIMASK, r3
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a92:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a94:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a96:	2484      	movs	r4, #132	; 0x84
 8004a98:	193a      	adds	r2, r7, r4
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4959      	ldr	r1, [pc, #356]	; (8004c18 <HAL_UART_IRQHandler+0x630>)
 8004ab4:	400a      	ands	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	193b      	adds	r3, r7, r4
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	f383 8810 	msr	PRIMASK, r3
}
 8004ac4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2288      	movs	r2, #136	; 0x88
 8004aca:	2120      	movs	r1, #32
 8004acc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ada:	f3ef 8310 	mrs	r3, PRIMASK
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae2:	2480      	movs	r4, #128	; 0x80
 8004ae4:	193a      	adds	r2, r7, r4
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	2301      	movs	r3, #1
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	f383 8810 	msr	PRIMASK, r3
}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2110      	movs	r1, #16
 8004b00:	438a      	bics	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	193b      	adds	r3, r7, r4
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	f383 8810 	msr	PRIMASK, r3
}
 8004b10:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b12:	183b      	adds	r3, r7, r0
 8004b14:	881a      	ldrh	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	0011      	movs	r1, r2
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 f88e 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b20:	e06f      	b.n	8004c02 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b22:	23a4      	movs	r3, #164	; 0xa4
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	035b      	lsls	r3, r3, #13
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d010      	beq.n	8004b52 <HAL_UART_IRQHandler+0x56a>
 8004b30:	239c      	movs	r3, #156	; 0x9c
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	03db      	lsls	r3, r3, #15
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2280      	movs	r2, #128	; 0x80
 8004b44:	0352      	lsls	r2, r2, #13
 8004b46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f001 fa12 	bl	8005f74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b50:	e05a      	b.n	8004c08 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b52:	23a4      	movs	r3, #164	; 0xa4
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2280      	movs	r2, #128	; 0x80
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d016      	beq.n	8004b8c <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b5e:	23a0      	movs	r3, #160	; 0xa0
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2280      	movs	r2, #128	; 0x80
 8004b66:	4013      	ands	r3, r2
 8004b68:	d106      	bne.n	8004b78 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b6a:	239c      	movs	r3, #156	; 0x9c
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	4013      	ands	r3, r2
 8004b76:	d009      	beq.n	8004b8c <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d042      	beq.n	8004c06 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	0010      	movs	r0, r2
 8004b88:	4798      	blx	r3
    }
    return;
 8004b8a:	e03c      	b.n	8004c06 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b8c:	23a4      	movs	r3, #164	; 0xa4
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2240      	movs	r2, #64	; 0x40
 8004b94:	4013      	ands	r3, r2
 8004b96:	d00a      	beq.n	8004bae <HAL_UART_IRQHandler+0x5c6>
 8004b98:	23a0      	movs	r3, #160	; 0xa0
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2240      	movs	r2, #64	; 0x40
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d004      	beq.n	8004bae <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f000 fd67 	bl	800567a <UART_EndTransmit_IT>
    return;
 8004bac:	e02c      	b.n	8004c08 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004bae:	23a4      	movs	r3, #164	; 0xa4
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x5ec>
 8004bbc:	23a0      	movs	r3, #160	; 0xa0
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	05db      	lsls	r3, r3, #23
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f001 f9e1 	bl	8005f94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bd2:	e019      	b.n	8004c08 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004bd4:	23a4      	movs	r3, #164	; 0xa4
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	045b      	lsls	r3, r3, #17
 8004bde:	4013      	ands	r3, r2
 8004be0:	d012      	beq.n	8004c08 <HAL_UART_IRQHandler+0x620>
 8004be2:	23a0      	movs	r3, #160	; 0xa0
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da0d      	bge.n	8004c08 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f001 f9c8 	bl	8005f84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bf4:	e008      	b.n	8004c08 <HAL_UART_IRQHandler+0x620>
      return;
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	e006      	b.n	8004c08 <HAL_UART_IRQHandler+0x620>
    return;
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	e004      	b.n	8004c08 <HAL_UART_IRQHandler+0x620>
      return;
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	e002      	b.n	8004c08 <HAL_UART_IRQHandler+0x620>
      return;
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	e000      	b.n	8004c08 <HAL_UART_IRQHandler+0x620>
    return;
 8004c06:	46c0      	nop			; (mov r8, r8)
  }
}
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b02a      	add	sp, #168	; 0xa8
 8004c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	fffffeff 	.word	0xfffffeff
 8004c14:	fffffedf 	.word	0xfffffedf
 8004c18:	effffffe 	.word	0xeffffffe

08004c1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b002      	add	sp, #8
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	000a      	movs	r2, r1
 8004c46:	1cbb      	adds	r3, r7, #2
 8004c48:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b002      	add	sp, #8
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c5c:	231a      	movs	r3, #26
 8004c5e:	18fb      	adds	r3, r7, r3
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4abc      	ldr	r2, [pc, #752]	; (8004f74 <UART_SetConfig+0x320>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	0019      	movs	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4ab7      	ldr	r2, [pc, #732]	; (8004f78 <UART_SetConfig+0x324>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4aae      	ldr	r2, [pc, #696]	; (8004f7c <UART_SetConfig+0x328>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	220f      	movs	r2, #15
 8004cd8:	4393      	bics	r3, r2
 8004cda:	0019      	movs	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4aa4      	ldr	r2, [pc, #656]	; (8004f80 <UART_SetConfig+0x32c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d127      	bne.n	8004d42 <UART_SetConfig+0xee>
 8004cf2:	4ba4      	ldr	r3, [pc, #656]	; (8004f84 <UART_SetConfig+0x330>)
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d017      	beq.n	8004d2e <UART_SetConfig+0xda>
 8004cfe:	d81b      	bhi.n	8004d38 <UART_SetConfig+0xe4>
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d00a      	beq.n	8004d1a <UART_SetConfig+0xc6>
 8004d04:	d818      	bhi.n	8004d38 <UART_SetConfig+0xe4>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <UART_SetConfig+0xbc>
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d00a      	beq.n	8004d24 <UART_SetConfig+0xd0>
 8004d0e:	e013      	b.n	8004d38 <UART_SetConfig+0xe4>
 8004d10:	231b      	movs	r3, #27
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e058      	b.n	8004dcc <UART_SetConfig+0x178>
 8004d1a:	231b      	movs	r3, #27
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	2202      	movs	r2, #2
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	e053      	b.n	8004dcc <UART_SetConfig+0x178>
 8004d24:	231b      	movs	r3, #27
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	2204      	movs	r2, #4
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	e04e      	b.n	8004dcc <UART_SetConfig+0x178>
 8004d2e:	231b      	movs	r3, #27
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2208      	movs	r2, #8
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e049      	b.n	8004dcc <UART_SetConfig+0x178>
 8004d38:	231b      	movs	r3, #27
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	e044      	b.n	8004dcc <UART_SetConfig+0x178>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a90      	ldr	r2, [pc, #576]	; (8004f88 <UART_SetConfig+0x334>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d127      	bne.n	8004d9c <UART_SetConfig+0x148>
 8004d4c:	4b8d      	ldr	r3, [pc, #564]	; (8004f84 <UART_SetConfig+0x330>)
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	220c      	movs	r2, #12
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b0c      	cmp	r3, #12
 8004d56:	d017      	beq.n	8004d88 <UART_SetConfig+0x134>
 8004d58:	d81b      	bhi.n	8004d92 <UART_SetConfig+0x13e>
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d00a      	beq.n	8004d74 <UART_SetConfig+0x120>
 8004d5e:	d818      	bhi.n	8004d92 <UART_SetConfig+0x13e>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <UART_SetConfig+0x116>
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d00a      	beq.n	8004d7e <UART_SetConfig+0x12a>
 8004d68:	e013      	b.n	8004d92 <UART_SetConfig+0x13e>
 8004d6a:	231b      	movs	r3, #27
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	e02b      	b.n	8004dcc <UART_SetConfig+0x178>
 8004d74:	231b      	movs	r3, #27
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	2202      	movs	r2, #2
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	e026      	b.n	8004dcc <UART_SetConfig+0x178>
 8004d7e:	231b      	movs	r3, #27
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	2204      	movs	r2, #4
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	e021      	b.n	8004dcc <UART_SetConfig+0x178>
 8004d88:	231b      	movs	r3, #27
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e01c      	b.n	8004dcc <UART_SetConfig+0x178>
 8004d92:	231b      	movs	r3, #27
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	2210      	movs	r2, #16
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e017      	b.n	8004dcc <UART_SetConfig+0x178>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a7a      	ldr	r2, [pc, #488]	; (8004f8c <UART_SetConfig+0x338>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d104      	bne.n	8004db0 <UART_SetConfig+0x15c>
 8004da6:	231b      	movs	r3, #27
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e00d      	b.n	8004dcc <UART_SetConfig+0x178>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a76      	ldr	r2, [pc, #472]	; (8004f90 <UART_SetConfig+0x33c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d104      	bne.n	8004dc4 <UART_SetConfig+0x170>
 8004dba:	231b      	movs	r3, #27
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e003      	b.n	8004dcc <UART_SetConfig+0x178>
 8004dc4:	231b      	movs	r3, #27
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	2210      	movs	r2, #16
 8004dca:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d000      	beq.n	8004dda <UART_SetConfig+0x186>
 8004dd8:	e065      	b.n	8004ea6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8004dda:	231b      	movs	r3, #27
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d015      	beq.n	8004e10 <UART_SetConfig+0x1bc>
 8004de4:	dc18      	bgt.n	8004e18 <UART_SetConfig+0x1c4>
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d00d      	beq.n	8004e06 <UART_SetConfig+0x1b2>
 8004dea:	dc15      	bgt.n	8004e18 <UART_SetConfig+0x1c4>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <UART_SetConfig+0x1a2>
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d005      	beq.n	8004e00 <UART_SetConfig+0x1ac>
 8004df4:	e010      	b.n	8004e18 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df6:	f7fe f925 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	617b      	str	r3, [r7, #20]
        break;
 8004dfe:	e012      	b.n	8004e26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e00:	4b64      	ldr	r3, [pc, #400]	; (8004f94 <UART_SetConfig+0x340>)
 8004e02:	617b      	str	r3, [r7, #20]
        break;
 8004e04:	e00f      	b.n	8004e26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e06:	f7fe f891 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8004e0a:	0003      	movs	r3, r0
 8004e0c:	617b      	str	r3, [r7, #20]
        break;
 8004e0e:	e00a      	b.n	8004e26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	617b      	str	r3, [r7, #20]
        break;
 8004e16:	e006      	b.n	8004e26 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e1c:	231a      	movs	r3, #26
 8004e1e:	18fb      	adds	r3, r7, r3
 8004e20:	2201      	movs	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
        break;
 8004e24:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d100      	bne.n	8004e2e <UART_SetConfig+0x1da>
 8004e2c:	e08d      	b.n	8004f4a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e32:	4b59      	ldr	r3, [pc, #356]	; (8004f98 <UART_SetConfig+0x344>)
 8004e34:	0052      	lsls	r2, r2, #1
 8004e36:	5ad3      	ldrh	r3, [r2, r3]
 8004e38:	0019      	movs	r1, r3
 8004e3a:	6978      	ldr	r0, [r7, #20]
 8004e3c:	f7fb f972 	bl	8000124 <__udivsi3>
 8004e40:	0003      	movs	r3, r0
 8004e42:	005a      	lsls	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	18d2      	adds	r2, r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	0019      	movs	r1, r3
 8004e52:	0010      	movs	r0, r2
 8004e54:	f7fb f966 	bl	8000124 <__udivsi3>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	2b0f      	cmp	r3, #15
 8004e60:	d91c      	bls.n	8004e9c <UART_SetConfig+0x248>
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	025b      	lsls	r3, r3, #9
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d217      	bcs.n	8004e9c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	200e      	movs	r0, #14
 8004e72:	183b      	adds	r3, r7, r0
 8004e74:	210f      	movs	r1, #15
 8004e76:	438a      	bics	r2, r1
 8004e78:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	085b      	lsrs	r3, r3, #1
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2207      	movs	r2, #7
 8004e82:	4013      	ands	r3, r2
 8004e84:	b299      	uxth	r1, r3
 8004e86:	183b      	adds	r3, r7, r0
 8004e88:	183a      	adds	r2, r7, r0
 8004e8a:	8812      	ldrh	r2, [r2, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	183a      	adds	r2, r7, r0
 8004e96:	8812      	ldrh	r2, [r2, #0]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	e056      	b.n	8004f4a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004e9c:	231a      	movs	r3, #26
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	e051      	b.n	8004f4a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ea6:	231b      	movs	r3, #27
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d015      	beq.n	8004edc <UART_SetConfig+0x288>
 8004eb0:	dc18      	bgt.n	8004ee4 <UART_SetConfig+0x290>
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d00d      	beq.n	8004ed2 <UART_SetConfig+0x27e>
 8004eb6:	dc15      	bgt.n	8004ee4 <UART_SetConfig+0x290>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <UART_SetConfig+0x26e>
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d005      	beq.n	8004ecc <UART_SetConfig+0x278>
 8004ec0:	e010      	b.n	8004ee4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec2:	f7fe f8bf 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	617b      	str	r3, [r7, #20]
        break;
 8004eca:	e012      	b.n	8004ef2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ecc:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <UART_SetConfig+0x340>)
 8004ece:	617b      	str	r3, [r7, #20]
        break;
 8004ed0:	e00f      	b.n	8004ef2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed2:	f7fe f82b 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	617b      	str	r3, [r7, #20]
        break;
 8004eda:	e00a      	b.n	8004ef2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	617b      	str	r3, [r7, #20]
        break;
 8004ee2:	e006      	b.n	8004ef2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ee8:	231a      	movs	r3, #26
 8004eea:	18fb      	adds	r3, r7, r3
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]
        break;
 8004ef0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d028      	beq.n	8004f4a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004efc:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <UART_SetConfig+0x344>)
 8004efe:	0052      	lsls	r2, r2, #1
 8004f00:	5ad3      	ldrh	r3, [r2, r3]
 8004f02:	0019      	movs	r1, r3
 8004f04:	6978      	ldr	r0, [r7, #20]
 8004f06:	f7fb f90d 	bl	8000124 <__udivsi3>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	001a      	movs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	085b      	lsrs	r3, r3, #1
 8004f14:	18d2      	adds	r2, r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	0010      	movs	r0, r2
 8004f1e:	f7fb f901 	bl	8000124 <__udivsi3>
 8004f22:	0003      	movs	r3, r0
 8004f24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b0f      	cmp	r3, #15
 8004f2a:	d90a      	bls.n	8004f42 <UART_SetConfig+0x2ee>
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	2380      	movs	r3, #128	; 0x80
 8004f30:	025b      	lsls	r3, r3, #9
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d205      	bcs.n	8004f42 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60da      	str	r2, [r3, #12]
 8004f40:	e003      	b.n	8004f4a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004f42:	231a      	movs	r3, #26
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	2201      	movs	r2, #1
 8004f48:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	226a      	movs	r2, #106	; 0x6a
 8004f4e:	2101      	movs	r1, #1
 8004f50:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2268      	movs	r2, #104	; 0x68
 8004f56:	2101      	movs	r1, #1
 8004f58:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004f66:	231a      	movs	r3, #26
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	781b      	ldrb	r3, [r3, #0]
}
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b008      	add	sp, #32
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	cfff69f3 	.word	0xcfff69f3
 8004f78:	ffffcfff 	.word	0xffffcfff
 8004f7c:	11fff4ff 	.word	0x11fff4ff
 8004f80:	40013800 	.word	0x40013800
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40004400 	.word	0x40004400
 8004f8c:	40004800 	.word	0x40004800
 8004f90:	40004c00 	.word	0x40004c00
 8004f94:	00f42400 	.word	0x00f42400
 8004f98:	08006d3c 	.word	0x08006d3c

08004f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	2201      	movs	r2, #1
 8004faa:	4013      	ands	r3, r2
 8004fac:	d00b      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4a4a      	ldr	r2, [pc, #296]	; (80050e0 <UART_AdvFeatureConfig+0x144>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	2202      	movs	r2, #2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4a43      	ldr	r2, [pc, #268]	; (80050e4 <UART_AdvFeatureConfig+0x148>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	0019      	movs	r1, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	2204      	movs	r2, #4
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d00b      	beq.n	800500a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4a3b      	ldr	r2, [pc, #236]	; (80050e8 <UART_AdvFeatureConfig+0x14c>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	2208      	movs	r2, #8
 8005010:	4013      	ands	r3, r2
 8005012:	d00b      	beq.n	800502c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4a34      	ldr	r2, [pc, #208]	; (80050ec <UART_AdvFeatureConfig+0x150>)
 800501c:	4013      	ands	r3, r2
 800501e:	0019      	movs	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	2210      	movs	r2, #16
 8005032:	4013      	ands	r3, r2
 8005034:	d00b      	beq.n	800504e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4a2c      	ldr	r2, [pc, #176]	; (80050f0 <UART_AdvFeatureConfig+0x154>)
 800503e:	4013      	ands	r3, r2
 8005040:	0019      	movs	r1, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	2220      	movs	r2, #32
 8005054:	4013      	ands	r3, r2
 8005056:	d00b      	beq.n	8005070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	4a25      	ldr	r2, [pc, #148]	; (80050f4 <UART_AdvFeatureConfig+0x158>)
 8005060:	4013      	ands	r3, r2
 8005062:	0019      	movs	r1, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	2240      	movs	r2, #64	; 0x40
 8005076:	4013      	ands	r3, r2
 8005078:	d01d      	beq.n	80050b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <UART_AdvFeatureConfig+0x15c>)
 8005082:	4013      	ands	r3, r2
 8005084:	0019      	movs	r1, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005096:	2380      	movs	r3, #128	; 0x80
 8005098:	035b      	lsls	r3, r3, #13
 800509a:	429a      	cmp	r2, r3
 800509c:	d10b      	bne.n	80050b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a15      	ldr	r2, [pc, #84]	; (80050fc <UART_AdvFeatureConfig+0x160>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	4013      	ands	r3, r2
 80050be:	d00b      	beq.n	80050d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4a0e      	ldr	r2, [pc, #56]	; (8005100 <UART_AdvFeatureConfig+0x164>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  }
}
 80050d8:	46c0      	nop			; (mov r8, r8)
 80050da:	46bd      	mov	sp, r7
 80050dc:	b002      	add	sp, #8
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	fffdffff 	.word	0xfffdffff
 80050e4:	fffeffff 	.word	0xfffeffff
 80050e8:	fffbffff 	.word	0xfffbffff
 80050ec:	ffff7fff 	.word	0xffff7fff
 80050f0:	ffffefff 	.word	0xffffefff
 80050f4:	ffffdfff 	.word	0xffffdfff
 80050f8:	ffefffff 	.word	0xffefffff
 80050fc:	ff9fffff 	.word	0xff9fffff
 8005100:	fff7ffff 	.word	0xfff7ffff

08005104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af02      	add	r7, sp, #8
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	228c      	movs	r2, #140	; 0x8c
 8005110:	2100      	movs	r1, #0
 8005112:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005114:	f7fc ff1a 	bl	8001f4c <HAL_GetTick>
 8005118:	0003      	movs	r3, r0
 800511a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2208      	movs	r2, #8
 8005124:	4013      	ands	r3, r2
 8005126:	2b08      	cmp	r3, #8
 8005128:	d10c      	bne.n	8005144 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2280      	movs	r2, #128	; 0x80
 800512e:	0391      	lsls	r1, r2, #14
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	4a18      	ldr	r2, [pc, #96]	; (8005194 <UART_CheckIdleState+0x90>)
 8005134:	9200      	str	r2, [sp, #0]
 8005136:	2200      	movs	r2, #0
 8005138:	f000 f82e 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 800513c:	1e03      	subs	r3, r0, #0
 800513e:	d001      	beq.n	8005144 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e023      	b.n	800518c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2204      	movs	r2, #4
 800514c:	4013      	ands	r3, r2
 800514e:	2b04      	cmp	r3, #4
 8005150:	d10c      	bne.n	800516c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2280      	movs	r2, #128	; 0x80
 8005156:	03d1      	lsls	r1, r2, #15
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4a0e      	ldr	r2, [pc, #56]	; (8005194 <UART_CheckIdleState+0x90>)
 800515c:	9200      	str	r2, [sp, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	f000 f81a 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 8005164:	1e03      	subs	r3, r0, #0
 8005166:	d001      	beq.n	800516c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e00f      	b.n	800518c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2284      	movs	r2, #132	; 0x84
 8005170:	2120      	movs	r1, #32
 8005172:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2288      	movs	r2, #136	; 0x88
 8005178:	2120      	movs	r1, #32
 800517a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2280      	movs	r2, #128	; 0x80
 8005186:	2100      	movs	r1, #0
 8005188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	0018      	movs	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	b004      	add	sp, #16
 8005192:	bd80      	pop	{r7, pc}
 8005194:	01ffffff 	.word	0x01ffffff

08005198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b094      	sub	sp, #80	; 0x50
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	1dfb      	adds	r3, r7, #7
 80051a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a8:	e0a7      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051ac:	3301      	adds	r3, #1
 80051ae:	d100      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80051b0:	e0a3      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b2:	f7fc fecb 	bl	8001f4c <HAL_GetTick>
 80051b6:	0002      	movs	r2, r0
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051be:	429a      	cmp	r2, r3
 80051c0:	d302      	bcc.n	80051c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d13f      	bne.n	8005248 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c8:	f3ef 8310 	mrs	r3, PRIMASK
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051d0:	647b      	str	r3, [r7, #68]	; 0x44
 80051d2:	2301      	movs	r3, #1
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	f383 8810 	msr	PRIMASK, r3
}
 80051dc:	46c0      	nop			; (mov r8, r8)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	494e      	ldr	r1, [pc, #312]	; (8005324 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80051ea:	400a      	ands	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	f383 8810 	msr	PRIMASK, r3
}
 80051f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fa:	f3ef 8310 	mrs	r3, PRIMASK
 80051fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005202:	643b      	str	r3, [r7, #64]	; 0x40
 8005204:	2301      	movs	r3, #1
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	f383 8810 	msr	PRIMASK, r3
}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2101      	movs	r1, #1
 800521c:	438a      	bics	r2, r1
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005226:	f383 8810 	msr	PRIMASK, r3
}
 800522a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2284      	movs	r2, #132	; 0x84
 8005230:	2120      	movs	r1, #32
 8005232:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2288      	movs	r2, #136	; 0x88
 8005238:	2120      	movs	r1, #32
 800523a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2280      	movs	r2, #128	; 0x80
 8005240:	2100      	movs	r1, #0
 8005242:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e069      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2204      	movs	r2, #4
 8005250:	4013      	ands	r3, r2
 8005252:	d052      	beq.n	80052fa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69da      	ldr	r2, [r3, #28]
 800525a:	2380      	movs	r3, #128	; 0x80
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	401a      	ands	r2, r3
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	429a      	cmp	r2, r3
 8005266:	d148      	bne.n	80052fa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	0112      	lsls	r2, r2, #4
 8005270:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005272:	f3ef 8310 	mrs	r3, PRIMASK
 8005276:	613b      	str	r3, [r7, #16]
  return(result);
 8005278:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800527a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527c:	2301      	movs	r3, #1
 800527e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f383 8810 	msr	PRIMASK, r3
}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4924      	ldr	r1, [pc, #144]	; (8005324 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005294:	400a      	ands	r2, r1
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f383 8810 	msr	PRIMASK, r3
}
 80052a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a4:	f3ef 8310 	mrs	r3, PRIMASK
 80052a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80052aa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ae:	2301      	movs	r3, #1
 80052b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f383 8810 	msr	PRIMASK, r3
}
 80052b8:	46c0      	nop			; (mov r8, r8)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2101      	movs	r1, #1
 80052c6:	438a      	bics	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]
 80052ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	f383 8810 	msr	PRIMASK, r3
}
 80052d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2284      	movs	r2, #132	; 0x84
 80052da:	2120      	movs	r1, #32
 80052dc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2288      	movs	r2, #136	; 0x88
 80052e2:	2120      	movs	r1, #32
 80052e4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	228c      	movs	r2, #140	; 0x8c
 80052ea:	2120      	movs	r1, #32
 80052ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	2100      	movs	r1, #0
 80052f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e010      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	4013      	ands	r3, r2
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	425a      	negs	r2, r3
 800530a:	4153      	adcs	r3, r2
 800530c:	b2db      	uxtb	r3, r3
 800530e:	001a      	movs	r2, r3
 8005310:	1dfb      	adds	r3, r7, #7
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d100      	bne.n	800531a <UART_WaitOnFlagUntilTimeout+0x182>
 8005318:	e747      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b014      	add	sp, #80	; 0x50
 8005322:	bd80      	pop	{r7, pc}
 8005324:	fffffe5f 	.word	0xfffffe5f

08005328 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b098      	sub	sp, #96	; 0x60
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	1dbb      	adds	r3, r7, #6
 8005334:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	1dba      	adds	r2, r7, #6
 8005340:	215c      	movs	r1, #92	; 0x5c
 8005342:	8812      	ldrh	r2, [r2, #0]
 8005344:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1dba      	adds	r2, r7, #6
 800534a:	215e      	movs	r1, #94	; 0x5e
 800534c:	8812      	ldrh	r2, [r2, #0]
 800534e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	015b      	lsls	r3, r3, #5
 800535e:	429a      	cmp	r2, r3
 8005360:	d10d      	bne.n	800537e <UART_Start_Receive_IT+0x56>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d104      	bne.n	8005374 <UART_Start_Receive_IT+0x4c>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2260      	movs	r2, #96	; 0x60
 800536e:	497f      	ldr	r1, [pc, #508]	; (800556c <UART_Start_Receive_IT+0x244>)
 8005370:	5299      	strh	r1, [r3, r2]
 8005372:	e02e      	b.n	80053d2 <UART_Start_Receive_IT+0xaa>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2260      	movs	r2, #96	; 0x60
 8005378:	21ff      	movs	r1, #255	; 0xff
 800537a:	5299      	strh	r1, [r3, r2]
 800537c:	e029      	b.n	80053d2 <UART_Start_Receive_IT+0xaa>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10d      	bne.n	80053a2 <UART_Start_Receive_IT+0x7a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <UART_Start_Receive_IT+0x70>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2260      	movs	r2, #96	; 0x60
 8005392:	21ff      	movs	r1, #255	; 0xff
 8005394:	5299      	strh	r1, [r3, r2]
 8005396:	e01c      	b.n	80053d2 <UART_Start_Receive_IT+0xaa>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2260      	movs	r2, #96	; 0x60
 800539c:	217f      	movs	r1, #127	; 0x7f
 800539e:	5299      	strh	r1, [r3, r2]
 80053a0:	e017      	b.n	80053d2 <UART_Start_Receive_IT+0xaa>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	055b      	lsls	r3, r3, #21
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d10d      	bne.n	80053ca <UART_Start_Receive_IT+0xa2>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d104      	bne.n	80053c0 <UART_Start_Receive_IT+0x98>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2260      	movs	r2, #96	; 0x60
 80053ba:	217f      	movs	r1, #127	; 0x7f
 80053bc:	5299      	strh	r1, [r3, r2]
 80053be:	e008      	b.n	80053d2 <UART_Start_Receive_IT+0xaa>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2260      	movs	r2, #96	; 0x60
 80053c4:	213f      	movs	r1, #63	; 0x3f
 80053c6:	5299      	strh	r1, [r3, r2]
 80053c8:	e003      	b.n	80053d2 <UART_Start_Receive_IT+0xaa>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2260      	movs	r2, #96	; 0x60
 80053ce:	2100      	movs	r1, #0
 80053d0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	228c      	movs	r2, #140	; 0x8c
 80053d6:	2100      	movs	r1, #0
 80053d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2288      	movs	r2, #136	; 0x88
 80053de:	2122      	movs	r1, #34	; 0x22
 80053e0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e2:	f3ef 8310 	mrs	r3, PRIMASK
 80053e6:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80053e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ec:	2301      	movs	r3, #1
 80053ee:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f2:	f383 8810 	msr	PRIMASK, r3
}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2101      	movs	r1, #1
 8005404:	430a      	orrs	r2, r1
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800540a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800540e:	f383 8810 	msr	PRIMASK, r3
}
 8005412:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	059b      	lsls	r3, r3, #22
 800541c:	429a      	cmp	r2, r3
 800541e:	d154      	bne.n	80054ca <UART_Start_Receive_IT+0x1a2>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2268      	movs	r2, #104	; 0x68
 8005424:	5a9b      	ldrh	r3, [r3, r2]
 8005426:	1dba      	adds	r2, r7, #6
 8005428:	8812      	ldrh	r2, [r2, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d34d      	bcc.n	80054ca <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	015b      	lsls	r3, r3, #5
 8005436:	429a      	cmp	r2, r3
 8005438:	d107      	bne.n	800544a <UART_Start_Receive_IT+0x122>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a4a      	ldr	r2, [pc, #296]	; (8005570 <UART_Start_Receive_IT+0x248>)
 8005446:	671a      	str	r2, [r3, #112]	; 0x70
 8005448:	e002      	b.n	8005450 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a49      	ldr	r2, [pc, #292]	; (8005574 <UART_Start_Receive_IT+0x24c>)
 800544e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2280      	movs	r2, #128	; 0x80
 8005454:	2100      	movs	r1, #0
 8005456:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d019      	beq.n	8005494 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005460:	f3ef 8310 	mrs	r3, PRIMASK
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005468:	65bb      	str	r3, [r7, #88]	; 0x58
 800546a:	2301      	movs	r3, #1
 800546c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	f383 8810 	msr	PRIMASK, r3
}
 8005474:	46c0      	nop			; (mov r8, r8)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	0049      	lsls	r1, r1, #1
 8005484:	430a      	orrs	r2, r1
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800548a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548e:	f383 8810 	msr	PRIMASK, r3
}
 8005492:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005494:	f3ef 8310 	mrs	r3, PRIMASK
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800549c:	657b      	str	r3, [r7, #84]	; 0x54
 800549e:	2301      	movs	r3, #1
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	f383 8810 	msr	PRIMASK, r3
}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2180      	movs	r1, #128	; 0x80
 80054b6:	0549      	lsls	r1, r1, #21
 80054b8:	430a      	orrs	r2, r1
 80054ba:	609a      	str	r2, [r3, #8]
 80054bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054be:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	f383 8810 	msr	PRIMASK, r3
}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	e04b      	b.n	8005562 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	015b      	lsls	r3, r3, #5
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d107      	bne.n	80054e6 <UART_Start_Receive_IT+0x1be>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d103      	bne.n	80054e6 <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <UART_Start_Receive_IT+0x250>)
 80054e2:	671a      	str	r2, [r3, #112]	; 0x70
 80054e4:	e002      	b.n	80054ec <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a24      	ldr	r2, [pc, #144]	; (800557c <UART_Start_Receive_IT+0x254>)
 80054ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2280      	movs	r2, #128	; 0x80
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d019      	beq.n	8005530 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005500:	61fb      	str	r3, [r7, #28]
  return(result);
 8005502:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005506:	2301      	movs	r3, #1
 8005508:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	f383 8810 	msr	PRIMASK, r3
}
 8005510:	46c0      	nop			; (mov r8, r8)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2190      	movs	r1, #144	; 0x90
 800551e:	0049      	lsls	r1, r1, #1
 8005520:	430a      	orrs	r2, r1
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	f383 8810 	msr	PRIMASK, r3
}
 800552e:	e018      	b.n	8005562 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005530:	f3ef 8310 	mrs	r3, PRIMASK
 8005534:	613b      	str	r3, [r7, #16]
  return(result);
 8005536:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005538:	653b      	str	r3, [r7, #80]	; 0x50
 800553a:	2301      	movs	r3, #1
 800553c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f383 8810 	msr	PRIMASK, r3
}
 8005544:	46c0      	nop			; (mov r8, r8)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2120      	movs	r1, #32
 8005552:	430a      	orrs	r2, r1
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005558:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f383 8810 	msr	PRIMASK, r3
}
 8005560:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	0018      	movs	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	b018      	add	sp, #96	; 0x60
 800556a:	bd80      	pop	{r7, pc}
 800556c:	000001ff 	.word	0x000001ff
 8005570:	08005c91 	.word	0x08005c91
 8005574:	080059ad 	.word	0x080059ad
 8005578:	08005841 	.word	0x08005841
 800557c:	080056d5 	.word	0x080056d5

08005580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08e      	sub	sp, #56	; 0x38
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005588:	f3ef 8310 	mrs	r3, PRIMASK
 800558c:	617b      	str	r3, [r7, #20]
  return(result);
 800558e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
 8005592:	2301      	movs	r3, #1
 8005594:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	f383 8810 	msr	PRIMASK, r3
}
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4926      	ldr	r1, [pc, #152]	; (8005644 <UART_EndRxTransfer+0xc4>)
 80055aa:	400a      	ands	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f383 8810 	msr	PRIMASK, r3
}
 80055b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ba:	f3ef 8310 	mrs	r3, PRIMASK
 80055be:	623b      	str	r3, [r7, #32]
  return(result);
 80055c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055c2:	633b      	str	r3, [r7, #48]	; 0x30
 80055c4:	2301      	movs	r3, #1
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	f383 8810 	msr	PRIMASK, r3
}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	491b      	ldr	r1, [pc, #108]	; (8005648 <UART_EndRxTransfer+0xc8>)
 80055dc:	400a      	ands	r2, r1
 80055de:	609a      	str	r2, [r3, #8]
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	f383 8810 	msr	PRIMASK, r3
}
 80055ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d118      	bne.n	8005626 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f4:	f3ef 8310 	mrs	r3, PRIMASK
 80055f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80055fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055fe:	2301      	movs	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f383 8810 	msr	PRIMASK, r3
}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2110      	movs	r1, #16
 8005616:	438a      	bics	r2, r1
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f383 8810 	msr	PRIMASK, r3
}
 8005624:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2288      	movs	r2, #136	; 0x88
 800562a:	2120      	movs	r1, #32
 800562c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	671a      	str	r2, [r3, #112]	; 0x70
}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	46bd      	mov	sp, r7
 800563e:	b00e      	add	sp, #56	; 0x38
 8005640:	bd80      	pop	{r7, pc}
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	fffffedf 	.word	0xfffffedf
 8005648:	effffffe 	.word	0xeffffffe

0800564c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	225e      	movs	r2, #94	; 0x5e
 800565e:	2100      	movs	r1, #0
 8005660:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2256      	movs	r2, #86	; 0x56
 8005666:	2100      	movs	r1, #0
 8005668:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	0018      	movs	r0, r3
 800566e:	f7ff fadd 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	46bd      	mov	sp, r7
 8005676:	b004      	add	sp, #16
 8005678:	bd80      	pop	{r7, pc}

0800567a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b086      	sub	sp, #24
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005682:	f3ef 8310 	mrs	r3, PRIMASK
 8005686:	60bb      	str	r3, [r7, #8]
  return(result);
 8005688:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	2301      	movs	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f383 8810 	msr	PRIMASK, r3
}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2140      	movs	r1, #64	; 0x40
 80056a4:	438a      	bics	r2, r1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f383 8810 	msr	PRIMASK, r3
}
 80056b2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2284      	movs	r2, #132	; 0x84
 80056b8:	2120      	movs	r1, #32
 80056ba:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	0018      	movs	r0, r3
 80056c6:	f7ff faa9 	bl	8004c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b006      	add	sp, #24
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b090      	sub	sp, #64	; 0x40
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80056dc:	203e      	movs	r0, #62	; 0x3e
 80056de:	183b      	adds	r3, r7, r0
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	2160      	movs	r1, #96	; 0x60
 80056e4:	5a52      	ldrh	r2, [r2, r1]
 80056e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2288      	movs	r2, #136	; 0x88
 80056ec:	589b      	ldr	r3, [r3, r2]
 80056ee:	2b22      	cmp	r3, #34	; 0x22
 80056f0:	d000      	beq.n	80056f4 <UART_RxISR_8BIT+0x20>
 80056f2:	e097      	b.n	8005824 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056fa:	213c      	movs	r1, #60	; 0x3c
 80056fc:	187b      	adds	r3, r7, r1
 80056fe:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005700:	187b      	adds	r3, r7, r1
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b2da      	uxtb	r2, r3
 8005706:	183b      	adds	r3, r7, r0
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b2d9      	uxtb	r1, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005710:	400a      	ands	r2, r1
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	225e      	movs	r2, #94	; 0x5e
 8005724:	5a9b      	ldrh	r3, [r3, r2]
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b299      	uxth	r1, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	225e      	movs	r2, #94	; 0x5e
 8005730:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	225e      	movs	r2, #94	; 0x5e
 8005736:	5a9b      	ldrh	r3, [r3, r2]
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d000      	beq.n	8005740 <UART_RxISR_8BIT+0x6c>
 800573e:	e079      	b.n	8005834 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005740:	f3ef 8310 	mrs	r3, PRIMASK
 8005744:	61bb      	str	r3, [r7, #24]
  return(result);
 8005746:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005748:	63bb      	str	r3, [r7, #56]	; 0x38
 800574a:	2301      	movs	r3, #1
 800574c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f383 8810 	msr	PRIMASK, r3
}
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4936      	ldr	r1, [pc, #216]	; (800583c <UART_RxISR_8BIT+0x168>)
 8005762:	400a      	ands	r2, r1
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	f383 8810 	msr	PRIMASK, r3
}
 8005770:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005772:	f3ef 8310 	mrs	r3, PRIMASK
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
 800577c:	2301      	movs	r3, #1
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	f383 8810 	msr	PRIMASK, r3
}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2101      	movs	r1, #1
 8005794:	438a      	bics	r2, r1
 8005796:	609a      	str	r2, [r3, #8]
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579e:	f383 8810 	msr	PRIMASK, r3
}
 80057a2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2288      	movs	r2, #136	; 0x88
 80057a8:	2120      	movs	r1, #32
 80057aa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d12f      	bne.n	800581a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c0:	f3ef 8310 	mrs	r3, PRIMASK
 80057c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80057c6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c8:	633b      	str	r3, [r7, #48]	; 0x30
 80057ca:	2301      	movs	r3, #1
 80057cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f383 8810 	msr	PRIMASK, r3
}
 80057d4:	46c0      	nop			; (mov r8, r8)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2110      	movs	r1, #16
 80057e2:	438a      	bics	r2, r1
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f383 8810 	msr	PRIMASK, r3
}
 80057f0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	2210      	movs	r2, #16
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b10      	cmp	r3, #16
 80057fe:	d103      	bne.n	8005808 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2210      	movs	r2, #16
 8005806:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	225c      	movs	r2, #92	; 0x5c
 800580c:	5a9a      	ldrh	r2, [r3, r2]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0011      	movs	r1, r2
 8005812:	0018      	movs	r0, r3
 8005814:	f7ff fa12 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005818:	e00c      	b.n	8005834 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	0018      	movs	r0, r3
 800581e:	f7fb fae3 	bl	8000de8 <HAL_UART_RxCpltCallback>
}
 8005822:	e007      	b.n	8005834 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2108      	movs	r1, #8
 8005830:	430a      	orrs	r2, r1
 8005832:	619a      	str	r2, [r3, #24]
}
 8005834:	46c0      	nop			; (mov r8, r8)
 8005836:	46bd      	mov	sp, r7
 8005838:	b010      	add	sp, #64	; 0x40
 800583a:	bd80      	pop	{r7, pc}
 800583c:	fffffedf 	.word	0xfffffedf

08005840 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b090      	sub	sp, #64	; 0x40
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005848:	203e      	movs	r0, #62	; 0x3e
 800584a:	183b      	adds	r3, r7, r0
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	2160      	movs	r1, #96	; 0x60
 8005850:	5a52      	ldrh	r2, [r2, r1]
 8005852:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2288      	movs	r2, #136	; 0x88
 8005858:	589b      	ldr	r3, [r3, r2]
 800585a:	2b22      	cmp	r3, #34	; 0x22
 800585c:	d000      	beq.n	8005860 <UART_RxISR_16BIT+0x20>
 800585e:	e097      	b.n	8005990 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005866:	213c      	movs	r1, #60	; 0x3c
 8005868:	187b      	adds	r3, r7, r1
 800586a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005870:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005872:	187b      	adds	r3, r7, r1
 8005874:	183a      	adds	r2, r7, r0
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	8812      	ldrh	r2, [r2, #0]
 800587a:	4013      	ands	r3, r2
 800587c:	b29a      	uxth	r2, r3
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005886:	1c9a      	adds	r2, r3, #2
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	225e      	movs	r2, #94	; 0x5e
 8005890:	5a9b      	ldrh	r3, [r3, r2]
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b299      	uxth	r1, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	225e      	movs	r2, #94	; 0x5e
 800589c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	225e      	movs	r2, #94	; 0x5e
 80058a2:	5a9b      	ldrh	r3, [r3, r2]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d000      	beq.n	80058ac <UART_RxISR_16BIT+0x6c>
 80058aa:	e079      	b.n	80059a0 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ac:	f3ef 8310 	mrs	r3, PRIMASK
 80058b0:	617b      	str	r3, [r7, #20]
  return(result);
 80058b2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
 80058b6:	2301      	movs	r3, #1
 80058b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	f383 8810 	msr	PRIMASK, r3
}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4936      	ldr	r1, [pc, #216]	; (80059a8 <UART_RxISR_16BIT+0x168>)
 80058ce:	400a      	ands	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f383 8810 	msr	PRIMASK, r3
}
 80058dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058de:	f3ef 8310 	mrs	r3, PRIMASK
 80058e2:	623b      	str	r3, [r7, #32]
  return(result);
 80058e4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	633b      	str	r3, [r7, #48]	; 0x30
 80058e8:	2301      	movs	r3, #1
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	f383 8810 	msr	PRIMASK, r3
}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2101      	movs	r1, #1
 8005900:	438a      	bics	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	f383 8810 	msr	PRIMASK, r3
}
 800590e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2288      	movs	r2, #136	; 0x88
 8005914:	2120      	movs	r1, #32
 8005916:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d12f      	bne.n	8005986 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592c:	f3ef 8310 	mrs	r3, PRIMASK
 8005930:	60bb      	str	r3, [r7, #8]
  return(result);
 8005932:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005936:	2301      	movs	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f383 8810 	msr	PRIMASK, r3
}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2110      	movs	r1, #16
 800594e:	438a      	bics	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	2210      	movs	r2, #16
 8005966:	4013      	ands	r3, r2
 8005968:	2b10      	cmp	r3, #16
 800596a:	d103      	bne.n	8005974 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2210      	movs	r2, #16
 8005972:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	225c      	movs	r2, #92	; 0x5c
 8005978:	5a9a      	ldrh	r2, [r3, r2]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	0011      	movs	r1, r2
 800597e:	0018      	movs	r0, r3
 8005980:	f7ff f95c 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005984:	e00c      	b.n	80059a0 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f7fb fa2d 	bl	8000de8 <HAL_UART_RxCpltCallback>
}
 800598e:	e007      	b.n	80059a0 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2108      	movs	r1, #8
 800599c:	430a      	orrs	r2, r1
 800599e:	619a      	str	r2, [r3, #24]
}
 80059a0:	46c0      	nop			; (mov r8, r8)
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b010      	add	sp, #64	; 0x40
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	fffffedf 	.word	0xfffffedf

080059ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b09c      	sub	sp, #112	; 0x70
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80059b4:	236a      	movs	r3, #106	; 0x6a
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	2160      	movs	r1, #96	; 0x60
 80059bc:	5a52      	ldrh	r2, [r2, r1]
 80059be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2288      	movs	r2, #136	; 0x88
 80059dc:	589b      	ldr	r3, [r3, r2]
 80059de:	2b22      	cmp	r3, #34	; 0x22
 80059e0:	d000      	beq.n	80059e4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80059e2:	e141      	b.n	8005c68 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80059e4:	235e      	movs	r3, #94	; 0x5e
 80059e6:	18fb      	adds	r3, r7, r3
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	2168      	movs	r1, #104	; 0x68
 80059ec:	5a52      	ldrh	r2, [r2, r1]
 80059ee:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059f0:	e0e8      	b.n	8005bc4 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059f8:	215c      	movs	r1, #92	; 0x5c
 80059fa:	187b      	adds	r3, r7, r1
 80059fc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059fe:	187b      	adds	r3, r7, r1
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	236a      	movs	r3, #106	; 0x6a
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b2d9      	uxtb	r1, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	400a      	ands	r2, r1
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	225e      	movs	r2, #94	; 0x5e
 8005a24:	5a9b      	ldrh	r3, [r3, r2]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b299      	uxth	r1, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	225e      	movs	r2, #94	; 0x5e
 8005a30:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	2207      	movs	r2, #7
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d049      	beq.n	8005ad6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a44:	2201      	movs	r2, #1
 8005a46:	4013      	ands	r3, r2
 8005a48:	d010      	beq.n	8005a6c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005a4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a4c:	2380      	movs	r3, #128	; 0x80
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	4013      	ands	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	228c      	movs	r2, #140	; 0x8c
 8005a60:	589b      	ldr	r3, [r3, r2]
 8005a62:	2201      	movs	r2, #1
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	218c      	movs	r1, #140	; 0x8c
 8005a6a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6e:	2202      	movs	r2, #2
 8005a70:	4013      	ands	r3, r2
 8005a72:	d00f      	beq.n	8005a94 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a76:	2201      	movs	r2, #1
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d00b      	beq.n	8005a94 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2202      	movs	r2, #2
 8005a82:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	228c      	movs	r2, #140	; 0x8c
 8005a88:	589b      	ldr	r3, [r3, r2]
 8005a8a:	2204      	movs	r2, #4
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	218c      	movs	r1, #140	; 0x8c
 8005a92:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a96:	2204      	movs	r2, #4
 8005a98:	4013      	ands	r3, r2
 8005a9a:	d00f      	beq.n	8005abc <UART_RxISR_8BIT_FIFOEN+0x110>
 8005a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2204      	movs	r2, #4
 8005aaa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	228c      	movs	r2, #140	; 0x8c
 8005ab0:	589b      	ldr	r3, [r3, r2]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	218c      	movs	r1, #140	; 0x8c
 8005aba:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	228c      	movs	r2, #140	; 0x8c
 8005ac0:	589b      	ldr	r3, [r3, r2]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f7ff f8af 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	228c      	movs	r2, #140	; 0x8c
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	225e      	movs	r2, #94	; 0x5e
 8005ada:	5a9b      	ldrh	r3, [r3, r2]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d170      	bne.n	8005bc4 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aea:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aec:	2301      	movs	r3, #1
 8005aee:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	f383 8810 	msr	PRIMASK, r3
}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	495f      	ldr	r1, [pc, #380]	; (8005c80 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8005b04:	400a      	ands	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b0a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0e:	f383 8810 	msr	PRIMASK, r3
}
 8005b12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b14:	f3ef 8310 	mrs	r3, PRIMASK
 8005b18:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b1c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b1e:	2301      	movs	r3, #1
 8005b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b24:	f383 8810 	msr	PRIMASK, r3
}
 8005b28:	46c0      	nop			; (mov r8, r8)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4953      	ldr	r1, [pc, #332]	; (8005c84 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8005b36:	400a      	ands	r2, r1
 8005b38:	609a      	str	r2, [r3, #8]
 8005b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b3c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b40:	f383 8810 	msr	PRIMASK, r3
}
 8005b44:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2288      	movs	r2, #136	; 0x88
 8005b4a:	2120      	movs	r1, #32
 8005b4c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d12f      	bne.n	8005bbc <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b62:	f3ef 8310 	mrs	r3, PRIMASK
 8005b66:	623b      	str	r3, [r7, #32]
  return(result);
 8005b68:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	f383 8810 	msr	PRIMASK, r3
}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2110      	movs	r1, #16
 8005b84:	438a      	bics	r2, r1
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	f383 8810 	msr	PRIMASK, r3
}
 8005b92:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	2210      	movs	r2, #16
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b10      	cmp	r3, #16
 8005ba0:	d103      	bne.n	8005baa <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2210      	movs	r2, #16
 8005ba8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	225c      	movs	r2, #92	; 0x5c
 8005bae:	5a9a      	ldrh	r2, [r3, r2]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	0011      	movs	r1, r2
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f7ff f841 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
 8005bba:	e003      	b.n	8005bc4 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f7fb f912 	bl	8000de8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005bc4:	235e      	movs	r3, #94	; 0x5e
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d000      	beq.n	8005bd8 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8005bd6:	e70c      	b.n	80059f2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005bd8:	204e      	movs	r0, #78	; 0x4e
 8005bda:	183b      	adds	r3, r7, r0
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	215e      	movs	r1, #94	; 0x5e
 8005be0:	5a52      	ldrh	r2, [r2, r1]
 8005be2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005be4:	0001      	movs	r1, r0
 8005be6:	187b      	adds	r3, r7, r1
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d044      	beq.n	8005c78 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2268      	movs	r2, #104	; 0x68
 8005bf2:	5a9b      	ldrh	r3, [r3, r2]
 8005bf4:	187a      	adds	r2, r7, r1
 8005bf6:	8812      	ldrh	r2, [r2, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d23d      	bcs.n	8005c78 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005c00:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c02:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c06:	2301      	movs	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f383 8810 	msr	PRIMASK, r3
}
 8005c10:	46c0      	nop			; (mov r8, r8)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	491a      	ldr	r1, [pc, #104]	; (8005c88 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8005c1e:	400a      	ands	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]
 8005c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f383 8810 	msr	PRIMASK, r3
}
 8005c2c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8005c32:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c34:	f3ef 8310 	mrs	r3, PRIMASK
 8005c38:	617b      	str	r3, [r7, #20]
  return(result);
 8005c3a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c3e:	2301      	movs	r3, #1
 8005c40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f383 8810 	msr	PRIMASK, r3
}
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2120      	movs	r1, #32
 8005c56:	430a      	orrs	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	f383 8810 	msr	PRIMASK, r3
}
 8005c64:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c66:	e007      	b.n	8005c78 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2108      	movs	r1, #8
 8005c74:	430a      	orrs	r2, r1
 8005c76:	619a      	str	r2, [r3, #24]
}
 8005c78:	46c0      	nop			; (mov r8, r8)
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b01c      	add	sp, #112	; 0x70
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	fffffeff 	.word	0xfffffeff
 8005c84:	effffffe 	.word	0xeffffffe
 8005c88:	efffffff 	.word	0xefffffff
 8005c8c:	080056d5 	.word	0x080056d5

08005c90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b09e      	sub	sp, #120	; 0x78
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005c98:	2372      	movs	r3, #114	; 0x72
 8005c9a:	18fb      	adds	r3, r7, r3
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	2160      	movs	r1, #96	; 0x60
 8005ca0:	5a52      	ldrh	r2, [r2, r1]
 8005ca2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2288      	movs	r2, #136	; 0x88
 8005cc0:	589b      	ldr	r3, [r3, r2]
 8005cc2:	2b22      	cmp	r3, #34	; 0x22
 8005cc4:	d000      	beq.n	8005cc8 <UART_RxISR_16BIT_FIFOEN+0x38>
 8005cc6:	e141      	b.n	8005f4c <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005cc8:	2366      	movs	r3, #102	; 0x66
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	2168      	movs	r1, #104	; 0x68
 8005cd0:	5a52      	ldrh	r2, [r2, r1]
 8005cd2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cd4:	e0e8      	b.n	8005ea8 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cdc:	2164      	movs	r1, #100	; 0x64
 8005cde:	187b      	adds	r3, r7, r1
 8005ce0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce6:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005ce8:	187b      	adds	r3, r7, r1
 8005cea:	2272      	movs	r2, #114	; 0x72
 8005cec:	18ba      	adds	r2, r7, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	8812      	ldrh	r2, [r2, #0]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	225e      	movs	r2, #94	; 0x5e
 8005d08:	5a9b      	ldrh	r3, [r3, r2]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b299      	uxth	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	225e      	movs	r2, #94	; 0x5e
 8005d14:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d20:	2207      	movs	r2, #7
 8005d22:	4013      	ands	r3, r2
 8005d24:	d049      	beq.n	8005dba <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d28:	2201      	movs	r2, #1
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d010      	beq.n	8005d50 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005d2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4013      	ands	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	228c      	movs	r2, #140	; 0x8c
 8005d44:	589b      	ldr	r3, [r3, r2]
 8005d46:	2201      	movs	r2, #1
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	218c      	movs	r1, #140	; 0x8c
 8005d4e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d52:	2202      	movs	r2, #2
 8005d54:	4013      	ands	r3, r2
 8005d56:	d00f      	beq.n	8005d78 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d00b      	beq.n	8005d78 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2202      	movs	r2, #2
 8005d66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	228c      	movs	r2, #140	; 0x8c
 8005d6c:	589b      	ldr	r3, [r3, r2]
 8005d6e:	2204      	movs	r2, #4
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	218c      	movs	r1, #140	; 0x8c
 8005d76:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d00f      	beq.n	8005da0 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d82:	2201      	movs	r2, #1
 8005d84:	4013      	ands	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2204      	movs	r2, #4
 8005d8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	228c      	movs	r2, #140	; 0x8c
 8005d94:	589b      	ldr	r3, [r3, r2]
 8005d96:	2202      	movs	r2, #2
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	218c      	movs	r1, #140	; 0x8c
 8005d9e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	228c      	movs	r2, #140	; 0x8c
 8005da4:	589b      	ldr	r3, [r3, r2]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	0018      	movs	r0, r3
 8005dae:	f7fe ff3d 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	228c      	movs	r2, #140	; 0x8c
 8005db6:	2100      	movs	r1, #0
 8005db8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	225e      	movs	r2, #94	; 0x5e
 8005dbe:	5a9b      	ldrh	r3, [r3, r2]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d170      	bne.n	8005ea8 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd6:	f383 8810 	msr	PRIMASK, r3
}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	495f      	ldr	r1, [pc, #380]	; (8005f64 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8005de8:	400a      	ands	r2, r1
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	f383 8810 	msr	PRIMASK, r3
}
 8005df6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e00:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e02:	2301      	movs	r3, #1
 8005e04:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e08:	f383 8810 	msr	PRIMASK, r3
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4953      	ldr	r1, [pc, #332]	; (8005f68 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8005e1a:	400a      	ands	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]
 8005e1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e20:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e24:	f383 8810 	msr	PRIMASK, r3
}
 8005e28:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2288      	movs	r2, #136	; 0x88
 8005e2e:	2120      	movs	r1, #32
 8005e30:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d12f      	bne.n	8005ea0 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e46:	f3ef 8310 	mrs	r3, PRIMASK
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e50:	2301      	movs	r3, #1
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	f383 8810 	msr	PRIMASK, r3
}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2110      	movs	r1, #16
 8005e68:	438a      	bics	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	f383 8810 	msr	PRIMASK, r3
}
 8005e76:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	2210      	movs	r2, #16
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b10      	cmp	r3, #16
 8005e84:	d103      	bne.n	8005e8e <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	225c      	movs	r2, #92	; 0x5c
 8005e92:	5a9a      	ldrh	r2, [r3, r2]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	0011      	movs	r1, r2
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f7fe fecf 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
 8005e9e:	e003      	b.n	8005ea8 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f7fa ffa0 	bl	8000de8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ea8:	2366      	movs	r3, #102	; 0x66
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d004      	beq.n	8005ebc <UART_RxISR_16BIT_FIFOEN+0x22c>
 8005eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d000      	beq.n	8005ebc <UART_RxISR_16BIT_FIFOEN+0x22c>
 8005eba:	e70c      	b.n	8005cd6 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005ebc:	2052      	movs	r0, #82	; 0x52
 8005ebe:	183b      	adds	r3, r7, r0
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	215e      	movs	r1, #94	; 0x5e
 8005ec4:	5a52      	ldrh	r2, [r2, r1]
 8005ec6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005ec8:	0001      	movs	r1, r0
 8005eca:	187b      	adds	r3, r7, r1
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d044      	beq.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2268      	movs	r2, #104	; 0x68
 8005ed6:	5a9b      	ldrh	r3, [r3, r2]
 8005ed8:	187a      	adds	r2, r7, r1
 8005eda:	8812      	ldrh	r2, [r2, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d23d      	bcs.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eea:	2301      	movs	r3, #1
 8005eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f383 8810 	msr	PRIMASK, r3
}
 8005ef4:	46c0      	nop			; (mov r8, r8)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	491a      	ldr	r1, [pc, #104]	; (8005f6c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8005f02:	400a      	ands	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]
 8005f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f383 8810 	msr	PRIMASK, r3
}
 8005f10:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a16      	ldr	r2, [pc, #88]	; (8005f70 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8005f16:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f18:	f3ef 8310 	mrs	r3, PRIMASK
 8005f1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f1e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f20:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f22:	2301      	movs	r3, #1
 8005f24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f383 8810 	msr	PRIMASK, r3
}
 8005f2c:	46c0      	nop			; (mov r8, r8)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2120      	movs	r1, #32
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	f383 8810 	msr	PRIMASK, r3
}
 8005f48:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f4a:	e007      	b.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2108      	movs	r1, #8
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	619a      	str	r2, [r3, #24]
}
 8005f5c:	46c0      	nop			; (mov r8, r8)
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b01e      	add	sp, #120	; 0x78
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	fffffeff 	.word	0xfffffeff
 8005f68:	effffffe 	.word	0xeffffffe
 8005f6c:	efffffff 	.word	0xefffffff
 8005f70:	08005841 	.word	0x08005841

08005f74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f7c:	46c0      	nop			; (mov r8, r8)
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	b002      	add	sp, #8
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005f9c:	46c0      	nop			; (mov r8, r8)
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	b002      	add	sp, #8
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	5c9b      	ldrb	r3, [r3, r2]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_UARTEx_DisableFifoMode+0x16>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e027      	b.n	800600a <HAL_UARTEx_DisableFifoMode+0x66>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2280      	movs	r2, #128	; 0x80
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2284      	movs	r2, #132	; 0x84
 8005fc6:	2124      	movs	r1, #36	; 0x24
 8005fc8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2101      	movs	r1, #1
 8005fde:	438a      	bics	r2, r1
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4a0b      	ldr	r2, [pc, #44]	; (8006014 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2284      	movs	r2, #132	; 0x84
 8005ffc:	2120      	movs	r1, #32
 8005ffe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2280      	movs	r2, #128	; 0x80
 8006004:	2100      	movs	r1, #0
 8006006:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	0018      	movs	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	b004      	add	sp, #16
 8006010:	bd80      	pop	{r7, pc}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	dfffffff 	.word	0xdfffffff

08006018 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2280      	movs	r2, #128	; 0x80
 8006026:	5c9b      	ldrb	r3, [r3, r2]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800602c:	2302      	movs	r3, #2
 800602e:	e02e      	b.n	800608e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2280      	movs	r2, #128	; 0x80
 8006034:	2101      	movs	r1, #1
 8006036:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2284      	movs	r2, #132	; 0x84
 800603c:	2124      	movs	r1, #36	; 0x24
 800603e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2101      	movs	r1, #1
 8006054:	438a      	bics	r2, r1
 8006056:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	08d9      	lsrs	r1, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	0018      	movs	r0, r3
 8006070:	f000 f854 	bl	800611c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2284      	movs	r2, #132	; 0x84
 8006080:	2120      	movs	r1, #32
 8006082:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2280      	movs	r2, #128	; 0x80
 8006088:	2100      	movs	r1, #0
 800608a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	0018      	movs	r0, r3
 8006090:	46bd      	mov	sp, r7
 8006092:	b004      	add	sp, #16
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2280      	movs	r2, #128	; 0x80
 80060a6:	5c9b      	ldrb	r3, [r3, r2]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e02f      	b.n	8006110 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2280      	movs	r2, #128	; 0x80
 80060b4:	2101      	movs	r1, #1
 80060b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2284      	movs	r2, #132	; 0x84
 80060bc:	2124      	movs	r1, #36	; 0x24
 80060be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2101      	movs	r1, #1
 80060d4:	438a      	bics	r2, r1
 80060d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	4a0e      	ldr	r2, [pc, #56]	; (8006118 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	0019      	movs	r1, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f000 f813 	bl	800611c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2284      	movs	r2, #132	; 0x84
 8006102:	2120      	movs	r1, #32
 8006104:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2280      	movs	r2, #128	; 0x80
 800610a:	2100      	movs	r1, #0
 800610c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	0018      	movs	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	b004      	add	sp, #16
 8006116:	bd80      	pop	{r7, pc}
 8006118:	f1ffffff 	.word	0xf1ffffff

0800611c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800611c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006128:	2b00      	cmp	r3, #0
 800612a:	d108      	bne.n	800613e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	226a      	movs	r2, #106	; 0x6a
 8006130:	2101      	movs	r1, #1
 8006132:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2268      	movs	r2, #104	; 0x68
 8006138:	2101      	movs	r1, #1
 800613a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800613c:	e043      	b.n	80061c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800613e:	260f      	movs	r6, #15
 8006140:	19bb      	adds	r3, r7, r6
 8006142:	2208      	movs	r2, #8
 8006144:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006146:	200e      	movs	r0, #14
 8006148:	183b      	adds	r3, r7, r0
 800614a:	2208      	movs	r2, #8
 800614c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	0e5b      	lsrs	r3, r3, #25
 8006156:	b2da      	uxtb	r2, r3
 8006158:	240d      	movs	r4, #13
 800615a:	193b      	adds	r3, r7, r4
 800615c:	2107      	movs	r1, #7
 800615e:	400a      	ands	r2, r1
 8006160:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	0f5b      	lsrs	r3, r3, #29
 800616a:	b2da      	uxtb	r2, r3
 800616c:	250c      	movs	r5, #12
 800616e:	197b      	adds	r3, r7, r5
 8006170:	2107      	movs	r1, #7
 8006172:	400a      	ands	r2, r1
 8006174:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006176:	183b      	adds	r3, r7, r0
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	197a      	adds	r2, r7, r5
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	4914      	ldr	r1, [pc, #80]	; (80061d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006180:	5c8a      	ldrb	r2, [r1, r2]
 8006182:	435a      	muls	r2, r3
 8006184:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006186:	197b      	adds	r3, r7, r5
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	4a12      	ldr	r2, [pc, #72]	; (80061d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800618c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800618e:	0019      	movs	r1, r3
 8006190:	f7fa f852 	bl	8000238 <__divsi3>
 8006194:	0003      	movs	r3, r0
 8006196:	b299      	uxth	r1, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	226a      	movs	r2, #106	; 0x6a
 800619c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800619e:	19bb      	adds	r3, r7, r6
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	193a      	adds	r2, r7, r4
 80061a4:	7812      	ldrb	r2, [r2, #0]
 80061a6:	490a      	ldr	r1, [pc, #40]	; (80061d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80061a8:	5c8a      	ldrb	r2, [r1, r2]
 80061aa:	435a      	muls	r2, r3
 80061ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80061ae:	193b      	adds	r3, r7, r4
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	4a08      	ldr	r2, [pc, #32]	; (80061d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80061b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061b6:	0019      	movs	r1, r3
 80061b8:	f7fa f83e 	bl	8000238 <__divsi3>
 80061bc:	0003      	movs	r3, r0
 80061be:	b299      	uxth	r1, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2268      	movs	r2, #104	; 0x68
 80061c4:	5299      	strh	r1, [r3, r2]
}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	46bd      	mov	sp, r7
 80061ca:	b005      	add	sp, #20
 80061cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	08006d54 	.word	0x08006d54
 80061d4:	08006d5c 	.word	0x08006d5c

080061d8 <atoi>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	220a      	movs	r2, #10
 80061dc:	2100      	movs	r1, #0
 80061de:	f000 f8e1 	bl	80063a4 <strtol>
 80061e2:	bd10      	pop	{r4, pc}

080061e4 <__errno>:
 80061e4:	4b01      	ldr	r3, [pc, #4]	; (80061ec <__errno+0x8>)
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	4770      	bx	lr
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	20000010 	.word	0x20000010

080061f0 <__libc_init_array>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	2600      	movs	r6, #0
 80061f4:	4d0c      	ldr	r5, [pc, #48]	; (8006228 <__libc_init_array+0x38>)
 80061f6:	4c0d      	ldr	r4, [pc, #52]	; (800622c <__libc_init_array+0x3c>)
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	42a6      	cmp	r6, r4
 80061fe:	d109      	bne.n	8006214 <__libc_init_array+0x24>
 8006200:	2600      	movs	r6, #0
 8006202:	f000 fd47 	bl	8006c94 <_init>
 8006206:	4d0a      	ldr	r5, [pc, #40]	; (8006230 <__libc_init_array+0x40>)
 8006208:	4c0a      	ldr	r4, [pc, #40]	; (8006234 <__libc_init_array+0x44>)
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	42a6      	cmp	r6, r4
 8006210:	d105      	bne.n	800621e <__libc_init_array+0x2e>
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	00b3      	lsls	r3, r6, #2
 8006216:	58eb      	ldr	r3, [r5, r3]
 8006218:	4798      	blx	r3
 800621a:	3601      	adds	r6, #1
 800621c:	e7ee      	b.n	80061fc <__libc_init_array+0xc>
 800621e:	00b3      	lsls	r3, r6, #2
 8006220:	58eb      	ldr	r3, [r5, r3]
 8006222:	4798      	blx	r3
 8006224:	3601      	adds	r6, #1
 8006226:	e7f2      	b.n	800620e <__libc_init_array+0x1e>
 8006228:	08006e98 	.word	0x08006e98
 800622c:	08006e98 	.word	0x08006e98
 8006230:	08006e98 	.word	0x08006e98
 8006234:	08006e9c 	.word	0x08006e9c

08006238 <memset>:
 8006238:	0003      	movs	r3, r0
 800623a:	1882      	adds	r2, r0, r2
 800623c:	4293      	cmp	r3, r2
 800623e:	d100      	bne.n	8006242 <memset+0xa>
 8006240:	4770      	bx	lr
 8006242:	7019      	strb	r1, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	e7f9      	b.n	800623c <memset+0x4>

08006248 <siprintf>:
 8006248:	b40e      	push	{r1, r2, r3}
 800624a:	b500      	push	{lr}
 800624c:	490b      	ldr	r1, [pc, #44]	; (800627c <siprintf+0x34>)
 800624e:	b09c      	sub	sp, #112	; 0x70
 8006250:	ab1d      	add	r3, sp, #116	; 0x74
 8006252:	9002      	str	r0, [sp, #8]
 8006254:	9006      	str	r0, [sp, #24]
 8006256:	9107      	str	r1, [sp, #28]
 8006258:	9104      	str	r1, [sp, #16]
 800625a:	4809      	ldr	r0, [pc, #36]	; (8006280 <siprintf+0x38>)
 800625c:	4909      	ldr	r1, [pc, #36]	; (8006284 <siprintf+0x3c>)
 800625e:	cb04      	ldmia	r3!, {r2}
 8006260:	9105      	str	r1, [sp, #20]
 8006262:	6800      	ldr	r0, [r0, #0]
 8006264:	a902      	add	r1, sp, #8
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	f000 f92c 	bl	80064c4 <_svfiprintf_r>
 800626c:	2300      	movs	r3, #0
 800626e:	9a02      	ldr	r2, [sp, #8]
 8006270:	7013      	strb	r3, [r2, #0]
 8006272:	b01c      	add	sp, #112	; 0x70
 8006274:	bc08      	pop	{r3}
 8006276:	b003      	add	sp, #12
 8006278:	4718      	bx	r3
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	7fffffff 	.word	0x7fffffff
 8006280:	20000010 	.word	0x20000010
 8006284:	ffff0208 	.word	0xffff0208

08006288 <_strtol_l.constprop.0>:
 8006288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800628a:	b087      	sub	sp, #28
 800628c:	001e      	movs	r6, r3
 800628e:	9005      	str	r0, [sp, #20]
 8006290:	9101      	str	r1, [sp, #4]
 8006292:	9202      	str	r2, [sp, #8]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d045      	beq.n	8006324 <_strtol_l.constprop.0+0x9c>
 8006298:	000b      	movs	r3, r1
 800629a:	2e24      	cmp	r6, #36	; 0x24
 800629c:	d842      	bhi.n	8006324 <_strtol_l.constprop.0+0x9c>
 800629e:	4a3f      	ldr	r2, [pc, #252]	; (800639c <_strtol_l.constprop.0+0x114>)
 80062a0:	2108      	movs	r1, #8
 80062a2:	4694      	mov	ip, r2
 80062a4:	001a      	movs	r2, r3
 80062a6:	4660      	mov	r0, ip
 80062a8:	7814      	ldrb	r4, [r2, #0]
 80062aa:	3301      	adds	r3, #1
 80062ac:	5d00      	ldrb	r0, [r0, r4]
 80062ae:	001d      	movs	r5, r3
 80062b0:	0007      	movs	r7, r0
 80062b2:	400f      	ands	r7, r1
 80062b4:	4208      	tst	r0, r1
 80062b6:	d1f5      	bne.n	80062a4 <_strtol_l.constprop.0+0x1c>
 80062b8:	2c2d      	cmp	r4, #45	; 0x2d
 80062ba:	d13a      	bne.n	8006332 <_strtol_l.constprop.0+0xaa>
 80062bc:	2701      	movs	r7, #1
 80062be:	781c      	ldrb	r4, [r3, #0]
 80062c0:	1c95      	adds	r5, r2, #2
 80062c2:	2e00      	cmp	r6, #0
 80062c4:	d065      	beq.n	8006392 <_strtol_l.constprop.0+0x10a>
 80062c6:	2e10      	cmp	r6, #16
 80062c8:	d109      	bne.n	80062de <_strtol_l.constprop.0+0x56>
 80062ca:	2c30      	cmp	r4, #48	; 0x30
 80062cc:	d107      	bne.n	80062de <_strtol_l.constprop.0+0x56>
 80062ce:	2220      	movs	r2, #32
 80062d0:	782b      	ldrb	r3, [r5, #0]
 80062d2:	4393      	bics	r3, r2
 80062d4:	2b58      	cmp	r3, #88	; 0x58
 80062d6:	d157      	bne.n	8006388 <_strtol_l.constprop.0+0x100>
 80062d8:	2610      	movs	r6, #16
 80062da:	786c      	ldrb	r4, [r5, #1]
 80062dc:	3502      	adds	r5, #2
 80062de:	4b30      	ldr	r3, [pc, #192]	; (80063a0 <_strtol_l.constprop.0+0x118>)
 80062e0:	0031      	movs	r1, r6
 80062e2:	18fb      	adds	r3, r7, r3
 80062e4:	0018      	movs	r0, r3
 80062e6:	9303      	str	r3, [sp, #12]
 80062e8:	f7f9 ffa2 	bl	8000230 <__aeabi_uidivmod>
 80062ec:	2300      	movs	r3, #0
 80062ee:	2201      	movs	r2, #1
 80062f0:	4684      	mov	ip, r0
 80062f2:	0018      	movs	r0, r3
 80062f4:	9104      	str	r1, [sp, #16]
 80062f6:	4252      	negs	r2, r2
 80062f8:	0021      	movs	r1, r4
 80062fa:	3930      	subs	r1, #48	; 0x30
 80062fc:	2909      	cmp	r1, #9
 80062fe:	d81d      	bhi.n	800633c <_strtol_l.constprop.0+0xb4>
 8006300:	000c      	movs	r4, r1
 8006302:	42a6      	cmp	r6, r4
 8006304:	dd28      	ble.n	8006358 <_strtol_l.constprop.0+0xd0>
 8006306:	2b00      	cmp	r3, #0
 8006308:	db24      	blt.n	8006354 <_strtol_l.constprop.0+0xcc>
 800630a:	0013      	movs	r3, r2
 800630c:	4584      	cmp	ip, r0
 800630e:	d306      	bcc.n	800631e <_strtol_l.constprop.0+0x96>
 8006310:	d102      	bne.n	8006318 <_strtol_l.constprop.0+0x90>
 8006312:	9904      	ldr	r1, [sp, #16]
 8006314:	42a1      	cmp	r1, r4
 8006316:	db02      	blt.n	800631e <_strtol_l.constprop.0+0x96>
 8006318:	2301      	movs	r3, #1
 800631a:	4370      	muls	r0, r6
 800631c:	1820      	adds	r0, r4, r0
 800631e:	782c      	ldrb	r4, [r5, #0]
 8006320:	3501      	adds	r5, #1
 8006322:	e7e9      	b.n	80062f8 <_strtol_l.constprop.0+0x70>
 8006324:	f7ff ff5e 	bl	80061e4 <__errno>
 8006328:	2316      	movs	r3, #22
 800632a:	6003      	str	r3, [r0, #0]
 800632c:	2000      	movs	r0, #0
 800632e:	b007      	add	sp, #28
 8006330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006332:	2c2b      	cmp	r4, #43	; 0x2b
 8006334:	d1c5      	bne.n	80062c2 <_strtol_l.constprop.0+0x3a>
 8006336:	781c      	ldrb	r4, [r3, #0]
 8006338:	1c95      	adds	r5, r2, #2
 800633a:	e7c2      	b.n	80062c2 <_strtol_l.constprop.0+0x3a>
 800633c:	0021      	movs	r1, r4
 800633e:	3941      	subs	r1, #65	; 0x41
 8006340:	2919      	cmp	r1, #25
 8006342:	d801      	bhi.n	8006348 <_strtol_l.constprop.0+0xc0>
 8006344:	3c37      	subs	r4, #55	; 0x37
 8006346:	e7dc      	b.n	8006302 <_strtol_l.constprop.0+0x7a>
 8006348:	0021      	movs	r1, r4
 800634a:	3961      	subs	r1, #97	; 0x61
 800634c:	2919      	cmp	r1, #25
 800634e:	d803      	bhi.n	8006358 <_strtol_l.constprop.0+0xd0>
 8006350:	3c57      	subs	r4, #87	; 0x57
 8006352:	e7d6      	b.n	8006302 <_strtol_l.constprop.0+0x7a>
 8006354:	0013      	movs	r3, r2
 8006356:	e7e2      	b.n	800631e <_strtol_l.constprop.0+0x96>
 8006358:	2b00      	cmp	r3, #0
 800635a:	da09      	bge.n	8006370 <_strtol_l.constprop.0+0xe8>
 800635c:	2322      	movs	r3, #34	; 0x22
 800635e:	9a05      	ldr	r2, [sp, #20]
 8006360:	9803      	ldr	r0, [sp, #12]
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	9b02      	ldr	r3, [sp, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0e1      	beq.n	800632e <_strtol_l.constprop.0+0xa6>
 800636a:	1e6b      	subs	r3, r5, #1
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	e007      	b.n	8006380 <_strtol_l.constprop.0+0xf8>
 8006370:	2f00      	cmp	r7, #0
 8006372:	d000      	beq.n	8006376 <_strtol_l.constprop.0+0xee>
 8006374:	4240      	negs	r0, r0
 8006376:	9a02      	ldr	r2, [sp, #8]
 8006378:	2a00      	cmp	r2, #0
 800637a:	d0d8      	beq.n	800632e <_strtol_l.constprop.0+0xa6>
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1f4      	bne.n	800636a <_strtol_l.constprop.0+0xe2>
 8006380:	9b02      	ldr	r3, [sp, #8]
 8006382:	9a01      	ldr	r2, [sp, #4]
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	e7d2      	b.n	800632e <_strtol_l.constprop.0+0xa6>
 8006388:	2430      	movs	r4, #48	; 0x30
 800638a:	2e00      	cmp	r6, #0
 800638c:	d1a7      	bne.n	80062de <_strtol_l.constprop.0+0x56>
 800638e:	3608      	adds	r6, #8
 8006390:	e7a5      	b.n	80062de <_strtol_l.constprop.0+0x56>
 8006392:	2c30      	cmp	r4, #48	; 0x30
 8006394:	d09b      	beq.n	80062ce <_strtol_l.constprop.0+0x46>
 8006396:	260a      	movs	r6, #10
 8006398:	e7a1      	b.n	80062de <_strtol_l.constprop.0+0x56>
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	08006d65 	.word	0x08006d65
 80063a0:	7fffffff 	.word	0x7fffffff

080063a4 <strtol>:
 80063a4:	b510      	push	{r4, lr}
 80063a6:	0013      	movs	r3, r2
 80063a8:	000a      	movs	r2, r1
 80063aa:	0001      	movs	r1, r0
 80063ac:	4802      	ldr	r0, [pc, #8]	; (80063b8 <strtol+0x14>)
 80063ae:	6800      	ldr	r0, [r0, #0]
 80063b0:	f7ff ff6a 	bl	8006288 <_strtol_l.constprop.0>
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	20000010 	.word	0x20000010

080063bc <_vsiprintf_r>:
 80063bc:	b500      	push	{lr}
 80063be:	b09b      	sub	sp, #108	; 0x6c
 80063c0:	9100      	str	r1, [sp, #0]
 80063c2:	9104      	str	r1, [sp, #16]
 80063c4:	4906      	ldr	r1, [pc, #24]	; (80063e0 <_vsiprintf_r+0x24>)
 80063c6:	9105      	str	r1, [sp, #20]
 80063c8:	9102      	str	r1, [sp, #8]
 80063ca:	4906      	ldr	r1, [pc, #24]	; (80063e4 <_vsiprintf_r+0x28>)
 80063cc:	9103      	str	r1, [sp, #12]
 80063ce:	4669      	mov	r1, sp
 80063d0:	f000 f878 	bl	80064c4 <_svfiprintf_r>
 80063d4:	2300      	movs	r3, #0
 80063d6:	9a00      	ldr	r2, [sp, #0]
 80063d8:	7013      	strb	r3, [r2, #0]
 80063da:	b01b      	add	sp, #108	; 0x6c
 80063dc:	bd00      	pop	{pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	7fffffff 	.word	0x7fffffff
 80063e4:	ffff0208 	.word	0xffff0208

080063e8 <vsiprintf>:
 80063e8:	b510      	push	{r4, lr}
 80063ea:	0013      	movs	r3, r2
 80063ec:	000a      	movs	r2, r1
 80063ee:	0001      	movs	r1, r0
 80063f0:	4802      	ldr	r0, [pc, #8]	; (80063fc <vsiprintf+0x14>)
 80063f2:	6800      	ldr	r0, [r0, #0]
 80063f4:	f7ff ffe2 	bl	80063bc <_vsiprintf_r>
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	20000010 	.word	0x20000010

08006400 <__ssputs_r>:
 8006400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006402:	688e      	ldr	r6, [r1, #8]
 8006404:	b085      	sub	sp, #20
 8006406:	0007      	movs	r7, r0
 8006408:	000c      	movs	r4, r1
 800640a:	9203      	str	r2, [sp, #12]
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	429e      	cmp	r6, r3
 8006410:	d83c      	bhi.n	800648c <__ssputs_r+0x8c>
 8006412:	2390      	movs	r3, #144	; 0x90
 8006414:	898a      	ldrh	r2, [r1, #12]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	421a      	tst	r2, r3
 800641a:	d034      	beq.n	8006486 <__ssputs_r+0x86>
 800641c:	6909      	ldr	r1, [r1, #16]
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	6960      	ldr	r0, [r4, #20]
 8006422:	1a5b      	subs	r3, r3, r1
 8006424:	9302      	str	r3, [sp, #8]
 8006426:	2303      	movs	r3, #3
 8006428:	4343      	muls	r3, r0
 800642a:	0fdd      	lsrs	r5, r3, #31
 800642c:	18ed      	adds	r5, r5, r3
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	9802      	ldr	r0, [sp, #8]
 8006432:	3301      	adds	r3, #1
 8006434:	181b      	adds	r3, r3, r0
 8006436:	106d      	asrs	r5, r5, #1
 8006438:	42ab      	cmp	r3, r5
 800643a:	d900      	bls.n	800643e <__ssputs_r+0x3e>
 800643c:	001d      	movs	r5, r3
 800643e:	0553      	lsls	r3, r2, #21
 8006440:	d532      	bpl.n	80064a8 <__ssputs_r+0xa8>
 8006442:	0029      	movs	r1, r5
 8006444:	0038      	movs	r0, r7
 8006446:	f000 fb53 	bl	8006af0 <_malloc_r>
 800644a:	1e06      	subs	r6, r0, #0
 800644c:	d109      	bne.n	8006462 <__ssputs_r+0x62>
 800644e:	230c      	movs	r3, #12
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	2340      	movs	r3, #64	; 0x40
 8006454:	2001      	movs	r0, #1
 8006456:	89a2      	ldrh	r2, [r4, #12]
 8006458:	4240      	negs	r0, r0
 800645a:	4313      	orrs	r3, r2
 800645c:	81a3      	strh	r3, [r4, #12]
 800645e:	b005      	add	sp, #20
 8006460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006462:	9a02      	ldr	r2, [sp, #8]
 8006464:	6921      	ldr	r1, [r4, #16]
 8006466:	f000 faba 	bl	80069de <memcpy>
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	4a14      	ldr	r2, [pc, #80]	; (80064c0 <__ssputs_r+0xc0>)
 800646e:	401a      	ands	r2, r3
 8006470:	2380      	movs	r3, #128	; 0x80
 8006472:	4313      	orrs	r3, r2
 8006474:	81a3      	strh	r3, [r4, #12]
 8006476:	9b02      	ldr	r3, [sp, #8]
 8006478:	6126      	str	r6, [r4, #16]
 800647a:	18f6      	adds	r6, r6, r3
 800647c:	6026      	str	r6, [r4, #0]
 800647e:	6165      	str	r5, [r4, #20]
 8006480:	9e01      	ldr	r6, [sp, #4]
 8006482:	1aed      	subs	r5, r5, r3
 8006484:	60a5      	str	r5, [r4, #8]
 8006486:	9b01      	ldr	r3, [sp, #4]
 8006488:	429e      	cmp	r6, r3
 800648a:	d900      	bls.n	800648e <__ssputs_r+0x8e>
 800648c:	9e01      	ldr	r6, [sp, #4]
 800648e:	0032      	movs	r2, r6
 8006490:	9903      	ldr	r1, [sp, #12]
 8006492:	6820      	ldr	r0, [r4, #0]
 8006494:	f000 faac 	bl	80069f0 <memmove>
 8006498:	68a3      	ldr	r3, [r4, #8]
 800649a:	2000      	movs	r0, #0
 800649c:	1b9b      	subs	r3, r3, r6
 800649e:	60a3      	str	r3, [r4, #8]
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	199e      	adds	r6, r3, r6
 80064a4:	6026      	str	r6, [r4, #0]
 80064a6:	e7da      	b.n	800645e <__ssputs_r+0x5e>
 80064a8:	002a      	movs	r2, r5
 80064aa:	0038      	movs	r0, r7
 80064ac:	f000 fb96 	bl	8006bdc <_realloc_r>
 80064b0:	1e06      	subs	r6, r0, #0
 80064b2:	d1e0      	bne.n	8006476 <__ssputs_r+0x76>
 80064b4:	0038      	movs	r0, r7
 80064b6:	6921      	ldr	r1, [r4, #16]
 80064b8:	f000 faae 	bl	8006a18 <_free_r>
 80064bc:	e7c7      	b.n	800644e <__ssputs_r+0x4e>
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	fffffb7f 	.word	0xfffffb7f

080064c4 <_svfiprintf_r>:
 80064c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c6:	b0a1      	sub	sp, #132	; 0x84
 80064c8:	9003      	str	r0, [sp, #12]
 80064ca:	001d      	movs	r5, r3
 80064cc:	898b      	ldrh	r3, [r1, #12]
 80064ce:	000f      	movs	r7, r1
 80064d0:	0016      	movs	r6, r2
 80064d2:	061b      	lsls	r3, r3, #24
 80064d4:	d511      	bpl.n	80064fa <_svfiprintf_r+0x36>
 80064d6:	690b      	ldr	r3, [r1, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10e      	bne.n	80064fa <_svfiprintf_r+0x36>
 80064dc:	2140      	movs	r1, #64	; 0x40
 80064de:	f000 fb07 	bl	8006af0 <_malloc_r>
 80064e2:	6038      	str	r0, [r7, #0]
 80064e4:	6138      	str	r0, [r7, #16]
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d105      	bne.n	80064f6 <_svfiprintf_r+0x32>
 80064ea:	230c      	movs	r3, #12
 80064ec:	9a03      	ldr	r2, [sp, #12]
 80064ee:	3801      	subs	r0, #1
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	b021      	add	sp, #132	; 0x84
 80064f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f6:	2340      	movs	r3, #64	; 0x40
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	2300      	movs	r3, #0
 80064fc:	ac08      	add	r4, sp, #32
 80064fe:	6163      	str	r3, [r4, #20]
 8006500:	3320      	adds	r3, #32
 8006502:	7663      	strb	r3, [r4, #25]
 8006504:	3310      	adds	r3, #16
 8006506:	76a3      	strb	r3, [r4, #26]
 8006508:	9507      	str	r5, [sp, #28]
 800650a:	0035      	movs	r5, r6
 800650c:	782b      	ldrb	r3, [r5, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <_svfiprintf_r+0x52>
 8006512:	2b25      	cmp	r3, #37	; 0x25
 8006514:	d147      	bne.n	80065a6 <_svfiprintf_r+0xe2>
 8006516:	1bab      	subs	r3, r5, r6
 8006518:	9305      	str	r3, [sp, #20]
 800651a:	42b5      	cmp	r5, r6
 800651c:	d00c      	beq.n	8006538 <_svfiprintf_r+0x74>
 800651e:	0032      	movs	r2, r6
 8006520:	0039      	movs	r1, r7
 8006522:	9803      	ldr	r0, [sp, #12]
 8006524:	f7ff ff6c 	bl	8006400 <__ssputs_r>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d100      	bne.n	800652e <_svfiprintf_r+0x6a>
 800652c:	e0ae      	b.n	800668c <_svfiprintf_r+0x1c8>
 800652e:	6962      	ldr	r2, [r4, #20]
 8006530:	9b05      	ldr	r3, [sp, #20]
 8006532:	4694      	mov	ip, r2
 8006534:	4463      	add	r3, ip
 8006536:	6163      	str	r3, [r4, #20]
 8006538:	782b      	ldrb	r3, [r5, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d100      	bne.n	8006540 <_svfiprintf_r+0x7c>
 800653e:	e0a5      	b.n	800668c <_svfiprintf_r+0x1c8>
 8006540:	2201      	movs	r2, #1
 8006542:	2300      	movs	r3, #0
 8006544:	4252      	negs	r2, r2
 8006546:	6062      	str	r2, [r4, #4]
 8006548:	a904      	add	r1, sp, #16
 800654a:	3254      	adds	r2, #84	; 0x54
 800654c:	1852      	adds	r2, r2, r1
 800654e:	1c6e      	adds	r6, r5, #1
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	60e3      	str	r3, [r4, #12]
 8006554:	60a3      	str	r3, [r4, #8]
 8006556:	7013      	strb	r3, [r2, #0]
 8006558:	65a3      	str	r3, [r4, #88]	; 0x58
 800655a:	2205      	movs	r2, #5
 800655c:	7831      	ldrb	r1, [r6, #0]
 800655e:	4854      	ldr	r0, [pc, #336]	; (80066b0 <_svfiprintf_r+0x1ec>)
 8006560:	f000 fa32 	bl	80069c8 <memchr>
 8006564:	1c75      	adds	r5, r6, #1
 8006566:	2800      	cmp	r0, #0
 8006568:	d11f      	bne.n	80065aa <_svfiprintf_r+0xe6>
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	06d3      	lsls	r3, r2, #27
 800656e:	d504      	bpl.n	800657a <_svfiprintf_r+0xb6>
 8006570:	2353      	movs	r3, #83	; 0x53
 8006572:	a904      	add	r1, sp, #16
 8006574:	185b      	adds	r3, r3, r1
 8006576:	2120      	movs	r1, #32
 8006578:	7019      	strb	r1, [r3, #0]
 800657a:	0713      	lsls	r3, r2, #28
 800657c:	d504      	bpl.n	8006588 <_svfiprintf_r+0xc4>
 800657e:	2353      	movs	r3, #83	; 0x53
 8006580:	a904      	add	r1, sp, #16
 8006582:	185b      	adds	r3, r3, r1
 8006584:	212b      	movs	r1, #43	; 0x2b
 8006586:	7019      	strb	r1, [r3, #0]
 8006588:	7833      	ldrb	r3, [r6, #0]
 800658a:	2b2a      	cmp	r3, #42	; 0x2a
 800658c:	d016      	beq.n	80065bc <_svfiprintf_r+0xf8>
 800658e:	0035      	movs	r5, r6
 8006590:	2100      	movs	r1, #0
 8006592:	200a      	movs	r0, #10
 8006594:	68e3      	ldr	r3, [r4, #12]
 8006596:	782a      	ldrb	r2, [r5, #0]
 8006598:	1c6e      	adds	r6, r5, #1
 800659a:	3a30      	subs	r2, #48	; 0x30
 800659c:	2a09      	cmp	r2, #9
 800659e:	d94e      	bls.n	800663e <_svfiprintf_r+0x17a>
 80065a0:	2900      	cmp	r1, #0
 80065a2:	d111      	bne.n	80065c8 <_svfiprintf_r+0x104>
 80065a4:	e017      	b.n	80065d6 <_svfiprintf_r+0x112>
 80065a6:	3501      	adds	r5, #1
 80065a8:	e7b0      	b.n	800650c <_svfiprintf_r+0x48>
 80065aa:	4b41      	ldr	r3, [pc, #260]	; (80066b0 <_svfiprintf_r+0x1ec>)
 80065ac:	6822      	ldr	r2, [r4, #0]
 80065ae:	1ac0      	subs	r0, r0, r3
 80065b0:	2301      	movs	r3, #1
 80065b2:	4083      	lsls	r3, r0
 80065b4:	4313      	orrs	r3, r2
 80065b6:	002e      	movs	r6, r5
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	e7ce      	b.n	800655a <_svfiprintf_r+0x96>
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	1d19      	adds	r1, r3, #4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	9107      	str	r1, [sp, #28]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	db01      	blt.n	80065cc <_svfiprintf_r+0x108>
 80065c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80065ca:	e004      	b.n	80065d6 <_svfiprintf_r+0x112>
 80065cc:	425b      	negs	r3, r3
 80065ce:	60e3      	str	r3, [r4, #12]
 80065d0:	2302      	movs	r3, #2
 80065d2:	4313      	orrs	r3, r2
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	782b      	ldrb	r3, [r5, #0]
 80065d8:	2b2e      	cmp	r3, #46	; 0x2e
 80065da:	d10a      	bne.n	80065f2 <_svfiprintf_r+0x12e>
 80065dc:	786b      	ldrb	r3, [r5, #1]
 80065de:	2b2a      	cmp	r3, #42	; 0x2a
 80065e0:	d135      	bne.n	800664e <_svfiprintf_r+0x18a>
 80065e2:	9b07      	ldr	r3, [sp, #28]
 80065e4:	3502      	adds	r5, #2
 80065e6:	1d1a      	adds	r2, r3, #4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	9207      	str	r2, [sp, #28]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	db2b      	blt.n	8006648 <_svfiprintf_r+0x184>
 80065f0:	9309      	str	r3, [sp, #36]	; 0x24
 80065f2:	4e30      	ldr	r6, [pc, #192]	; (80066b4 <_svfiprintf_r+0x1f0>)
 80065f4:	2203      	movs	r2, #3
 80065f6:	0030      	movs	r0, r6
 80065f8:	7829      	ldrb	r1, [r5, #0]
 80065fa:	f000 f9e5 	bl	80069c8 <memchr>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d006      	beq.n	8006610 <_svfiprintf_r+0x14c>
 8006602:	2340      	movs	r3, #64	; 0x40
 8006604:	1b80      	subs	r0, r0, r6
 8006606:	4083      	lsls	r3, r0
 8006608:	6822      	ldr	r2, [r4, #0]
 800660a:	3501      	adds	r5, #1
 800660c:	4313      	orrs	r3, r2
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	7829      	ldrb	r1, [r5, #0]
 8006612:	2206      	movs	r2, #6
 8006614:	4828      	ldr	r0, [pc, #160]	; (80066b8 <_svfiprintf_r+0x1f4>)
 8006616:	1c6e      	adds	r6, r5, #1
 8006618:	7621      	strb	r1, [r4, #24]
 800661a:	f000 f9d5 	bl	80069c8 <memchr>
 800661e:	2800      	cmp	r0, #0
 8006620:	d03c      	beq.n	800669c <_svfiprintf_r+0x1d8>
 8006622:	4b26      	ldr	r3, [pc, #152]	; (80066bc <_svfiprintf_r+0x1f8>)
 8006624:	2b00      	cmp	r3, #0
 8006626:	d125      	bne.n	8006674 <_svfiprintf_r+0x1b0>
 8006628:	2207      	movs	r2, #7
 800662a:	9b07      	ldr	r3, [sp, #28]
 800662c:	3307      	adds	r3, #7
 800662e:	4393      	bics	r3, r2
 8006630:	3308      	adds	r3, #8
 8006632:	9307      	str	r3, [sp, #28]
 8006634:	6963      	ldr	r3, [r4, #20]
 8006636:	9a04      	ldr	r2, [sp, #16]
 8006638:	189b      	adds	r3, r3, r2
 800663a:	6163      	str	r3, [r4, #20]
 800663c:	e765      	b.n	800650a <_svfiprintf_r+0x46>
 800663e:	4343      	muls	r3, r0
 8006640:	0035      	movs	r5, r6
 8006642:	2101      	movs	r1, #1
 8006644:	189b      	adds	r3, r3, r2
 8006646:	e7a6      	b.n	8006596 <_svfiprintf_r+0xd2>
 8006648:	2301      	movs	r3, #1
 800664a:	425b      	negs	r3, r3
 800664c:	e7d0      	b.n	80065f0 <_svfiprintf_r+0x12c>
 800664e:	2300      	movs	r3, #0
 8006650:	200a      	movs	r0, #10
 8006652:	001a      	movs	r2, r3
 8006654:	3501      	adds	r5, #1
 8006656:	6063      	str	r3, [r4, #4]
 8006658:	7829      	ldrb	r1, [r5, #0]
 800665a:	1c6e      	adds	r6, r5, #1
 800665c:	3930      	subs	r1, #48	; 0x30
 800665e:	2909      	cmp	r1, #9
 8006660:	d903      	bls.n	800666a <_svfiprintf_r+0x1a6>
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0c5      	beq.n	80065f2 <_svfiprintf_r+0x12e>
 8006666:	9209      	str	r2, [sp, #36]	; 0x24
 8006668:	e7c3      	b.n	80065f2 <_svfiprintf_r+0x12e>
 800666a:	4342      	muls	r2, r0
 800666c:	0035      	movs	r5, r6
 800666e:	2301      	movs	r3, #1
 8006670:	1852      	adds	r2, r2, r1
 8006672:	e7f1      	b.n	8006658 <_svfiprintf_r+0x194>
 8006674:	ab07      	add	r3, sp, #28
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	003a      	movs	r2, r7
 800667a:	0021      	movs	r1, r4
 800667c:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <_svfiprintf_r+0x1fc>)
 800667e:	9803      	ldr	r0, [sp, #12]
 8006680:	e000      	b.n	8006684 <_svfiprintf_r+0x1c0>
 8006682:	bf00      	nop
 8006684:	9004      	str	r0, [sp, #16]
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	d1d3      	bne.n	8006634 <_svfiprintf_r+0x170>
 800668c:	89bb      	ldrh	r3, [r7, #12]
 800668e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006690:	065b      	lsls	r3, r3, #25
 8006692:	d400      	bmi.n	8006696 <_svfiprintf_r+0x1d2>
 8006694:	e72d      	b.n	80064f2 <_svfiprintf_r+0x2e>
 8006696:	2001      	movs	r0, #1
 8006698:	4240      	negs	r0, r0
 800669a:	e72a      	b.n	80064f2 <_svfiprintf_r+0x2e>
 800669c:	ab07      	add	r3, sp, #28
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	003a      	movs	r2, r7
 80066a2:	0021      	movs	r1, r4
 80066a4:	4b06      	ldr	r3, [pc, #24]	; (80066c0 <_svfiprintf_r+0x1fc>)
 80066a6:	9803      	ldr	r0, [sp, #12]
 80066a8:	f000 f87c 	bl	80067a4 <_printf_i>
 80066ac:	e7ea      	b.n	8006684 <_svfiprintf_r+0x1c0>
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	08006e65 	.word	0x08006e65
 80066b4:	08006e6b 	.word	0x08006e6b
 80066b8:	08006e6f 	.word	0x08006e6f
 80066bc:	00000000 	.word	0x00000000
 80066c0:	08006401 	.word	0x08006401

080066c4 <_printf_common>:
 80066c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066c6:	0015      	movs	r5, r2
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	688a      	ldr	r2, [r1, #8]
 80066cc:	690b      	ldr	r3, [r1, #16]
 80066ce:	000c      	movs	r4, r1
 80066d0:	9000      	str	r0, [sp, #0]
 80066d2:	4293      	cmp	r3, r2
 80066d4:	da00      	bge.n	80066d8 <_printf_common+0x14>
 80066d6:	0013      	movs	r3, r2
 80066d8:	0022      	movs	r2, r4
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	3243      	adds	r2, #67	; 0x43
 80066de:	7812      	ldrb	r2, [r2, #0]
 80066e0:	2a00      	cmp	r2, #0
 80066e2:	d001      	beq.n	80066e8 <_printf_common+0x24>
 80066e4:	3301      	adds	r3, #1
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	069b      	lsls	r3, r3, #26
 80066ec:	d502      	bpl.n	80066f4 <_printf_common+0x30>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	3302      	adds	r3, #2
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	6822      	ldr	r2, [r4, #0]
 80066f6:	2306      	movs	r3, #6
 80066f8:	0017      	movs	r7, r2
 80066fa:	401f      	ands	r7, r3
 80066fc:	421a      	tst	r2, r3
 80066fe:	d027      	beq.n	8006750 <_printf_common+0x8c>
 8006700:	0023      	movs	r3, r4
 8006702:	3343      	adds	r3, #67	; 0x43
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	1e5a      	subs	r2, r3, #1
 8006708:	4193      	sbcs	r3, r2
 800670a:	6822      	ldr	r2, [r4, #0]
 800670c:	0692      	lsls	r2, r2, #26
 800670e:	d430      	bmi.n	8006772 <_printf_common+0xae>
 8006710:	0022      	movs	r2, r4
 8006712:	9901      	ldr	r1, [sp, #4]
 8006714:	9800      	ldr	r0, [sp, #0]
 8006716:	9e08      	ldr	r6, [sp, #32]
 8006718:	3243      	adds	r2, #67	; 0x43
 800671a:	47b0      	blx	r6
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d025      	beq.n	800676c <_printf_common+0xa8>
 8006720:	2306      	movs	r3, #6
 8006722:	6820      	ldr	r0, [r4, #0]
 8006724:	682a      	ldr	r2, [r5, #0]
 8006726:	68e1      	ldr	r1, [r4, #12]
 8006728:	2500      	movs	r5, #0
 800672a:	4003      	ands	r3, r0
 800672c:	2b04      	cmp	r3, #4
 800672e:	d103      	bne.n	8006738 <_printf_common+0x74>
 8006730:	1a8d      	subs	r5, r1, r2
 8006732:	43eb      	mvns	r3, r5
 8006734:	17db      	asrs	r3, r3, #31
 8006736:	401d      	ands	r5, r3
 8006738:	68a3      	ldr	r3, [r4, #8]
 800673a:	6922      	ldr	r2, [r4, #16]
 800673c:	4293      	cmp	r3, r2
 800673e:	dd01      	ble.n	8006744 <_printf_common+0x80>
 8006740:	1a9b      	subs	r3, r3, r2
 8006742:	18ed      	adds	r5, r5, r3
 8006744:	2700      	movs	r7, #0
 8006746:	42bd      	cmp	r5, r7
 8006748:	d120      	bne.n	800678c <_printf_common+0xc8>
 800674a:	2000      	movs	r0, #0
 800674c:	e010      	b.n	8006770 <_printf_common+0xac>
 800674e:	3701      	adds	r7, #1
 8006750:	68e3      	ldr	r3, [r4, #12]
 8006752:	682a      	ldr	r2, [r5, #0]
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	42bb      	cmp	r3, r7
 8006758:	ddd2      	ble.n	8006700 <_printf_common+0x3c>
 800675a:	0022      	movs	r2, r4
 800675c:	2301      	movs	r3, #1
 800675e:	9901      	ldr	r1, [sp, #4]
 8006760:	9800      	ldr	r0, [sp, #0]
 8006762:	9e08      	ldr	r6, [sp, #32]
 8006764:	3219      	adds	r2, #25
 8006766:	47b0      	blx	r6
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d1f0      	bne.n	800674e <_printf_common+0x8a>
 800676c:	2001      	movs	r0, #1
 800676e:	4240      	negs	r0, r0
 8006770:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006772:	2030      	movs	r0, #48	; 0x30
 8006774:	18e1      	adds	r1, r4, r3
 8006776:	3143      	adds	r1, #67	; 0x43
 8006778:	7008      	strb	r0, [r1, #0]
 800677a:	0021      	movs	r1, r4
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	3145      	adds	r1, #69	; 0x45
 8006780:	7809      	ldrb	r1, [r1, #0]
 8006782:	18a2      	adds	r2, r4, r2
 8006784:	3243      	adds	r2, #67	; 0x43
 8006786:	3302      	adds	r3, #2
 8006788:	7011      	strb	r1, [r2, #0]
 800678a:	e7c1      	b.n	8006710 <_printf_common+0x4c>
 800678c:	0022      	movs	r2, r4
 800678e:	2301      	movs	r3, #1
 8006790:	9901      	ldr	r1, [sp, #4]
 8006792:	9800      	ldr	r0, [sp, #0]
 8006794:	9e08      	ldr	r6, [sp, #32]
 8006796:	321a      	adds	r2, #26
 8006798:	47b0      	blx	r6
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d0e6      	beq.n	800676c <_printf_common+0xa8>
 800679e:	3701      	adds	r7, #1
 80067a0:	e7d1      	b.n	8006746 <_printf_common+0x82>
	...

080067a4 <_printf_i>:
 80067a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067a6:	b08b      	sub	sp, #44	; 0x2c
 80067a8:	9206      	str	r2, [sp, #24]
 80067aa:	000a      	movs	r2, r1
 80067ac:	3243      	adds	r2, #67	; 0x43
 80067ae:	9307      	str	r3, [sp, #28]
 80067b0:	9005      	str	r0, [sp, #20]
 80067b2:	9204      	str	r2, [sp, #16]
 80067b4:	7e0a      	ldrb	r2, [r1, #24]
 80067b6:	000c      	movs	r4, r1
 80067b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067ba:	2a78      	cmp	r2, #120	; 0x78
 80067bc:	d807      	bhi.n	80067ce <_printf_i+0x2a>
 80067be:	2a62      	cmp	r2, #98	; 0x62
 80067c0:	d809      	bhi.n	80067d6 <_printf_i+0x32>
 80067c2:	2a00      	cmp	r2, #0
 80067c4:	d100      	bne.n	80067c8 <_printf_i+0x24>
 80067c6:	e0c1      	b.n	800694c <_printf_i+0x1a8>
 80067c8:	2a58      	cmp	r2, #88	; 0x58
 80067ca:	d100      	bne.n	80067ce <_printf_i+0x2a>
 80067cc:	e08c      	b.n	80068e8 <_printf_i+0x144>
 80067ce:	0026      	movs	r6, r4
 80067d0:	3642      	adds	r6, #66	; 0x42
 80067d2:	7032      	strb	r2, [r6, #0]
 80067d4:	e022      	b.n	800681c <_printf_i+0x78>
 80067d6:	0010      	movs	r0, r2
 80067d8:	3863      	subs	r0, #99	; 0x63
 80067da:	2815      	cmp	r0, #21
 80067dc:	d8f7      	bhi.n	80067ce <_printf_i+0x2a>
 80067de:	f7f9 fc97 	bl	8000110 <__gnu_thumb1_case_shi>
 80067e2:	0016      	.short	0x0016
 80067e4:	fff6001f 	.word	0xfff6001f
 80067e8:	fff6fff6 	.word	0xfff6fff6
 80067ec:	001ffff6 	.word	0x001ffff6
 80067f0:	fff6fff6 	.word	0xfff6fff6
 80067f4:	fff6fff6 	.word	0xfff6fff6
 80067f8:	003600a8 	.word	0x003600a8
 80067fc:	fff6009a 	.word	0xfff6009a
 8006800:	00b9fff6 	.word	0x00b9fff6
 8006804:	0036fff6 	.word	0x0036fff6
 8006808:	fff6fff6 	.word	0xfff6fff6
 800680c:	009e      	.short	0x009e
 800680e:	0026      	movs	r6, r4
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	3642      	adds	r6, #66	; 0x42
 8006814:	1d11      	adds	r1, r2, #4
 8006816:	6019      	str	r1, [r3, #0]
 8006818:	6813      	ldr	r3, [r2, #0]
 800681a:	7033      	strb	r3, [r6, #0]
 800681c:	2301      	movs	r3, #1
 800681e:	e0a7      	b.n	8006970 <_printf_i+0x1cc>
 8006820:	6808      	ldr	r0, [r1, #0]
 8006822:	6819      	ldr	r1, [r3, #0]
 8006824:	1d0a      	adds	r2, r1, #4
 8006826:	0605      	lsls	r5, r0, #24
 8006828:	d50b      	bpl.n	8006842 <_printf_i+0x9e>
 800682a:	680d      	ldr	r5, [r1, #0]
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	2d00      	cmp	r5, #0
 8006830:	da03      	bge.n	800683a <_printf_i+0x96>
 8006832:	232d      	movs	r3, #45	; 0x2d
 8006834:	9a04      	ldr	r2, [sp, #16]
 8006836:	426d      	negs	r5, r5
 8006838:	7013      	strb	r3, [r2, #0]
 800683a:	4b61      	ldr	r3, [pc, #388]	; (80069c0 <_printf_i+0x21c>)
 800683c:	270a      	movs	r7, #10
 800683e:	9303      	str	r3, [sp, #12]
 8006840:	e01b      	b.n	800687a <_printf_i+0xd6>
 8006842:	680d      	ldr	r5, [r1, #0]
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	0641      	lsls	r1, r0, #25
 8006848:	d5f1      	bpl.n	800682e <_printf_i+0x8a>
 800684a:	b22d      	sxth	r5, r5
 800684c:	e7ef      	b.n	800682e <_printf_i+0x8a>
 800684e:	680d      	ldr	r5, [r1, #0]
 8006850:	6819      	ldr	r1, [r3, #0]
 8006852:	1d08      	adds	r0, r1, #4
 8006854:	6018      	str	r0, [r3, #0]
 8006856:	062e      	lsls	r6, r5, #24
 8006858:	d501      	bpl.n	800685e <_printf_i+0xba>
 800685a:	680d      	ldr	r5, [r1, #0]
 800685c:	e003      	b.n	8006866 <_printf_i+0xc2>
 800685e:	066d      	lsls	r5, r5, #25
 8006860:	d5fb      	bpl.n	800685a <_printf_i+0xb6>
 8006862:	680d      	ldr	r5, [r1, #0]
 8006864:	b2ad      	uxth	r5, r5
 8006866:	4b56      	ldr	r3, [pc, #344]	; (80069c0 <_printf_i+0x21c>)
 8006868:	2708      	movs	r7, #8
 800686a:	9303      	str	r3, [sp, #12]
 800686c:	2a6f      	cmp	r2, #111	; 0x6f
 800686e:	d000      	beq.n	8006872 <_printf_i+0xce>
 8006870:	3702      	adds	r7, #2
 8006872:	0023      	movs	r3, r4
 8006874:	2200      	movs	r2, #0
 8006876:	3343      	adds	r3, #67	; 0x43
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	6863      	ldr	r3, [r4, #4]
 800687c:	60a3      	str	r3, [r4, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	db03      	blt.n	800688a <_printf_i+0xe6>
 8006882:	2204      	movs	r2, #4
 8006884:	6821      	ldr	r1, [r4, #0]
 8006886:	4391      	bics	r1, r2
 8006888:	6021      	str	r1, [r4, #0]
 800688a:	2d00      	cmp	r5, #0
 800688c:	d102      	bne.n	8006894 <_printf_i+0xf0>
 800688e:	9e04      	ldr	r6, [sp, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00c      	beq.n	80068ae <_printf_i+0x10a>
 8006894:	9e04      	ldr	r6, [sp, #16]
 8006896:	0028      	movs	r0, r5
 8006898:	0039      	movs	r1, r7
 800689a:	f7f9 fcc9 	bl	8000230 <__aeabi_uidivmod>
 800689e:	9b03      	ldr	r3, [sp, #12]
 80068a0:	3e01      	subs	r6, #1
 80068a2:	5c5b      	ldrb	r3, [r3, r1]
 80068a4:	7033      	strb	r3, [r6, #0]
 80068a6:	002b      	movs	r3, r5
 80068a8:	0005      	movs	r5, r0
 80068aa:	429f      	cmp	r7, r3
 80068ac:	d9f3      	bls.n	8006896 <_printf_i+0xf2>
 80068ae:	2f08      	cmp	r7, #8
 80068b0:	d109      	bne.n	80068c6 <_printf_i+0x122>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	07db      	lsls	r3, r3, #31
 80068b6:	d506      	bpl.n	80068c6 <_printf_i+0x122>
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	6922      	ldr	r2, [r4, #16]
 80068bc:	4293      	cmp	r3, r2
 80068be:	dc02      	bgt.n	80068c6 <_printf_i+0x122>
 80068c0:	2330      	movs	r3, #48	; 0x30
 80068c2:	3e01      	subs	r6, #1
 80068c4:	7033      	strb	r3, [r6, #0]
 80068c6:	9b04      	ldr	r3, [sp, #16]
 80068c8:	1b9b      	subs	r3, r3, r6
 80068ca:	6123      	str	r3, [r4, #16]
 80068cc:	9b07      	ldr	r3, [sp, #28]
 80068ce:	0021      	movs	r1, r4
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	9805      	ldr	r0, [sp, #20]
 80068d4:	9b06      	ldr	r3, [sp, #24]
 80068d6:	aa09      	add	r2, sp, #36	; 0x24
 80068d8:	f7ff fef4 	bl	80066c4 <_printf_common>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d14c      	bne.n	800697a <_printf_i+0x1d6>
 80068e0:	2001      	movs	r0, #1
 80068e2:	4240      	negs	r0, r0
 80068e4:	b00b      	add	sp, #44	; 0x2c
 80068e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068e8:	3145      	adds	r1, #69	; 0x45
 80068ea:	700a      	strb	r2, [r1, #0]
 80068ec:	4a34      	ldr	r2, [pc, #208]	; (80069c0 <_printf_i+0x21c>)
 80068ee:	9203      	str	r2, [sp, #12]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	6821      	ldr	r1, [r4, #0]
 80068f4:	ca20      	ldmia	r2!, {r5}
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	0608      	lsls	r0, r1, #24
 80068fa:	d516      	bpl.n	800692a <_printf_i+0x186>
 80068fc:	07cb      	lsls	r3, r1, #31
 80068fe:	d502      	bpl.n	8006906 <_printf_i+0x162>
 8006900:	2320      	movs	r3, #32
 8006902:	4319      	orrs	r1, r3
 8006904:	6021      	str	r1, [r4, #0]
 8006906:	2710      	movs	r7, #16
 8006908:	2d00      	cmp	r5, #0
 800690a:	d1b2      	bne.n	8006872 <_printf_i+0xce>
 800690c:	2320      	movs	r3, #32
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	439a      	bics	r2, r3
 8006912:	6022      	str	r2, [r4, #0]
 8006914:	e7ad      	b.n	8006872 <_printf_i+0xce>
 8006916:	2220      	movs	r2, #32
 8006918:	6809      	ldr	r1, [r1, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	6022      	str	r2, [r4, #0]
 800691e:	0022      	movs	r2, r4
 8006920:	2178      	movs	r1, #120	; 0x78
 8006922:	3245      	adds	r2, #69	; 0x45
 8006924:	7011      	strb	r1, [r2, #0]
 8006926:	4a27      	ldr	r2, [pc, #156]	; (80069c4 <_printf_i+0x220>)
 8006928:	e7e1      	b.n	80068ee <_printf_i+0x14a>
 800692a:	0648      	lsls	r0, r1, #25
 800692c:	d5e6      	bpl.n	80068fc <_printf_i+0x158>
 800692e:	b2ad      	uxth	r5, r5
 8006930:	e7e4      	b.n	80068fc <_printf_i+0x158>
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	680d      	ldr	r5, [r1, #0]
 8006936:	1d10      	adds	r0, r2, #4
 8006938:	6949      	ldr	r1, [r1, #20]
 800693a:	6018      	str	r0, [r3, #0]
 800693c:	6813      	ldr	r3, [r2, #0]
 800693e:	062e      	lsls	r6, r5, #24
 8006940:	d501      	bpl.n	8006946 <_printf_i+0x1a2>
 8006942:	6019      	str	r1, [r3, #0]
 8006944:	e002      	b.n	800694c <_printf_i+0x1a8>
 8006946:	066d      	lsls	r5, r5, #25
 8006948:	d5fb      	bpl.n	8006942 <_printf_i+0x19e>
 800694a:	8019      	strh	r1, [r3, #0]
 800694c:	2300      	movs	r3, #0
 800694e:	9e04      	ldr	r6, [sp, #16]
 8006950:	6123      	str	r3, [r4, #16]
 8006952:	e7bb      	b.n	80068cc <_printf_i+0x128>
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	1d11      	adds	r1, r2, #4
 8006958:	6019      	str	r1, [r3, #0]
 800695a:	6816      	ldr	r6, [r2, #0]
 800695c:	2100      	movs	r1, #0
 800695e:	0030      	movs	r0, r6
 8006960:	6862      	ldr	r2, [r4, #4]
 8006962:	f000 f831 	bl	80069c8 <memchr>
 8006966:	2800      	cmp	r0, #0
 8006968:	d001      	beq.n	800696e <_printf_i+0x1ca>
 800696a:	1b80      	subs	r0, r0, r6
 800696c:	6060      	str	r0, [r4, #4]
 800696e:	6863      	ldr	r3, [r4, #4]
 8006970:	6123      	str	r3, [r4, #16]
 8006972:	2300      	movs	r3, #0
 8006974:	9a04      	ldr	r2, [sp, #16]
 8006976:	7013      	strb	r3, [r2, #0]
 8006978:	e7a8      	b.n	80068cc <_printf_i+0x128>
 800697a:	6923      	ldr	r3, [r4, #16]
 800697c:	0032      	movs	r2, r6
 800697e:	9906      	ldr	r1, [sp, #24]
 8006980:	9805      	ldr	r0, [sp, #20]
 8006982:	9d07      	ldr	r5, [sp, #28]
 8006984:	47a8      	blx	r5
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	d0aa      	beq.n	80068e0 <_printf_i+0x13c>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	079b      	lsls	r3, r3, #30
 800698e:	d415      	bmi.n	80069bc <_printf_i+0x218>
 8006990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006992:	68e0      	ldr	r0, [r4, #12]
 8006994:	4298      	cmp	r0, r3
 8006996:	daa5      	bge.n	80068e4 <_printf_i+0x140>
 8006998:	0018      	movs	r0, r3
 800699a:	e7a3      	b.n	80068e4 <_printf_i+0x140>
 800699c:	0022      	movs	r2, r4
 800699e:	2301      	movs	r3, #1
 80069a0:	9906      	ldr	r1, [sp, #24]
 80069a2:	9805      	ldr	r0, [sp, #20]
 80069a4:	9e07      	ldr	r6, [sp, #28]
 80069a6:	3219      	adds	r2, #25
 80069a8:	47b0      	blx	r6
 80069aa:	1c43      	adds	r3, r0, #1
 80069ac:	d098      	beq.n	80068e0 <_printf_i+0x13c>
 80069ae:	3501      	adds	r5, #1
 80069b0:	68e3      	ldr	r3, [r4, #12]
 80069b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	42ab      	cmp	r3, r5
 80069b8:	dcf0      	bgt.n	800699c <_printf_i+0x1f8>
 80069ba:	e7e9      	b.n	8006990 <_printf_i+0x1ec>
 80069bc:	2500      	movs	r5, #0
 80069be:	e7f7      	b.n	80069b0 <_printf_i+0x20c>
 80069c0:	08006e76 	.word	0x08006e76
 80069c4:	08006e87 	.word	0x08006e87

080069c8 <memchr>:
 80069c8:	b2c9      	uxtb	r1, r1
 80069ca:	1882      	adds	r2, r0, r2
 80069cc:	4290      	cmp	r0, r2
 80069ce:	d101      	bne.n	80069d4 <memchr+0xc>
 80069d0:	2000      	movs	r0, #0
 80069d2:	4770      	bx	lr
 80069d4:	7803      	ldrb	r3, [r0, #0]
 80069d6:	428b      	cmp	r3, r1
 80069d8:	d0fb      	beq.n	80069d2 <memchr+0xa>
 80069da:	3001      	adds	r0, #1
 80069dc:	e7f6      	b.n	80069cc <memchr+0x4>

080069de <memcpy>:
 80069de:	2300      	movs	r3, #0
 80069e0:	b510      	push	{r4, lr}
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d100      	bne.n	80069e8 <memcpy+0xa>
 80069e6:	bd10      	pop	{r4, pc}
 80069e8:	5ccc      	ldrb	r4, [r1, r3]
 80069ea:	54c4      	strb	r4, [r0, r3]
 80069ec:	3301      	adds	r3, #1
 80069ee:	e7f8      	b.n	80069e2 <memcpy+0x4>

080069f0 <memmove>:
 80069f0:	b510      	push	{r4, lr}
 80069f2:	4288      	cmp	r0, r1
 80069f4:	d902      	bls.n	80069fc <memmove+0xc>
 80069f6:	188b      	adds	r3, r1, r2
 80069f8:	4298      	cmp	r0, r3
 80069fa:	d303      	bcc.n	8006a04 <memmove+0x14>
 80069fc:	2300      	movs	r3, #0
 80069fe:	e007      	b.n	8006a10 <memmove+0x20>
 8006a00:	5c8b      	ldrb	r3, [r1, r2]
 8006a02:	5483      	strb	r3, [r0, r2]
 8006a04:	3a01      	subs	r2, #1
 8006a06:	d2fb      	bcs.n	8006a00 <memmove+0x10>
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	5ccc      	ldrb	r4, [r1, r3]
 8006a0c:	54c4      	strb	r4, [r0, r3]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d1fa      	bne.n	8006a0a <memmove+0x1a>
 8006a14:	e7f8      	b.n	8006a08 <memmove+0x18>
	...

08006a18 <_free_r>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	0005      	movs	r5, r0
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	d010      	beq.n	8006a42 <_free_r+0x2a>
 8006a20:	1f0c      	subs	r4, r1, #4
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	da00      	bge.n	8006a2a <_free_r+0x12>
 8006a28:	18e4      	adds	r4, r4, r3
 8006a2a:	0028      	movs	r0, r5
 8006a2c:	f000 f918 	bl	8006c60 <__malloc_lock>
 8006a30:	4a1d      	ldr	r2, [pc, #116]	; (8006aa8 <_free_r+0x90>)
 8006a32:	6813      	ldr	r3, [r2, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <_free_r+0x2c>
 8006a38:	6063      	str	r3, [r4, #4]
 8006a3a:	6014      	str	r4, [r2, #0]
 8006a3c:	0028      	movs	r0, r5
 8006a3e:	f000 f917 	bl	8006c70 <__malloc_unlock>
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d908      	bls.n	8006a5a <_free_r+0x42>
 8006a48:	6821      	ldr	r1, [r4, #0]
 8006a4a:	1860      	adds	r0, r4, r1
 8006a4c:	4283      	cmp	r3, r0
 8006a4e:	d1f3      	bne.n	8006a38 <_free_r+0x20>
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	1841      	adds	r1, r0, r1
 8006a56:	6021      	str	r1, [r4, #0]
 8006a58:	e7ee      	b.n	8006a38 <_free_r+0x20>
 8006a5a:	001a      	movs	r2, r3
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <_free_r+0x4e>
 8006a62:	42a3      	cmp	r3, r4
 8006a64:	d9f9      	bls.n	8006a5a <_free_r+0x42>
 8006a66:	6811      	ldr	r1, [r2, #0]
 8006a68:	1850      	adds	r0, r2, r1
 8006a6a:	42a0      	cmp	r0, r4
 8006a6c:	d10b      	bne.n	8006a86 <_free_r+0x6e>
 8006a6e:	6820      	ldr	r0, [r4, #0]
 8006a70:	1809      	adds	r1, r1, r0
 8006a72:	1850      	adds	r0, r2, r1
 8006a74:	6011      	str	r1, [r2, #0]
 8006a76:	4283      	cmp	r3, r0
 8006a78:	d1e0      	bne.n	8006a3c <_free_r+0x24>
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	1841      	adds	r1, r0, r1
 8006a80:	6011      	str	r1, [r2, #0]
 8006a82:	6053      	str	r3, [r2, #4]
 8006a84:	e7da      	b.n	8006a3c <_free_r+0x24>
 8006a86:	42a0      	cmp	r0, r4
 8006a88:	d902      	bls.n	8006a90 <_free_r+0x78>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	e7d5      	b.n	8006a3c <_free_r+0x24>
 8006a90:	6821      	ldr	r1, [r4, #0]
 8006a92:	1860      	adds	r0, r4, r1
 8006a94:	4283      	cmp	r3, r0
 8006a96:	d103      	bne.n	8006aa0 <_free_r+0x88>
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	1841      	adds	r1, r0, r1
 8006a9e:	6021      	str	r1, [r4, #0]
 8006aa0:	6063      	str	r3, [r4, #4]
 8006aa2:	6054      	str	r4, [r2, #4]
 8006aa4:	e7ca      	b.n	8006a3c <_free_r+0x24>
 8006aa6:	46c0      	nop			; (mov r8, r8)
 8006aa8:	20005640 	.word	0x20005640

08006aac <sbrk_aligned>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4e0f      	ldr	r6, [pc, #60]	; (8006aec <sbrk_aligned+0x40>)
 8006ab0:	000d      	movs	r5, r1
 8006ab2:	6831      	ldr	r1, [r6, #0]
 8006ab4:	0004      	movs	r4, r0
 8006ab6:	2900      	cmp	r1, #0
 8006ab8:	d102      	bne.n	8006ac0 <sbrk_aligned+0x14>
 8006aba:	f000 f8bf 	bl	8006c3c <_sbrk_r>
 8006abe:	6030      	str	r0, [r6, #0]
 8006ac0:	0029      	movs	r1, r5
 8006ac2:	0020      	movs	r0, r4
 8006ac4:	f000 f8ba 	bl	8006c3c <_sbrk_r>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d00a      	beq.n	8006ae2 <sbrk_aligned+0x36>
 8006acc:	2303      	movs	r3, #3
 8006ace:	1cc5      	adds	r5, r0, #3
 8006ad0:	439d      	bics	r5, r3
 8006ad2:	42a8      	cmp	r0, r5
 8006ad4:	d007      	beq.n	8006ae6 <sbrk_aligned+0x3a>
 8006ad6:	1a29      	subs	r1, r5, r0
 8006ad8:	0020      	movs	r0, r4
 8006ada:	f000 f8af 	bl	8006c3c <_sbrk_r>
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	d101      	bne.n	8006ae6 <sbrk_aligned+0x3a>
 8006ae2:	2501      	movs	r5, #1
 8006ae4:	426d      	negs	r5, r5
 8006ae6:	0028      	movs	r0, r5
 8006ae8:	bd70      	pop	{r4, r5, r6, pc}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	20005644 	.word	0x20005644

08006af0 <_malloc_r>:
 8006af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006af2:	2203      	movs	r2, #3
 8006af4:	1ccb      	adds	r3, r1, #3
 8006af6:	4393      	bics	r3, r2
 8006af8:	3308      	adds	r3, #8
 8006afa:	0006      	movs	r6, r0
 8006afc:	001f      	movs	r7, r3
 8006afe:	2b0c      	cmp	r3, #12
 8006b00:	d232      	bcs.n	8006b68 <_malloc_r+0x78>
 8006b02:	270c      	movs	r7, #12
 8006b04:	42b9      	cmp	r1, r7
 8006b06:	d831      	bhi.n	8006b6c <_malloc_r+0x7c>
 8006b08:	0030      	movs	r0, r6
 8006b0a:	f000 f8a9 	bl	8006c60 <__malloc_lock>
 8006b0e:	4d32      	ldr	r5, [pc, #200]	; (8006bd8 <_malloc_r+0xe8>)
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	001c      	movs	r4, r3
 8006b14:	2c00      	cmp	r4, #0
 8006b16:	d12e      	bne.n	8006b76 <_malloc_r+0x86>
 8006b18:	0039      	movs	r1, r7
 8006b1a:	0030      	movs	r0, r6
 8006b1c:	f7ff ffc6 	bl	8006aac <sbrk_aligned>
 8006b20:	0004      	movs	r4, r0
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d11e      	bne.n	8006b64 <_malloc_r+0x74>
 8006b26:	682c      	ldr	r4, [r5, #0]
 8006b28:	0025      	movs	r5, r4
 8006b2a:	2d00      	cmp	r5, #0
 8006b2c:	d14a      	bne.n	8006bc4 <_malloc_r+0xd4>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	0029      	movs	r1, r5
 8006b32:	18e3      	adds	r3, r4, r3
 8006b34:	0030      	movs	r0, r6
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	f000 f880 	bl	8006c3c <_sbrk_r>
 8006b3c:	9b01      	ldr	r3, [sp, #4]
 8006b3e:	4283      	cmp	r3, r0
 8006b40:	d143      	bne.n	8006bca <_malloc_r+0xda>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	3703      	adds	r7, #3
 8006b46:	1aff      	subs	r7, r7, r3
 8006b48:	2303      	movs	r3, #3
 8006b4a:	439f      	bics	r7, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	2f0c      	cmp	r7, #12
 8006b50:	d200      	bcs.n	8006b54 <_malloc_r+0x64>
 8006b52:	270c      	movs	r7, #12
 8006b54:	0039      	movs	r1, r7
 8006b56:	0030      	movs	r0, r6
 8006b58:	f7ff ffa8 	bl	8006aac <sbrk_aligned>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d034      	beq.n	8006bca <_malloc_r+0xda>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	19df      	adds	r7, r3, r7
 8006b64:	6027      	str	r7, [r4, #0]
 8006b66:	e013      	b.n	8006b90 <_malloc_r+0xa0>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	dacb      	bge.n	8006b04 <_malloc_r+0x14>
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	2500      	movs	r5, #0
 8006b70:	6033      	str	r3, [r6, #0]
 8006b72:	0028      	movs	r0, r5
 8006b74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	1bd1      	subs	r1, r2, r7
 8006b7a:	d420      	bmi.n	8006bbe <_malloc_r+0xce>
 8006b7c:	290b      	cmp	r1, #11
 8006b7e:	d917      	bls.n	8006bb0 <_malloc_r+0xc0>
 8006b80:	19e2      	adds	r2, r4, r7
 8006b82:	6027      	str	r7, [r4, #0]
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d111      	bne.n	8006bac <_malloc_r+0xbc>
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	6863      	ldr	r3, [r4, #4]
 8006b8c:	6011      	str	r1, [r2, #0]
 8006b8e:	6053      	str	r3, [r2, #4]
 8006b90:	0030      	movs	r0, r6
 8006b92:	0025      	movs	r5, r4
 8006b94:	f000 f86c 	bl	8006c70 <__malloc_unlock>
 8006b98:	2207      	movs	r2, #7
 8006b9a:	350b      	adds	r5, #11
 8006b9c:	1d23      	adds	r3, r4, #4
 8006b9e:	4395      	bics	r5, r2
 8006ba0:	1aea      	subs	r2, r5, r3
 8006ba2:	429d      	cmp	r5, r3
 8006ba4:	d0e5      	beq.n	8006b72 <_malloc_r+0x82>
 8006ba6:	1b5b      	subs	r3, r3, r5
 8006ba8:	50a3      	str	r3, [r4, r2]
 8006baa:	e7e2      	b.n	8006b72 <_malloc_r+0x82>
 8006bac:	605a      	str	r2, [r3, #4]
 8006bae:	e7ec      	b.n	8006b8a <_malloc_r+0x9a>
 8006bb0:	6862      	ldr	r2, [r4, #4]
 8006bb2:	42a3      	cmp	r3, r4
 8006bb4:	d101      	bne.n	8006bba <_malloc_r+0xca>
 8006bb6:	602a      	str	r2, [r5, #0]
 8006bb8:	e7ea      	b.n	8006b90 <_malloc_r+0xa0>
 8006bba:	605a      	str	r2, [r3, #4]
 8006bbc:	e7e8      	b.n	8006b90 <_malloc_r+0xa0>
 8006bbe:	0023      	movs	r3, r4
 8006bc0:	6864      	ldr	r4, [r4, #4]
 8006bc2:	e7a7      	b.n	8006b14 <_malloc_r+0x24>
 8006bc4:	002c      	movs	r4, r5
 8006bc6:	686d      	ldr	r5, [r5, #4]
 8006bc8:	e7af      	b.n	8006b2a <_malloc_r+0x3a>
 8006bca:	230c      	movs	r3, #12
 8006bcc:	0030      	movs	r0, r6
 8006bce:	6033      	str	r3, [r6, #0]
 8006bd0:	f000 f84e 	bl	8006c70 <__malloc_unlock>
 8006bd4:	e7cd      	b.n	8006b72 <_malloc_r+0x82>
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	20005640 	.word	0x20005640

08006bdc <_realloc_r>:
 8006bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bde:	0007      	movs	r7, r0
 8006be0:	000e      	movs	r6, r1
 8006be2:	0014      	movs	r4, r2
 8006be4:	2900      	cmp	r1, #0
 8006be6:	d105      	bne.n	8006bf4 <_realloc_r+0x18>
 8006be8:	0011      	movs	r1, r2
 8006bea:	f7ff ff81 	bl	8006af0 <_malloc_r>
 8006bee:	0005      	movs	r5, r0
 8006bf0:	0028      	movs	r0, r5
 8006bf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bf4:	2a00      	cmp	r2, #0
 8006bf6:	d103      	bne.n	8006c00 <_realloc_r+0x24>
 8006bf8:	f7ff ff0e 	bl	8006a18 <_free_r>
 8006bfc:	0025      	movs	r5, r4
 8006bfe:	e7f7      	b.n	8006bf0 <_realloc_r+0x14>
 8006c00:	f000 f83e 	bl	8006c80 <_malloc_usable_size_r>
 8006c04:	9001      	str	r0, [sp, #4]
 8006c06:	4284      	cmp	r4, r0
 8006c08:	d803      	bhi.n	8006c12 <_realloc_r+0x36>
 8006c0a:	0035      	movs	r5, r6
 8006c0c:	0843      	lsrs	r3, r0, #1
 8006c0e:	42a3      	cmp	r3, r4
 8006c10:	d3ee      	bcc.n	8006bf0 <_realloc_r+0x14>
 8006c12:	0021      	movs	r1, r4
 8006c14:	0038      	movs	r0, r7
 8006c16:	f7ff ff6b 	bl	8006af0 <_malloc_r>
 8006c1a:	1e05      	subs	r5, r0, #0
 8006c1c:	d0e8      	beq.n	8006bf0 <_realloc_r+0x14>
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	0022      	movs	r2, r4
 8006c22:	429c      	cmp	r4, r3
 8006c24:	d900      	bls.n	8006c28 <_realloc_r+0x4c>
 8006c26:	001a      	movs	r2, r3
 8006c28:	0031      	movs	r1, r6
 8006c2a:	0028      	movs	r0, r5
 8006c2c:	f7ff fed7 	bl	80069de <memcpy>
 8006c30:	0031      	movs	r1, r6
 8006c32:	0038      	movs	r0, r7
 8006c34:	f7ff fef0 	bl	8006a18 <_free_r>
 8006c38:	e7da      	b.n	8006bf0 <_realloc_r+0x14>
	...

08006c3c <_sbrk_r>:
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	b570      	push	{r4, r5, r6, lr}
 8006c40:	4d06      	ldr	r5, [pc, #24]	; (8006c5c <_sbrk_r+0x20>)
 8006c42:	0004      	movs	r4, r0
 8006c44:	0008      	movs	r0, r1
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	f7fa fe06 	bl	8001858 <_sbrk>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d103      	bne.n	8006c58 <_sbrk_r+0x1c>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d000      	beq.n	8006c58 <_sbrk_r+0x1c>
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	bd70      	pop	{r4, r5, r6, pc}
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	20005648 	.word	0x20005648

08006c60 <__malloc_lock>:
 8006c60:	b510      	push	{r4, lr}
 8006c62:	4802      	ldr	r0, [pc, #8]	; (8006c6c <__malloc_lock+0xc>)
 8006c64:	f000 f814 	bl	8006c90 <__retarget_lock_acquire_recursive>
 8006c68:	bd10      	pop	{r4, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	2000564c 	.word	0x2000564c

08006c70 <__malloc_unlock>:
 8006c70:	b510      	push	{r4, lr}
 8006c72:	4802      	ldr	r0, [pc, #8]	; (8006c7c <__malloc_unlock+0xc>)
 8006c74:	f000 f80d 	bl	8006c92 <__retarget_lock_release_recursive>
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	2000564c 	.word	0x2000564c

08006c80 <_malloc_usable_size_r>:
 8006c80:	1f0b      	subs	r3, r1, #4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	1f18      	subs	r0, r3, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	da01      	bge.n	8006c8e <_malloc_usable_size_r+0xe>
 8006c8a:	580b      	ldr	r3, [r1, r0]
 8006c8c:	18c0      	adds	r0, r0, r3
 8006c8e:	4770      	bx	lr

08006c90 <__retarget_lock_acquire_recursive>:
 8006c90:	4770      	bx	lr

08006c92 <__retarget_lock_release_recursive>:
 8006c92:	4770      	bx	lr

08006c94 <_init>:
 8006c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9a:	bc08      	pop	{r3}
 8006c9c:	469e      	mov	lr, r3
 8006c9e:	4770      	bx	lr

08006ca0 <_fini>:
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca6:	bc08      	pop	{r3}
 8006ca8:	469e      	mov	lr, r3
 8006caa:	4770      	bx	lr
